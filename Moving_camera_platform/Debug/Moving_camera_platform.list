
Moving_camera_platform.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b6c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08005d00  08005d00  00015d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d80  08005d80  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08005d80  08005d80  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005d80  08005d80  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d80  08005d80  00015d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d84  08005d84  00015d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005d88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00000170  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000180  20000180  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000f3ee  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002260  00000000  00000000  0002f471  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f10  00000000  00000000  000316d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000bc5  00000000  00000000  000325e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020952  00000000  00000000  000331ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00014087  00000000  00000000  00053aff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cb97f  00000000  00000000  00067b86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003f68  00000000  00000000  00133508  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  00137470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08005ce8 	.word	0x08005ce8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08005ce8 	.word	0x08005ce8

080001d4 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E

void lcd_send_cmd (char cmd)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b086      	sub	sp, #24
 80001d8:	af02      	add	r7, sp, #8
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80001de:	79fb      	ldrb	r3, [r7, #7]
 80001e0:	f023 030f 	bic.w	r3, r3, #15
 80001e4:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	011b      	lsls	r3, r3, #4
 80001ea:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80001ec:	7bfb      	ldrb	r3, [r7, #15]
 80001ee:	f043 030c 	orr.w	r3, r3, #12
 80001f2:	b2db      	uxtb	r3, r3
 80001f4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80001f6:	7bfb      	ldrb	r3, [r7, #15]
 80001f8:	f043 0308 	orr.w	r3, r3, #8
 80001fc:	b2db      	uxtb	r3, r3
 80001fe:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000200:	7bbb      	ldrb	r3, [r7, #14]
 8000202:	f043 030c 	orr.w	r3, r3, #12
 8000206:	b2db      	uxtb	r3, r3
 8000208:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800020a:	7bbb      	ldrb	r3, [r7, #14]
 800020c:	f043 0308 	orr.w	r3, r3, #8
 8000210:	b2db      	uxtb	r3, r3
 8000212:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000214:	f107 0208 	add.w	r2, r7, #8
 8000218:	2364      	movs	r3, #100	; 0x64
 800021a:	9300      	str	r3, [sp, #0]
 800021c:	2304      	movs	r3, #4
 800021e:	214e      	movs	r1, #78	; 0x4e
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <lcd_send_cmd+0x5c>)
 8000222:	f002 fc93 	bl	8002b4c <HAL_I2C_Master_Transmit>
}
 8000226:	bf00      	nop
 8000228:	3710      	adds	r7, #16
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
 800022e:	bf00      	nop
 8000230:	200000cc 	.word	0x200000cc

08000234 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b086      	sub	sp, #24
 8000238:	af02      	add	r7, sp, #8
 800023a:	4603      	mov	r3, r0
 800023c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800023e:	79fb      	ldrb	r3, [r7, #7]
 8000240:	f023 030f 	bic.w	r3, r3, #15
 8000244:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000246:	79fb      	ldrb	r3, [r7, #7]
 8000248:	011b      	lsls	r3, r3, #4
 800024a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800024c:	7bfb      	ldrb	r3, [r7, #15]
 800024e:	f043 030d 	orr.w	r3, r3, #13
 8000252:	b2db      	uxtb	r3, r3
 8000254:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000256:	7bfb      	ldrb	r3, [r7, #15]
 8000258:	f043 0309 	orr.w	r3, r3, #9
 800025c:	b2db      	uxtb	r3, r3
 800025e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000260:	7bbb      	ldrb	r3, [r7, #14]
 8000262:	f043 030d 	orr.w	r3, r3, #13
 8000266:	b2db      	uxtb	r3, r3
 8000268:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800026a:	7bbb      	ldrb	r3, [r7, #14]
 800026c:	f043 0309 	orr.w	r3, r3, #9
 8000270:	b2db      	uxtb	r3, r3
 8000272:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000274:	f107 0208 	add.w	r2, r7, #8
 8000278:	2364      	movs	r3, #100	; 0x64
 800027a:	9300      	str	r3, [sp, #0]
 800027c:	2304      	movs	r3, #4
 800027e:	214e      	movs	r1, #78	; 0x4e
 8000280:	4803      	ldr	r0, [pc, #12]	; (8000290 <lcd_send_data+0x5c>)
 8000282:	f002 fc63 	bl	8002b4c <HAL_I2C_Master_Transmit>
}
 8000286:	bf00      	nop
 8000288:	3710      	adds	r7, #16
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
 800028e:	bf00      	nop
 8000290:	200000cc 	.word	0x200000cc

08000294 <lcd_clear>:

void lcd_clear (void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b082      	sub	sp, #8
 8000298:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 800029a:	2080      	movs	r0, #128	; 0x80
 800029c:	f7ff ff9a 	bl	80001d4 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 80002a0:	2300      	movs	r3, #0
 80002a2:	607b      	str	r3, [r7, #4]
 80002a4:	e005      	b.n	80002b2 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 80002a6:	2020      	movs	r0, #32
 80002a8:	f7ff ffc4 	bl	8000234 <lcd_send_data>
	for (int i=0; i<70; i++)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	3301      	adds	r3, #1
 80002b0:	607b      	str	r3, [r7, #4]
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	2b45      	cmp	r3, #69	; 0x45
 80002b6:	ddf6      	ble.n	80002a6 <lcd_clear+0x12>
	}
}
 80002b8:	bf00      	nop
 80002ba:	bf00      	nop
 80002bc:	3708      	adds	r7, #8
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}

080002c2 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80002c2:	b580      	push	{r7, lr}
 80002c4:	b082      	sub	sp, #8
 80002c6:	af00      	add	r7, sp, #0
 80002c8:	6078      	str	r0, [r7, #4]
 80002ca:	6039      	str	r1, [r7, #0]
    switch (row)
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d003      	beq.n	80002da <lcd_put_cur+0x18>
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	2b01      	cmp	r3, #1
 80002d6:	d005      	beq.n	80002e4 <lcd_put_cur+0x22>
 80002d8:	e009      	b.n	80002ee <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80002da:	683b      	ldr	r3, [r7, #0]
 80002dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002e0:	603b      	str	r3, [r7, #0]
            break;
 80002e2:	e004      	b.n	80002ee <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80002e4:	683b      	ldr	r3, [r7, #0]
 80002e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80002ea:	603b      	str	r3, [r7, #0]
            break;
 80002ec:	bf00      	nop
    }

    lcd_send_cmd (col);
 80002ee:	683b      	ldr	r3, [r7, #0]
 80002f0:	b2db      	uxtb	r3, r3
 80002f2:	4618      	mov	r0, r3
 80002f4:	f7ff ff6e 	bl	80001d4 <lcd_send_cmd>
}
 80002f8:	bf00      	nop
 80002fa:	3708      	adds	r7, #8
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}

08000300 <lcd_init>:


void lcd_init (void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000304:	2032      	movs	r0, #50	; 0x32
 8000306:	f000 ffcb 	bl	80012a0 <HAL_Delay>
	lcd_send_cmd (0x30);
 800030a:	2030      	movs	r0, #48	; 0x30
 800030c:	f7ff ff62 	bl	80001d4 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000310:	2005      	movs	r0, #5
 8000312:	f000 ffc5 	bl	80012a0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000316:	2030      	movs	r0, #48	; 0x30
 8000318:	f7ff ff5c 	bl	80001d4 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 800031c:	2001      	movs	r0, #1
 800031e:	f000 ffbf 	bl	80012a0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000322:	2030      	movs	r0, #48	; 0x30
 8000324:	f7ff ff56 	bl	80001d4 <lcd_send_cmd>
	HAL_Delay(10);
 8000328:	200a      	movs	r0, #10
 800032a:	f000 ffb9 	bl	80012a0 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 800032e:	2020      	movs	r0, #32
 8000330:	f7ff ff50 	bl	80001d4 <lcd_send_cmd>
	HAL_Delay(10);
 8000334:	200a      	movs	r0, #10
 8000336:	f000 ffb3 	bl	80012a0 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800033a:	2028      	movs	r0, #40	; 0x28
 800033c:	f7ff ff4a 	bl	80001d4 <lcd_send_cmd>
	HAL_Delay(1);
 8000340:	2001      	movs	r0, #1
 8000342:	f000 ffad 	bl	80012a0 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000346:	2008      	movs	r0, #8
 8000348:	f7ff ff44 	bl	80001d4 <lcd_send_cmd>
	HAL_Delay(1);
 800034c:	2001      	movs	r0, #1
 800034e:	f000 ffa7 	bl	80012a0 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000352:	2001      	movs	r0, #1
 8000354:	f7ff ff3e 	bl	80001d4 <lcd_send_cmd>
	HAL_Delay(1);
 8000358:	2001      	movs	r0, #1
 800035a:	f000 ffa1 	bl	80012a0 <HAL_Delay>
	HAL_Delay(1);
 800035e:	2001      	movs	r0, #1
 8000360:	f000 ff9e 	bl	80012a0 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000364:	2006      	movs	r0, #6
 8000366:	f7ff ff35 	bl	80001d4 <lcd_send_cmd>
	HAL_Delay(1);
 800036a:	2001      	movs	r0, #1
 800036c:	f000 ff98 	bl	80012a0 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000370:	200c      	movs	r0, #12
 8000372:	f7ff ff2f 	bl	80001d4 <lcd_send_cmd>
}
 8000376:	bf00      	nop
 8000378:	bd80      	pop	{r7, pc}

0800037a <lcd_send_string>:

void lcd_send_string (char *str)
{
 800037a:	b580      	push	{r7, lr}
 800037c:	b082      	sub	sp, #8
 800037e:	af00      	add	r7, sp, #0
 8000380:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000382:	e006      	b.n	8000392 <lcd_send_string+0x18>
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	1c5a      	adds	r2, r3, #1
 8000388:	607a      	str	r2, [r7, #4]
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	4618      	mov	r0, r3
 800038e:	f7ff ff51 	bl	8000234 <lcd_send_data>
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	2b00      	cmp	r3, #0
 8000398:	d1f4      	bne.n	8000384 <lcd_send_string+0xa>
}
 800039a:	bf00      	nop
 800039c:	bf00      	nop
 800039e:	3708      	adds	r7, #8
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}

080003a4 <servoA>:
static uint8_t j = 50;  // to control left and right movement
static uint8_t m =	18; // to control in auto scan mode
int move_clockwise = 0;
int x=0; // switchs the modes

void servoA(int angle){ // Controls top servo motor
 80003a4:	b480      	push	{r7}
 80003a6:	b083      	sub	sp, #12
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
	htim2.Instance -> CCR1=angle;
 80003ac:	4b04      	ldr	r3, [pc, #16]	; (80003c0 <servoA+0x1c>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	687a      	ldr	r2, [r7, #4]
 80003b2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80003b4:	bf00      	nop
 80003b6:	370c      	adds	r7, #12
 80003b8:	46bd      	mov	sp, r7
 80003ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003be:	4770      	bx	lr
 80003c0:	20000120 	.word	0x20000120

080003c4 <servoB>:
void servoB(int angle){ // Controls bottom servo motor
 80003c4:	b480      	push	{r7}
 80003c6:	b083      	sub	sp, #12
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
	htim2.Instance -> CCR2=angle;
 80003cc:	4b04      	ldr	r3, [pc, #16]	; (80003e0 <servoB+0x1c>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	687a      	ldr	r2, [r7, #4]
 80003d2:	639a      	str	r2, [r3, #56]	; 0x38
}
 80003d4:	bf00      	nop
 80003d6:	370c      	adds	r7, #12
 80003d8:	46bd      	mov	sp, r7
 80003da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003de:	4770      	bx	lr
 80003e0:	20000120 	.word	0x20000120

080003e4 <write_mode0>:


void write_mode0(){	// Display MODE 0
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
	lcd_clear(); // clear the screen
 80003e8:	f7ff ff54 	bl	8000294 <lcd_clear>
	lcd_put_cur(0, 0); // set cursor position to first line first character
 80003ec:	2100      	movs	r1, #0
 80003ee:	2000      	movs	r0, #0
 80003f0:	f7ff ff67 	bl	80002c2 <lcd_put_cur>
	lcd_send_string ("MODE "); // send a string to display
 80003f4:	4807      	ldr	r0, [pc, #28]	; (8000414 <write_mode0+0x30>)
 80003f6:	f7ff ffc0 	bl	800037a <lcd_send_string>
	lcd_send_data(0+48); // send a number to display
 80003fa:	2030      	movs	r0, #48	; 0x30
 80003fc:	f7ff ff1a 	bl	8000234 <lcd_send_data>
	lcd_put_cur(1, 0); // set cursor position to second line first character
 8000400:	2100      	movs	r1, #0
 8000402:	2001      	movs	r0, #1
 8000404:	f7ff ff5d 	bl	80002c2 <lcd_put_cur>
	lcd_send_string("NO INPUT"); //send string to display
 8000408:	4803      	ldr	r0, [pc, #12]	; (8000418 <write_mode0+0x34>)
 800040a:	f7ff ffb6 	bl	800037a <lcd_send_string>
}
 800040e:	bf00      	nop
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	08005d00 	.word	0x08005d00
 8000418:	08005d08 	.word	0x08005d08

0800041c <write_mode1>:
void write_mode1(){ // Display MODE 1
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
	lcd_clear();
 8000420:	f7ff ff38 	bl	8000294 <lcd_clear>
	lcd_put_cur(0, 0);
 8000424:	2100      	movs	r1, #0
 8000426:	2000      	movs	r0, #0
 8000428:	f7ff ff4b 	bl	80002c2 <lcd_put_cur>
	lcd_send_string ("MODE ");
 800042c:	4807      	ldr	r0, [pc, #28]	; (800044c <write_mode1+0x30>)
 800042e:	f7ff ffa4 	bl	800037a <lcd_send_string>
	lcd_send_data(1+48);
 8000432:	2031      	movs	r0, #49	; 0x31
 8000434:	f7ff fefe 	bl	8000234 <lcd_send_data>
	lcd_put_cur(1, 0);
 8000438:	2100      	movs	r1, #0
 800043a:	2001      	movs	r0, #1
 800043c:	f7ff ff41 	bl	80002c2 <lcd_put_cur>
	lcd_send_string("USE JOYSTICK");
 8000440:	4803      	ldr	r0, [pc, #12]	; (8000450 <write_mode1+0x34>)
 8000442:	f7ff ff9a 	bl	800037a <lcd_send_string>
}
 8000446:	bf00      	nop
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	08005d00 	.word	0x08005d00
 8000450:	08005d14 	.word	0x08005d14

08000454 <write_mode2>:
void write_mode2(){ // Display MODE 2
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
	lcd_clear();
 8000458:	f7ff ff1c 	bl	8000294 <lcd_clear>
	lcd_put_cur(0, 0);
 800045c:	2100      	movs	r1, #0
 800045e:	2000      	movs	r0, #0
 8000460:	f7ff ff2f 	bl	80002c2 <lcd_put_cur>
	lcd_send_string ("MODE ");
 8000464:	4807      	ldr	r0, [pc, #28]	; (8000484 <write_mode2+0x30>)
 8000466:	f7ff ff88 	bl	800037a <lcd_send_string>
	lcd_send_data(2+48);
 800046a:	2032      	movs	r0, #50	; 0x32
 800046c:	f7ff fee2 	bl	8000234 <lcd_send_data>
	lcd_put_cur(1, 0);
 8000470:	2100      	movs	r1, #0
 8000472:	2001      	movs	r0, #1
 8000474:	f7ff ff25 	bl	80002c2 <lcd_put_cur>
	lcd_send_string("AUTO SCAN");
 8000478:	4803      	ldr	r0, [pc, #12]	; (8000488 <write_mode2+0x34>)
 800047a:	f7ff ff7e 	bl	800037a <lcd_send_string>
}
 800047e:	bf00      	nop
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	08005d00 	.word	0x08005d00
 8000488:	08005d24 	.word	0x08005d24

0800048c <HAL_GPIO_EXTI_Callback>:

// Button interrupt function to switch between the modes
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0
 8000492:	4603      	mov	r3, r0
 8000494:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  if(GPIO_Pin == Button_Pin)
 8000496:	88fb      	ldrh	r3, [r7, #6]
 8000498:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800049c:	d10d      	bne.n	80004ba <HAL_GPIO_EXTI_Callback+0x2e>
	  x = (x+1)%3;
 800049e:	4b18      	ldr	r3, [pc, #96]	; (8000500 <HAL_GPIO_EXTI_Callback+0x74>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	1c59      	adds	r1, r3, #1
 80004a4:	4b17      	ldr	r3, [pc, #92]	; (8000504 <HAL_GPIO_EXTI_Callback+0x78>)
 80004a6:	fb83 3201 	smull	r3, r2, r3, r1
 80004aa:	17cb      	asrs	r3, r1, #31
 80004ac:	1ad2      	subs	r2, r2, r3
 80004ae:	4613      	mov	r3, r2
 80004b0:	005b      	lsls	r3, r3, #1
 80004b2:	4413      	add	r3, r2
 80004b4:	1aca      	subs	r2, r1, r3
 80004b6:	4b12      	ldr	r3, [pc, #72]	; (8000500 <HAL_GPIO_EXTI_Callback+0x74>)
 80004b8:	601a      	str	r2, [r3, #0]
  if(x==0){
 80004ba:	4b11      	ldr	r3, [pc, #68]	; (8000500 <HAL_GPIO_EXTI_Callback+0x74>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d101      	bne.n	80004c6 <HAL_GPIO_EXTI_Callback+0x3a>
	  write_mode0();
 80004c2:	f7ff ff8f 	bl	80003e4 <write_mode0>
  }
  if(x==1){
 80004c6:	4b0e      	ldr	r3, [pc, #56]	; (8000500 <HAL_GPIO_EXTI_Callback+0x74>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	2b01      	cmp	r3, #1
 80004cc:	d107      	bne.n	80004de <HAL_GPIO_EXTI_Callback+0x52>
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 80004ce:	2201      	movs	r2, #1
 80004d0:	2120      	movs	r1, #32
 80004d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004d6:	f002 fa79 	bl	80029cc <HAL_GPIO_WritePin>
	  write_mode1();
 80004da:	f7ff ff9f 	bl	800041c <write_mode1>
  }

  if(x==2){
 80004de:	4b08      	ldr	r3, [pc, #32]	; (8000500 <HAL_GPIO_EXTI_Callback+0x74>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	2b02      	cmp	r3, #2
 80004e4:	d107      	bne.n	80004f6 <HAL_GPIO_EXTI_Callback+0x6a>
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);
 80004e6:	2200      	movs	r2, #0
 80004e8:	2120      	movs	r1, #32
 80004ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004ee:	f002 fa6d 	bl	80029cc <HAL_GPIO_WritePin>
	  write_mode2();
 80004f2:	f7ff ffaf 	bl	8000454 <write_mode2>


  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80004f6:	bf00      	nop
 80004f8:	3708      	adds	r7, #8
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	20000174 	.word	0x20000174
 8000504:	55555556 	.word	0x55555556

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 fe62 	bl	80011d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 fa2e 	bl	8000970 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 fc26 	bl	8000d64 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000518:	f000 fba2 	bl	8000c60 <MX_TIM2_Init>
  MX_ADC1_Init();
 800051c:	f000 fa92 	bl	8000a44 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000520:	f000 fb00 	bl	8000b24 <MX_ADC2_Init>
  MX_I2C1_Init();
 8000524:	f000 fb5c 	bl	8000be0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start (&htim2, TIM_CHANNEL_1);
 8000528:	2100      	movs	r1, #0
 800052a:	48a5      	ldr	r0, [pc, #660]	; (80007c0 <main+0x2b8>)
 800052c:	f004 fbd6 	bl	8004cdc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start (&htim2, TIM_CHANNEL_2);
 8000530:	2104      	movs	r1, #4
 8000532:	48a3      	ldr	r0, [pc, #652]	; (80007c0 <main+0x2b8>)
 8000534:	f004 fbd2 	bl	8004cdc <HAL_TIM_PWM_Start>
  HAL_ADC_Start(&hadc1);
 8000538:	48a2      	ldr	r0, [pc, #648]	; (80007c4 <main+0x2bc>)
 800053a:	f001 f8df 	bl	80016fc <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 800053e:	48a2      	ldr	r0, [pc, #648]	; (80007c8 <main+0x2c0>)
 8000540:	f001 f8dc 	bl	80016fc <HAL_ADC_Start>

  lcd_init ();
 8000544:	f7ff fedc 	bl	8000300 <lcd_init>
  lcd_send_string ("ELE");
 8000548:	48a0      	ldr	r0, [pc, #640]	; (80007cc <main+0x2c4>)
 800054a:	f7ff ff16 	bl	800037a <lcd_send_string>
  lcd_send_data(4+48);
 800054e:	2034      	movs	r0, #52	; 0x34
 8000550:	f7ff fe70 	bl	8000234 <lcd_send_data>
  lcd_send_data(1+48);
 8000554:	2031      	movs	r0, #49	; 0x31
 8000556:	f7ff fe6d 	bl	8000234 <lcd_send_data>
  lcd_send_data(7+48);
 800055a:	2037      	movs	r0, #55	; 0x37
 800055c:	f7ff fe6a 	bl	8000234 <lcd_send_data>
  lcd_send_string (" PROJECT");
 8000560:	489b      	ldr	r0, [pc, #620]	; (80007d0 <main+0x2c8>)
 8000562:	f7ff ff0a 	bl	800037a <lcd_send_string>
  lcd_put_cur(1, 0);
 8000566:	2100      	movs	r1, #0
 8000568:	2001      	movs	r0, #1
 800056a:	f7ff feaa 	bl	80002c2 <lcd_put_cur>
  lcd_send_string("SERVET CELIK");
 800056e:	4899      	ldr	r0, [pc, #612]	; (80007d4 <main+0x2cc>)
 8000570:	f7ff ff03 	bl	800037a <lcd_send_string>
  HAL_Delay(2000);
 8000574:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000578:	f000 fe92 	bl	80012a0 <HAL_Delay>
  lcd_clear();
 800057c:	f7ff fe8a 	bl	8000294 <lcd_clear>
  if(x==0){
 8000580:	4b95      	ldr	r3, [pc, #596]	; (80007d8 <main+0x2d0>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d108      	bne.n	800059a <main+0x92>
	  write_mode0();
 8000588:	f7ff ff2c 	bl	80003e4 <write_mode0>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
     /* USER CODE END WHILE */
 	  while(x==0){ // if MODE0 active, enter sleep mode and wait for an interrupt
 800058c:	e005      	b.n	800059a <main+0x92>
 		 HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800058e:	2101      	movs	r1, #1
 8000590:	2000      	movs	r0, #0
 8000592:	f002 fe77 	bl	8003284 <HAL_PWR_EnterSLEEPMode>
 		 HAL_ResumeTick();
 8000596:	f000 fea7 	bl	80012e8 <HAL_ResumeTick>
 	  while(x==0){ // if MODE0 active, enter sleep mode and wait for an interrupt
 800059a:	4b8f      	ldr	r3, [pc, #572]	; (80007d8 <main+0x2d0>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d0f5      	beq.n	800058e <main+0x86>
 		  //HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 	  	  //HAL_Delay(250);
 	  }


 	  while(x == 1){// if MODE1 active
 80005a2:	e181      	b.n	80008a8 <main+0x3a0>
 		  // get data from joystick
 		  HAL_ADC_PollForConversion(&hadc1,1000);
 80005a4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005a8:	4886      	ldr	r0, [pc, #536]	; (80007c4 <main+0x2bc>)
 80005aa:	f001 f9bd 	bl	8001928 <HAL_ADC_PollForConversion>
 		  readValueY = HAL_ADC_GetValue(&hadc1);
 80005ae:	4885      	ldr	r0, [pc, #532]	; (80007c4 <main+0x2bc>)
 80005b0:	f001 fabc 	bl	8001b2c <HAL_ADC_GetValue>
 80005b4:	4603      	mov	r3, r0
 80005b6:	b29a      	uxth	r2, r3
 80005b8:	4b88      	ldr	r3, [pc, #544]	; (80007dc <main+0x2d4>)
 80005ba:	801a      	strh	r2, [r3, #0]
 		  HAL_ADC_PollForConversion(&hadc2,1000);
 80005bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005c0:	4881      	ldr	r0, [pc, #516]	; (80007c8 <main+0x2c0>)
 80005c2:	f001 f9b1 	bl	8001928 <HAL_ADC_PollForConversion>
 		  readValueX = HAL_ADC_GetValue(&hadc2);
 80005c6:	4880      	ldr	r0, [pc, #512]	; (80007c8 <main+0x2c0>)
 80005c8:	f001 fab0 	bl	8001b2c <HAL_ADC_GetValue>
 80005cc:	4603      	mov	r3, r0
 80005ce:	b29a      	uxth	r2, r3
 80005d0:	4b83      	ldr	r3, [pc, #524]	; (80007e0 <main+0x2d8>)
 80005d2:	801a      	strh	r2, [r3, #0]

 		  if((readValueX<3500) && (readValueX>600) && (readValueY>3500)){
 80005d4:	4b82      	ldr	r3, [pc, #520]	; (80007e0 <main+0x2d8>)
 80005d6:	881b      	ldrh	r3, [r3, #0]
 80005d8:	f640 52ab 	movw	r2, #3499	; 0xdab
 80005dc:	4293      	cmp	r3, r2
 80005de:	d81e      	bhi.n	800061e <main+0x116>
 80005e0:	4b7f      	ldr	r3, [pc, #508]	; (80007e0 <main+0x2d8>)
 80005e2:	881b      	ldrh	r3, [r3, #0]
 80005e4:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80005e8:	d919      	bls.n	800061e <main+0x116>
 80005ea:	4b7c      	ldr	r3, [pc, #496]	; (80007dc <main+0x2d4>)
 80005ec:	881b      	ldrh	r3, [r3, #0]
 80005ee:	f640 52ac 	movw	r2, #3500	; 0xdac
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d913      	bls.n	800061e <main+0x116>
 			  // if +y input recieved
 			  if(i>15){// is the limit exceeded
 80005f6:	4b7b      	ldr	r3, [pc, #492]	; (80007e4 <main+0x2dc>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	2b0f      	cmp	r3, #15
 80005fc:	f240 8154 	bls.w	80008a8 <main+0x3a0>
 				  servoA(i); // move top servo
 8000600:	4b78      	ldr	r3, [pc, #480]	; (80007e4 <main+0x2dc>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	4618      	mov	r0, r3
 8000606:	f7ff fecd 	bl	80003a4 <servoA>
 				  HAL_Delay(10);
 800060a:	200a      	movs	r0, #10
 800060c:	f000 fe48 	bl	80012a0 <HAL_Delay>
 				  i--;
 8000610:	4b74      	ldr	r3, [pc, #464]	; (80007e4 <main+0x2dc>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	3b01      	subs	r3, #1
 8000616:	b2da      	uxtb	r2, r3
 8000618:	4b72      	ldr	r3, [pc, #456]	; (80007e4 <main+0x2dc>)
 800061a:	701a      	strb	r2, [r3, #0]
 			  if(i>15){// is the limit exceeded
 800061c:	e144      	b.n	80008a8 <main+0x3a0>
 			  }
 		  }
 		  else if((readValueX<3500) && (readValueX>600) && (readValueY<800)){
 800061e:	4b70      	ldr	r3, [pc, #448]	; (80007e0 <main+0x2d8>)
 8000620:	881b      	ldrh	r3, [r3, #0]
 8000622:	f640 52ab 	movw	r2, #3499	; 0xdab
 8000626:	4293      	cmp	r3, r2
 8000628:	d81d      	bhi.n	8000666 <main+0x15e>
 800062a:	4b6d      	ldr	r3, [pc, #436]	; (80007e0 <main+0x2d8>)
 800062c:	881b      	ldrh	r3, [r3, #0]
 800062e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8000632:	d918      	bls.n	8000666 <main+0x15e>
 8000634:	4b69      	ldr	r3, [pc, #420]	; (80007dc <main+0x2d4>)
 8000636:	881b      	ldrh	r3, [r3, #0]
 8000638:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800063c:	d213      	bcs.n	8000666 <main+0x15e>
 			  if(i<65){
 800063e:	4b69      	ldr	r3, [pc, #420]	; (80007e4 <main+0x2dc>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	2b40      	cmp	r3, #64	; 0x40
 8000644:	f200 8130 	bhi.w	80008a8 <main+0x3a0>
 				  servoA(i);
 8000648:	4b66      	ldr	r3, [pc, #408]	; (80007e4 <main+0x2dc>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	4618      	mov	r0, r3
 800064e:	f7ff fea9 	bl	80003a4 <servoA>
 				  HAL_Delay(10);
 8000652:	200a      	movs	r0, #10
 8000654:	f000 fe24 	bl	80012a0 <HAL_Delay>
 				  i++;
 8000658:	4b62      	ldr	r3, [pc, #392]	; (80007e4 <main+0x2dc>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	3301      	adds	r3, #1
 800065e:	b2da      	uxtb	r2, r3
 8000660:	4b60      	ldr	r3, [pc, #384]	; (80007e4 <main+0x2dc>)
 8000662:	701a      	strb	r2, [r3, #0]
 			  if(i<65){
 8000664:	e120      	b.n	80008a8 <main+0x3a0>
 			  }
 		  }
 		  else if((readValueY<3500) && (readValueY>600) && (readValueX<800)){
 8000666:	4b5d      	ldr	r3, [pc, #372]	; (80007dc <main+0x2d4>)
 8000668:	881b      	ldrh	r3, [r3, #0]
 800066a:	f640 52ab 	movw	r2, #3499	; 0xdab
 800066e:	4293      	cmp	r3, r2
 8000670:	d81d      	bhi.n	80006ae <main+0x1a6>
 8000672:	4b5a      	ldr	r3, [pc, #360]	; (80007dc <main+0x2d4>)
 8000674:	881b      	ldrh	r3, [r3, #0]
 8000676:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800067a:	d918      	bls.n	80006ae <main+0x1a6>
 800067c:	4b58      	ldr	r3, [pc, #352]	; (80007e0 <main+0x2d8>)
 800067e:	881b      	ldrh	r3, [r3, #0]
 8000680:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000684:	d213      	bcs.n	80006ae <main+0x1a6>
 			  if(j>21){ // if -x input recieved
 8000686:	4b58      	ldr	r3, [pc, #352]	; (80007e8 <main+0x2e0>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	2b15      	cmp	r3, #21
 800068c:	f240 810c 	bls.w	80008a8 <main+0x3a0>
 				  servoB(j); // move bottom servo motor
 8000690:	4b55      	ldr	r3, [pc, #340]	; (80007e8 <main+0x2e0>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	4618      	mov	r0, r3
 8000696:	f7ff fe95 	bl	80003c4 <servoB>
 				  HAL_Delay(10);
 800069a:	200a      	movs	r0, #10
 800069c:	f000 fe00 	bl	80012a0 <HAL_Delay>
 				  j--;
 80006a0:	4b51      	ldr	r3, [pc, #324]	; (80007e8 <main+0x2e0>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	3b01      	subs	r3, #1
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	4b4f      	ldr	r3, [pc, #316]	; (80007e8 <main+0x2e0>)
 80006aa:	701a      	strb	r2, [r3, #0]
 			  if(j>21){ // if -x input recieved
 80006ac:	e0fc      	b.n	80008a8 <main+0x3a0>
 			  }
 		  }

 		  else if((readValueY<3500) && (readValueY>600) && (readValueX>3500)){
 80006ae:	4b4b      	ldr	r3, [pc, #300]	; (80007dc <main+0x2d4>)
 80006b0:	881b      	ldrh	r3, [r3, #0]
 80006b2:	f640 52ab 	movw	r2, #3499	; 0xdab
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d81e      	bhi.n	80006f8 <main+0x1f0>
 80006ba:	4b48      	ldr	r3, [pc, #288]	; (80007dc <main+0x2d4>)
 80006bc:	881b      	ldrh	r3, [r3, #0]
 80006be:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80006c2:	d919      	bls.n	80006f8 <main+0x1f0>
 80006c4:	4b46      	ldr	r3, [pc, #280]	; (80007e0 <main+0x2d8>)
 80006c6:	881b      	ldrh	r3, [r3, #0]
 80006c8:	f640 52ac 	movw	r2, #3500	; 0xdac
 80006cc:	4293      	cmp	r3, r2
 80006ce:	d913      	bls.n	80006f8 <main+0x1f0>
 			  if(j<122){
 80006d0:	4b45      	ldr	r3, [pc, #276]	; (80007e8 <main+0x2e0>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	2b79      	cmp	r3, #121	; 0x79
 80006d6:	f200 80e7 	bhi.w	80008a8 <main+0x3a0>
 				  servoB(j);
 80006da:	4b43      	ldr	r3, [pc, #268]	; (80007e8 <main+0x2e0>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	4618      	mov	r0, r3
 80006e0:	f7ff fe70 	bl	80003c4 <servoB>
 				  HAL_Delay(10);
 80006e4:	200a      	movs	r0, #10
 80006e6:	f000 fddb 	bl	80012a0 <HAL_Delay>
 				  j++;
 80006ea:	4b3f      	ldr	r3, [pc, #252]	; (80007e8 <main+0x2e0>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	3301      	adds	r3, #1
 80006f0:	b2da      	uxtb	r2, r3
 80006f2:	4b3d      	ldr	r3, [pc, #244]	; (80007e8 <main+0x2e0>)
 80006f4:	701a      	strb	r2, [r3, #0]
 			  if(j<122){
 80006f6:	e0d7      	b.n	80008a8 <main+0x3a0>
 			  }
 		  }

 		  else if((readValueX>3500) && (readValueY>3500)){
 80006f8:	4b39      	ldr	r3, [pc, #228]	; (80007e0 <main+0x2d8>)
 80006fa:	881b      	ldrh	r3, [r3, #0]
 80006fc:	f640 52ac 	movw	r2, #3500	; 0xdac
 8000700:	4293      	cmp	r3, r2
 8000702:	d92b      	bls.n	800075c <main+0x254>
 8000704:	4b35      	ldr	r3, [pc, #212]	; (80007dc <main+0x2d4>)
 8000706:	881b      	ldrh	r3, [r3, #0]
 8000708:	f640 52ac 	movw	r2, #3500	; 0xdac
 800070c:	4293      	cmp	r3, r2
 800070e:	d925      	bls.n	800075c <main+0x254>
 			  if(j<122){
 8000710:	4b35      	ldr	r3, [pc, #212]	; (80007e8 <main+0x2e0>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b79      	cmp	r3, #121	; 0x79
 8000716:	d80d      	bhi.n	8000734 <main+0x22c>
 				  servoB(j);
 8000718:	4b33      	ldr	r3, [pc, #204]	; (80007e8 <main+0x2e0>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	4618      	mov	r0, r3
 800071e:	f7ff fe51 	bl	80003c4 <servoB>
 				  HAL_Delay(10);
 8000722:	200a      	movs	r0, #10
 8000724:	f000 fdbc 	bl	80012a0 <HAL_Delay>
 				  j++;
 8000728:	4b2f      	ldr	r3, [pc, #188]	; (80007e8 <main+0x2e0>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	3301      	adds	r3, #1
 800072e:	b2da      	uxtb	r2, r3
 8000730:	4b2d      	ldr	r3, [pc, #180]	; (80007e8 <main+0x2e0>)
 8000732:	701a      	strb	r2, [r3, #0]
 			  }
 			  if(i>15){
 8000734:	4b2b      	ldr	r3, [pc, #172]	; (80007e4 <main+0x2dc>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	2b0f      	cmp	r3, #15
 800073a:	f240 80b5 	bls.w	80008a8 <main+0x3a0>
 				  servoA(i);
 800073e:	4b29      	ldr	r3, [pc, #164]	; (80007e4 <main+0x2dc>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	4618      	mov	r0, r3
 8000744:	f7ff fe2e 	bl	80003a4 <servoA>
 				  HAL_Delay(10);
 8000748:	200a      	movs	r0, #10
 800074a:	f000 fda9 	bl	80012a0 <HAL_Delay>
 				  i--;
 800074e:	4b25      	ldr	r3, [pc, #148]	; (80007e4 <main+0x2dc>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	3b01      	subs	r3, #1
 8000754:	b2da      	uxtb	r2, r3
 8000756:	4b23      	ldr	r3, [pc, #140]	; (80007e4 <main+0x2dc>)
 8000758:	701a      	strb	r2, [r3, #0]
 			  if(i>15){
 800075a:	e0a5      	b.n	80008a8 <main+0x3a0>
 			  }
 		  }

 		  else if((readValueX>3500) && (readValueY<800)){
 800075c:	4b20      	ldr	r3, [pc, #128]	; (80007e0 <main+0x2d8>)
 800075e:	881b      	ldrh	r3, [r3, #0]
 8000760:	f640 52ac 	movw	r2, #3500	; 0xdac
 8000764:	4293      	cmp	r3, r2
 8000766:	d941      	bls.n	80007ec <main+0x2e4>
 8000768:	4b1c      	ldr	r3, [pc, #112]	; (80007dc <main+0x2d4>)
 800076a:	881b      	ldrh	r3, [r3, #0]
 800076c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000770:	d23c      	bcs.n	80007ec <main+0x2e4>
 			  if(j<122){
 8000772:	4b1d      	ldr	r3, [pc, #116]	; (80007e8 <main+0x2e0>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	2b79      	cmp	r3, #121	; 0x79
 8000778:	d80d      	bhi.n	8000796 <main+0x28e>
 				  servoB(j);
 800077a:	4b1b      	ldr	r3, [pc, #108]	; (80007e8 <main+0x2e0>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	4618      	mov	r0, r3
 8000780:	f7ff fe20 	bl	80003c4 <servoB>
 				  HAL_Delay(10);
 8000784:	200a      	movs	r0, #10
 8000786:	f000 fd8b 	bl	80012a0 <HAL_Delay>
 				  j++;
 800078a:	4b17      	ldr	r3, [pc, #92]	; (80007e8 <main+0x2e0>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	3301      	adds	r3, #1
 8000790:	b2da      	uxtb	r2, r3
 8000792:	4b15      	ldr	r3, [pc, #84]	; (80007e8 <main+0x2e0>)
 8000794:	701a      	strb	r2, [r3, #0]
 			  }
 			  if(i<65){
 8000796:	4b13      	ldr	r3, [pc, #76]	; (80007e4 <main+0x2dc>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	2b40      	cmp	r3, #64	; 0x40
 800079c:	f200 8084 	bhi.w	80008a8 <main+0x3a0>
 				  servoA(i);
 80007a0:	4b10      	ldr	r3, [pc, #64]	; (80007e4 <main+0x2dc>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff fdfd 	bl	80003a4 <servoA>
 				  HAL_Delay(10);
 80007aa:	200a      	movs	r0, #10
 80007ac:	f000 fd78 	bl	80012a0 <HAL_Delay>
 				  i++;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <main+0x2dc>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	3301      	adds	r3, #1
 80007b6:	b2da      	uxtb	r2, r3
 80007b8:	4b0a      	ldr	r3, [pc, #40]	; (80007e4 <main+0x2dc>)
 80007ba:	701a      	strb	r2, [r3, #0]
 			  if(i<65){
 80007bc:	e074      	b.n	80008a8 <main+0x3a0>
 80007be:	bf00      	nop
 80007c0:	20000120 	.word	0x20000120
 80007c4:	2000002c 	.word	0x2000002c
 80007c8:	2000007c 	.word	0x2000007c
 80007cc:	08005d30 	.word	0x08005d30
 80007d0:	08005d34 	.word	0x08005d34
 80007d4:	08005d40 	.word	0x08005d40
 80007d8:	20000174 	.word	0x20000174
 80007dc:	2000016e 	.word	0x2000016e
 80007e0:	2000016c 	.word	0x2000016c
 80007e4:	20000000 	.word	0x20000000
 80007e8:	20000001 	.word	0x20000001
 			  }
 		  }

 		  else if((readValueX<800) && (readValueY>3500)){
 80007ec:	4b59      	ldr	r3, [pc, #356]	; (8000954 <main+0x44c>)
 80007ee:	881b      	ldrh	r3, [r3, #0]
 80007f0:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80007f4:	d22a      	bcs.n	800084c <main+0x344>
 80007f6:	4b58      	ldr	r3, [pc, #352]	; (8000958 <main+0x450>)
 80007f8:	881b      	ldrh	r3, [r3, #0]
 80007fa:	f640 52ac 	movw	r2, #3500	; 0xdac
 80007fe:	4293      	cmp	r3, r2
 8000800:	d924      	bls.n	800084c <main+0x344>
 			  if(j>21){
 8000802:	4b56      	ldr	r3, [pc, #344]	; (800095c <main+0x454>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	2b15      	cmp	r3, #21
 8000808:	d90d      	bls.n	8000826 <main+0x31e>
 				  servoB(j);
 800080a:	4b54      	ldr	r3, [pc, #336]	; (800095c <main+0x454>)
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	4618      	mov	r0, r3
 8000810:	f7ff fdd8 	bl	80003c4 <servoB>
 				  HAL_Delay(10);
 8000814:	200a      	movs	r0, #10
 8000816:	f000 fd43 	bl	80012a0 <HAL_Delay>
 				  j--;
 800081a:	4b50      	ldr	r3, [pc, #320]	; (800095c <main+0x454>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	3b01      	subs	r3, #1
 8000820:	b2da      	uxtb	r2, r3
 8000822:	4b4e      	ldr	r3, [pc, #312]	; (800095c <main+0x454>)
 8000824:	701a      	strb	r2, [r3, #0]
 			  }
 			  if(i>15){
 8000826:	4b4e      	ldr	r3, [pc, #312]	; (8000960 <main+0x458>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2b0f      	cmp	r3, #15
 800082c:	d93c      	bls.n	80008a8 <main+0x3a0>
 				  servoA(i);
 800082e:	4b4c      	ldr	r3, [pc, #304]	; (8000960 <main+0x458>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	4618      	mov	r0, r3
 8000834:	f7ff fdb6 	bl	80003a4 <servoA>
 				  HAL_Delay(10);
 8000838:	200a      	movs	r0, #10
 800083a:	f000 fd31 	bl	80012a0 <HAL_Delay>
 				  i--;
 800083e:	4b48      	ldr	r3, [pc, #288]	; (8000960 <main+0x458>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	3b01      	subs	r3, #1
 8000844:	b2da      	uxtb	r2, r3
 8000846:	4b46      	ldr	r3, [pc, #280]	; (8000960 <main+0x458>)
 8000848:	701a      	strb	r2, [r3, #0]
 			  if(i>15){
 800084a:	e02d      	b.n	80008a8 <main+0x3a0>
 			  }
 		  }
 		  else if((readValueX<800) && (readValueY<800)){
 800084c:	4b41      	ldr	r3, [pc, #260]	; (8000954 <main+0x44c>)
 800084e:	881b      	ldrh	r3, [r3, #0]
 8000850:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000854:	d228      	bcs.n	80008a8 <main+0x3a0>
 8000856:	4b40      	ldr	r3, [pc, #256]	; (8000958 <main+0x450>)
 8000858:	881b      	ldrh	r3, [r3, #0]
 800085a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800085e:	d223      	bcs.n	80008a8 <main+0x3a0>
 			  if(j>21){
 8000860:	4b3e      	ldr	r3, [pc, #248]	; (800095c <main+0x454>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	2b15      	cmp	r3, #21
 8000866:	d90d      	bls.n	8000884 <main+0x37c>
 				  servoB(j);
 8000868:	4b3c      	ldr	r3, [pc, #240]	; (800095c <main+0x454>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff fda9 	bl	80003c4 <servoB>
 				  HAL_Delay(10);
 8000872:	200a      	movs	r0, #10
 8000874:	f000 fd14 	bl	80012a0 <HAL_Delay>
 				  j--;
 8000878:	4b38      	ldr	r3, [pc, #224]	; (800095c <main+0x454>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	3b01      	subs	r3, #1
 800087e:	b2da      	uxtb	r2, r3
 8000880:	4b36      	ldr	r3, [pc, #216]	; (800095c <main+0x454>)
 8000882:	701a      	strb	r2, [r3, #0]
 			  }
 			  if(i<65){
 8000884:	4b36      	ldr	r3, [pc, #216]	; (8000960 <main+0x458>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2b40      	cmp	r3, #64	; 0x40
 800088a:	d80d      	bhi.n	80008a8 <main+0x3a0>
 				  servoA(i);
 800088c:	4b34      	ldr	r3, [pc, #208]	; (8000960 <main+0x458>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	4618      	mov	r0, r3
 8000892:	f7ff fd87 	bl	80003a4 <servoA>
 				  HAL_Delay(10);
 8000896:	200a      	movs	r0, #10
 8000898:	f000 fd02 	bl	80012a0 <HAL_Delay>
 				  i++;
 800089c:	4b30      	ldr	r3, [pc, #192]	; (8000960 <main+0x458>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	3301      	adds	r3, #1
 80008a2:	b2da      	uxtb	r2, r3
 80008a4:	4b2e      	ldr	r3, [pc, #184]	; (8000960 <main+0x458>)
 80008a6:	701a      	strb	r2, [r3, #0]
 	  while(x == 1){// if MODE1 active
 80008a8:	4b2e      	ldr	r3, [pc, #184]	; (8000964 <main+0x45c>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	f43f ae79 	beq.w	80005a4 <main+0x9c>
 		  }
 	  }



 	  while(x == 2){ // if MODE2 active
 80008b2:	e049      	b.n	8000948 <main+0x440>
 		  m = 23;
 80008b4:	4b2c      	ldr	r3, [pc, #176]	; (8000968 <main+0x460>)
 80008b6:	2217      	movs	r2, #23
 80008b8:	701a      	strb	r2, [r3, #0]
 		  move_clockwise = 1;// determines which way the camera will move
 80008ba:	4b2c      	ldr	r3, [pc, #176]	; (800096c <main+0x464>)
 80008bc:	2201      	movs	r2, #1
 80008be:	601a      	str	r2, [r3, #0]
 		  HAL_Delay(1000);
 80008c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008c4:	f000 fcec 	bl	80012a0 <HAL_Delay>
 		  while(x==2){
 80008c8:	e03a      	b.n	8000940 <main+0x438>
 			  servoB(m);
 80008ca:	4b27      	ldr	r3, [pc, #156]	; (8000968 <main+0x460>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	4618      	mov	r0, r3
 80008d0:	f7ff fd78 	bl	80003c4 <servoB>
 			  HAL_Delay(100);
 80008d4:	2064      	movs	r0, #100	; 0x64
 80008d6:	f000 fce3 	bl	80012a0 <HAL_Delay>
 			  if(move_clockwise == 1 && m<122){
 80008da:	4b24      	ldr	r3, [pc, #144]	; (800096c <main+0x464>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d115      	bne.n	800090e <main+0x406>
 80008e2:	4b21      	ldr	r3, [pc, #132]	; (8000968 <main+0x460>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	2b79      	cmp	r3, #121	; 0x79
 80008e8:	d811      	bhi.n	800090e <main+0x406>
 				  m++;
 80008ea:	4b1f      	ldr	r3, [pc, #124]	; (8000968 <main+0x460>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	3301      	adds	r3, #1
 80008f0:	b2da      	uxtb	r2, r3
 80008f2:	4b1d      	ldr	r3, [pc, #116]	; (8000968 <main+0x460>)
 80008f4:	701a      	strb	r2, [r3, #0]
 				  if(m==121){
 80008f6:	4b1c      	ldr	r3, [pc, #112]	; (8000968 <main+0x460>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	2b79      	cmp	r3, #121	; 0x79
 80008fc:	d120      	bne.n	8000940 <main+0x438>
 					  move_clockwise = 0;
 80008fe:	4b1b      	ldr	r3, [pc, #108]	; (800096c <main+0x464>)
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 					  HAL_Delay(1000);
 8000904:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000908:	f000 fcca 	bl	80012a0 <HAL_Delay>
 				  if(m==121){
 800090c:	e018      	b.n	8000940 <main+0x438>
 				  }
 			  }
 			  else if(move_clockwise==0 && m>21){
 800090e:	4b17      	ldr	r3, [pc, #92]	; (800096c <main+0x464>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d114      	bne.n	8000940 <main+0x438>
 8000916:	4b14      	ldr	r3, [pc, #80]	; (8000968 <main+0x460>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2b15      	cmp	r3, #21
 800091c:	d910      	bls.n	8000940 <main+0x438>
 				  m--;
 800091e:	4b12      	ldr	r3, [pc, #72]	; (8000968 <main+0x460>)
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	3b01      	subs	r3, #1
 8000924:	b2da      	uxtb	r2, r3
 8000926:	4b10      	ldr	r3, [pc, #64]	; (8000968 <main+0x460>)
 8000928:	701a      	strb	r2, [r3, #0]
 				  if(m==22){
 800092a:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <main+0x460>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	2b16      	cmp	r3, #22
 8000930:	d106      	bne.n	8000940 <main+0x438>
 					  move_clockwise = 1;
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <main+0x464>)
 8000934:	2201      	movs	r2, #1
 8000936:	601a      	str	r2, [r3, #0]
 					  HAL_Delay(1000);
 8000938:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800093c:	f000 fcb0 	bl	80012a0 <HAL_Delay>
 		  while(x==2){
 8000940:	4b08      	ldr	r3, [pc, #32]	; (8000964 <main+0x45c>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2b02      	cmp	r3, #2
 8000946:	d0c0      	beq.n	80008ca <main+0x3c2>
 	  while(x == 2){ // if MODE2 active
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <main+0x45c>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2b02      	cmp	r3, #2
 800094e:	d0b1      	beq.n	80008b4 <main+0x3ac>
 	  while(x==0){ // if MODE0 active, enter sleep mode and wait for an interrupt
 8000950:	e623      	b.n	800059a <main+0x92>
 8000952:	bf00      	nop
 8000954:	2000016c 	.word	0x2000016c
 8000958:	2000016e 	.word	0x2000016e
 800095c:	20000001 	.word	0x20000001
 8000960:	20000000 	.word	0x20000000
 8000964:	20000174 	.word	0x20000174
 8000968:	20000002 	.word	0x20000002
 800096c:	20000170 	.word	0x20000170

08000970 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b0a6      	sub	sp, #152	; 0x98
 8000974:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000976:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800097a:	2228      	movs	r2, #40	; 0x28
 800097c:	2100      	movs	r1, #0
 800097e:	4618      	mov	r0, r3
 8000980:	f005 f986 	bl	8005c90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000984:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000994:	1d3b      	adds	r3, r7, #4
 8000996:	2258      	movs	r2, #88	; 0x58
 8000998:	2100      	movs	r1, #0
 800099a:	4618      	mov	r0, r3
 800099c:	f005 f978 	bl	8005c90 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80009a0:	2303      	movs	r3, #3
 80009a2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009a8:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009aa:	2301      	movs	r3, #1
 80009ac:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009ae:	2310      	movs	r3, #16
 80009b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009b4:	2302      	movs	r3, #2
 80009b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80009c2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80009c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80009ca:	2300      	movs	r3, #0
 80009cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009d0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80009d4:	4618      	mov	r0, r3
 80009d6:	f002 fc71 	bl	80032bc <HAL_RCC_OscConfig>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80009e0:	f000 fa2e 	bl	8000e40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009e4:	230f      	movs	r3, #15
 80009e6:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009e8:	2302      	movs	r3, #2
 80009ea:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ec:	2300      	movs	r3, #0
 80009ee:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009f0:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80009f4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80009f6:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80009fa:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009fc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000a00:	2102      	movs	r1, #2
 8000a02:	4618      	mov	r0, r3
 8000a04:	f003 fcae 	bl	8004364 <HAL_RCC_ClockConfig>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000a0e:	f000 fa17 	bl	8000e40 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC12
 8000a12:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <SystemClock_Config+0xd0>)
 8000a14:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM2;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000a16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8000a20:	2300      	movs	r3, #0
 8000a22:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a24:	1d3b      	adds	r3, r7, #4
 8000a26:	4618      	mov	r0, r3
 8000a28:	f003 fe82 	bl	8004730 <HAL_RCCEx_PeriphCLKConfig>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000a32:	f000 fa05 	bl	8000e40 <Error_Handler>
  }
}
 8000a36:	bf00      	nop
 8000a38:	3798      	adds	r7, #152	; 0x98
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	001000a0 	.word	0x001000a0

08000a44 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08a      	sub	sp, #40	; 0x28
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a56:	1d3b      	adds	r3, r7, #4
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]
 8000a64:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a66:	4b2e      	ldr	r3, [pc, #184]	; (8000b20 <MX_ADC1_Init+0xdc>)
 8000a68:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a6c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a6e:	4b2c      	ldr	r3, [pc, #176]	; (8000b20 <MX_ADC1_Init+0xdc>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a74:	4b2a      	ldr	r3, [pc, #168]	; (8000b20 <MX_ADC1_Init+0xdc>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a7a:	4b29      	ldr	r3, [pc, #164]	; (8000b20 <MX_ADC1_Init+0xdc>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a80:	4b27      	ldr	r3, [pc, #156]	; (8000b20 <MX_ADC1_Init+0xdc>)
 8000a82:	2201      	movs	r2, #1
 8000a84:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a86:	4b26      	ldr	r3, [pc, #152]	; (8000b20 <MX_ADC1_Init+0xdc>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a8e:	4b24      	ldr	r3, [pc, #144]	; (8000b20 <MX_ADC1_Init+0xdc>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a94:	4b22      	ldr	r3, [pc, #136]	; (8000b20 <MX_ADC1_Init+0xdc>)
 8000a96:	2201      	movs	r2, #1
 8000a98:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a9a:	4b21      	ldr	r3, [pc, #132]	; (8000b20 <MX_ADC1_Init+0xdc>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000aa0:	4b1f      	ldr	r3, [pc, #124]	; (8000b20 <MX_ADC1_Init+0xdc>)
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000aa6:	4b1e      	ldr	r3, [pc, #120]	; (8000b20 <MX_ADC1_Init+0xdc>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000aae:	4b1c      	ldr	r3, [pc, #112]	; (8000b20 <MX_ADC1_Init+0xdc>)
 8000ab0:	2204      	movs	r2, #4
 8000ab2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ab4:	4b1a      	ldr	r3, [pc, #104]	; (8000b20 <MX_ADC1_Init+0xdc>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000aba:	4b19      	ldr	r3, [pc, #100]	; (8000b20 <MX_ADC1_Init+0xdc>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ac0:	4817      	ldr	r0, [pc, #92]	; (8000b20 <MX_ADC1_Init+0xdc>)
 8000ac2:	f000 fc21 	bl	8001308 <HAL_ADC_Init>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000acc:	f000 f9b8 	bl	8000e40 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ad4:	f107 031c 	add.w	r3, r7, #28
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4811      	ldr	r0, [pc, #68]	; (8000b20 <MX_ADC1_Init+0xdc>)
 8000adc:	f001 fb1e 	bl	800211c <HAL_ADCEx_MultiModeConfigChannel>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000ae6:	f000 f9ab 	bl	8000e40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000aea:	2306      	movs	r3, #6
 8000aec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000aee:	2301      	movs	r3, #1
 8000af0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000af2:	2300      	movs	r3, #0
 8000af4:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000af6:	2300      	movs	r3, #0
 8000af8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000afa:	2300      	movs	r3, #0
 8000afc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b02:	1d3b      	adds	r3, r7, #4
 8000b04:	4619      	mov	r1, r3
 8000b06:	4806      	ldr	r0, [pc, #24]	; (8000b20 <MX_ADC1_Init+0xdc>)
 8000b08:	f001 f81e 	bl	8001b48 <HAL_ADC_ConfigChannel>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000b12:	f000 f995 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b16:	bf00      	nop
 8000b18:	3728      	adds	r7, #40	; 0x28
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	2000002c 	.word	0x2000002c

08000b24 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b086      	sub	sp, #24
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b2a:	463b      	mov	r3, r7
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
 8000b38:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000b3a:	4b27      	ldr	r3, [pc, #156]	; (8000bd8 <MX_ADC2_Init+0xb4>)
 8000b3c:	4a27      	ldr	r2, [pc, #156]	; (8000bdc <MX_ADC2_Init+0xb8>)
 8000b3e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b40:	4b25      	ldr	r3, [pc, #148]	; (8000bd8 <MX_ADC2_Init+0xb4>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000b46:	4b24      	ldr	r3, [pc, #144]	; (8000bd8 <MX_ADC2_Init+0xb4>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b4c:	4b22      	ldr	r3, [pc, #136]	; (8000bd8 <MX_ADC2_Init+0xb4>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000b52:	4b21      	ldr	r3, [pc, #132]	; (8000bd8 <MX_ADC2_Init+0xb4>)
 8000b54:	2201      	movs	r2, #1
 8000b56:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b58:	4b1f      	ldr	r3, [pc, #124]	; (8000bd8 <MX_ADC2_Init+0xb4>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b60:	4b1d      	ldr	r3, [pc, #116]	; (8000bd8 <MX_ADC2_Init+0xb4>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b66:	4b1c      	ldr	r3, [pc, #112]	; (8000bd8 <MX_ADC2_Init+0xb4>)
 8000b68:	2201      	movs	r2, #1
 8000b6a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b6c:	4b1a      	ldr	r3, [pc, #104]	; (8000bd8 <MX_ADC2_Init+0xb4>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000b72:	4b19      	ldr	r3, [pc, #100]	; (8000bd8 <MX_ADC2_Init+0xb4>)
 8000b74:	2201      	movs	r2, #1
 8000b76:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000b78:	4b17      	ldr	r3, [pc, #92]	; (8000bd8 <MX_ADC2_Init+0xb4>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b80:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <MX_ADC2_Init+0xb4>)
 8000b82:	2204      	movs	r2, #4
 8000b84:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000b86:	4b14      	ldr	r3, [pc, #80]	; (8000bd8 <MX_ADC2_Init+0xb4>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000b8c:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <MX_ADC2_Init+0xb4>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000b92:	4811      	ldr	r0, [pc, #68]	; (8000bd8 <MX_ADC2_Init+0xb4>)
 8000b94:	f000 fbb8 	bl	8001308 <HAL_ADC_Init>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8000b9e:	f000 f94f 	bl	8000e40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000baa:	2300      	movs	r3, #0
 8000bac:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000bba:	463b      	mov	r3, r7
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4806      	ldr	r0, [pc, #24]	; (8000bd8 <MX_ADC2_Init+0xb4>)
 8000bc0:	f000 ffc2 	bl	8001b48 <HAL_ADC_ConfigChannel>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000bca:	f000 f939 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000bce:	bf00      	nop
 8000bd0:	3718      	adds	r7, #24
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	2000007c 	.word	0x2000007c
 8000bdc:	50000100 	.word	0x50000100

08000be0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000be4:	4b1b      	ldr	r3, [pc, #108]	; (8000c54 <MX_I2C1_Init+0x74>)
 8000be6:	4a1c      	ldr	r2, [pc, #112]	; (8000c58 <MX_I2C1_Init+0x78>)
 8000be8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000bea:	4b1a      	ldr	r3, [pc, #104]	; (8000c54 <MX_I2C1_Init+0x74>)
 8000bec:	4a1b      	ldr	r2, [pc, #108]	; (8000c5c <MX_I2C1_Init+0x7c>)
 8000bee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000bf0:	4b18      	ldr	r3, [pc, #96]	; (8000c54 <MX_I2C1_Init+0x74>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bf6:	4b17      	ldr	r3, [pc, #92]	; (8000c54 <MX_I2C1_Init+0x74>)
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bfc:	4b15      	ldr	r3, [pc, #84]	; (8000c54 <MX_I2C1_Init+0x74>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c02:	4b14      	ldr	r3, [pc, #80]	; (8000c54 <MX_I2C1_Init+0x74>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c08:	4b12      	ldr	r3, [pc, #72]	; (8000c54 <MX_I2C1_Init+0x74>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c0e:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <MX_I2C1_Init+0x74>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c14:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <MX_I2C1_Init+0x74>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c1a:	480e      	ldr	r0, [pc, #56]	; (8000c54 <MX_I2C1_Init+0x74>)
 8000c1c:	f001 ff06 	bl	8002a2c <HAL_I2C_Init>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c26:	f000 f90b 	bl	8000e40 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	4809      	ldr	r0, [pc, #36]	; (8000c54 <MX_I2C1_Init+0x74>)
 8000c2e:	f002 fa91 	bl	8003154 <HAL_I2CEx_ConfigAnalogFilter>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c38:	f000 f902 	bl	8000e40 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4805      	ldr	r0, [pc, #20]	; (8000c54 <MX_I2C1_Init+0x74>)
 8000c40:	f002 fad3 	bl	80031ea <HAL_I2CEx_ConfigDigitalFilter>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c4a:	f000 f8f9 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	200000cc 	.word	0x200000cc
 8000c58:	40005400 	.word	0x40005400
 8000c5c:	2000090e 	.word	0x2000090e

08000c60 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08e      	sub	sp, #56	; 0x38
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	605a      	str	r2, [r3, #4]
 8000c70:	609a      	str	r2, [r3, #8]
 8000c72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c74:	f107 031c 	add.w	r3, r7, #28
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c80:	463b      	mov	r3, r7
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]
 8000c88:	609a      	str	r2, [r3, #8]
 8000c8a:	60da      	str	r2, [r3, #12]
 8000c8c:	611a      	str	r2, [r3, #16]
 8000c8e:	615a      	str	r2, [r3, #20]
 8000c90:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c92:	4b33      	ldr	r3, [pc, #204]	; (8000d60 <MX_TIM2_Init+0x100>)
 8000c94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c98:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 720-1;
 8000c9a:	4b31      	ldr	r3, [pc, #196]	; (8000d60 <MX_TIM2_Init+0x100>)
 8000c9c:	f240 22cf 	movw	r2, #719	; 0x2cf
 8000ca0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca2:	4b2f      	ldr	r3, [pc, #188]	; (8000d60 <MX_TIM2_Init+0x100>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000ca8:	4b2d      	ldr	r3, [pc, #180]	; (8000d60 <MX_TIM2_Init+0x100>)
 8000caa:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb0:	4b2b      	ldr	r3, [pc, #172]	; (8000d60 <MX_TIM2_Init+0x100>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cb6:	4b2a      	ldr	r3, [pc, #168]	; (8000d60 <MX_TIM2_Init+0x100>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cbc:	4828      	ldr	r0, [pc, #160]	; (8000d60 <MX_TIM2_Init+0x100>)
 8000cbe:	f003 ff55 	bl	8004b6c <HAL_TIM_Base_Init>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000cc8:	f000 f8ba 	bl	8000e40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ccc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cd0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4821      	ldr	r0, [pc, #132]	; (8000d60 <MX_TIM2_Init+0x100>)
 8000cda:	f004 fa1f 	bl	800511c <HAL_TIM_ConfigClockSource>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000ce4:	f000 f8ac 	bl	8000e40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ce8:	481d      	ldr	r0, [pc, #116]	; (8000d60 <MX_TIM2_Init+0x100>)
 8000cea:	f003 ff96 	bl	8004c1a <HAL_TIM_PWM_Init>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000cf4:	f000 f8a4 	bl	8000e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d00:	f107 031c 	add.w	r3, r7, #28
 8000d04:	4619      	mov	r1, r3
 8000d06:	4816      	ldr	r0, [pc, #88]	; (8000d60 <MX_TIM2_Init+0x100>)
 8000d08:	f004 ff36 	bl	8005b78 <HAL_TIMEx_MasterConfigSynchronization>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000d12:	f000 f895 	bl	8000e40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d16:	2360      	movs	r3, #96	; 0x60
 8000d18:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d22:	2300      	movs	r3, #0
 8000d24:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d26:	463b      	mov	r3, r7
 8000d28:	2200      	movs	r2, #0
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	480c      	ldr	r0, [pc, #48]	; (8000d60 <MX_TIM2_Init+0x100>)
 8000d2e:	f004 f8e1 	bl	8004ef4 <HAL_TIM_PWM_ConfigChannel>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000d38:	f000 f882 	bl	8000e40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d3c:	463b      	mov	r3, r7
 8000d3e:	2204      	movs	r2, #4
 8000d40:	4619      	mov	r1, r3
 8000d42:	4807      	ldr	r0, [pc, #28]	; (8000d60 <MX_TIM2_Init+0x100>)
 8000d44:	f004 f8d6 	bl	8004ef4 <HAL_TIM_PWM_ConfigChannel>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8000d4e:	f000 f877 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d52:	4803      	ldr	r0, [pc, #12]	; (8000d60 <MX_TIM2_Init+0x100>)
 8000d54:	f000 f99c 	bl	8001090 <HAL_TIM_MspPostInit>

}
 8000d58:	bf00      	nop
 8000d5a:	3738      	adds	r7, #56	; 0x38
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20000120 	.word	0x20000120

08000d64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08a      	sub	sp, #40	; 0x28
 8000d68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6a:	f107 0314 	add.w	r3, r7, #20
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	605a      	str	r2, [r3, #4]
 8000d74:	609a      	str	r2, [r3, #8]
 8000d76:	60da      	str	r2, [r3, #12]
 8000d78:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d7a:	4b2f      	ldr	r3, [pc, #188]	; (8000e38 <MX_GPIO_Init+0xd4>)
 8000d7c:	695b      	ldr	r3, [r3, #20]
 8000d7e:	4a2e      	ldr	r2, [pc, #184]	; (8000e38 <MX_GPIO_Init+0xd4>)
 8000d80:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000d84:	6153      	str	r3, [r2, #20]
 8000d86:	4b2c      	ldr	r3, [pc, #176]	; (8000e38 <MX_GPIO_Init+0xd4>)
 8000d88:	695b      	ldr	r3, [r3, #20]
 8000d8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000d8e:	613b      	str	r3, [r7, #16]
 8000d90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d92:	4b29      	ldr	r3, [pc, #164]	; (8000e38 <MX_GPIO_Init+0xd4>)
 8000d94:	695b      	ldr	r3, [r3, #20]
 8000d96:	4a28      	ldr	r2, [pc, #160]	; (8000e38 <MX_GPIO_Init+0xd4>)
 8000d98:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d9c:	6153      	str	r3, [r2, #20]
 8000d9e:	4b26      	ldr	r3, [pc, #152]	; (8000e38 <MX_GPIO_Init+0xd4>)
 8000da0:	695b      	ldr	r3, [r3, #20]
 8000da2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000daa:	4b23      	ldr	r3, [pc, #140]	; (8000e38 <MX_GPIO_Init+0xd4>)
 8000dac:	695b      	ldr	r3, [r3, #20]
 8000dae:	4a22      	ldr	r2, [pc, #136]	; (8000e38 <MX_GPIO_Init+0xd4>)
 8000db0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db4:	6153      	str	r3, [r2, #20]
 8000db6:	4b20      	ldr	r3, [pc, #128]	; (8000e38 <MX_GPIO_Init+0xd4>)
 8000db8:	695b      	ldr	r3, [r3, #20]
 8000dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dbe:	60bb      	str	r3, [r7, #8]
 8000dc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc2:	4b1d      	ldr	r3, [pc, #116]	; (8000e38 <MX_GPIO_Init+0xd4>)
 8000dc4:	695b      	ldr	r3, [r3, #20]
 8000dc6:	4a1c      	ldr	r2, [pc, #112]	; (8000e38 <MX_GPIO_Init+0xd4>)
 8000dc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dcc:	6153      	str	r3, [r2, #20]
 8000dce:	4b1a      	ldr	r3, [pc, #104]	; (8000e38 <MX_GPIO_Init+0xd4>)
 8000dd0:	695b      	ldr	r3, [r3, #20]
 8000dd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2120      	movs	r1, #32
 8000dde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de2:	f001 fdf3 	bl	80029cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8000de6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000dec:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000df0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000df2:	2301      	movs	r3, #1
 8000df4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8000df6:	f107 0314 	add.w	r3, r7, #20
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	480f      	ldr	r0, [pc, #60]	; (8000e3c <MX_GPIO_Init+0xd8>)
 8000dfe:	f001 fc5b 	bl	80026b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e02:	2320      	movs	r3, #32
 8000e04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e06:	2301      	movs	r3, #1
 8000e08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e12:	f107 0314 	add.w	r3, r7, #20
 8000e16:	4619      	mov	r1, r3
 8000e18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e1c:	f001 fc4c 	bl	80026b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e20:	2200      	movs	r2, #0
 8000e22:	2100      	movs	r1, #0
 8000e24:	2028      	movs	r0, #40	; 0x28
 8000e26:	f001 fc10 	bl	800264a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e2a:	2028      	movs	r0, #40	; 0x28
 8000e2c:	f001 fc29 	bl	8002682 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e30:	bf00      	nop
 8000e32:	3728      	adds	r7, #40	; 0x28
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40021000 	.word	0x40021000
 8000e3c:	48000800 	.word	0x48000800

08000e40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e44:	b672      	cpsid	i
}
 8000e46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e48:	e7fe      	b.n	8000e48 <Error_Handler+0x8>
	...

08000e4c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e52:	4b0f      	ldr	r3, [pc, #60]	; (8000e90 <HAL_MspInit+0x44>)
 8000e54:	699b      	ldr	r3, [r3, #24]
 8000e56:	4a0e      	ldr	r2, [pc, #56]	; (8000e90 <HAL_MspInit+0x44>)
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	6193      	str	r3, [r2, #24]
 8000e5e:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <HAL_MspInit+0x44>)
 8000e60:	699b      	ldr	r3, [r3, #24]
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	607b      	str	r3, [r7, #4]
 8000e68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e6a:	4b09      	ldr	r3, [pc, #36]	; (8000e90 <HAL_MspInit+0x44>)
 8000e6c:	69db      	ldr	r3, [r3, #28]
 8000e6e:	4a08      	ldr	r2, [pc, #32]	; (8000e90 <HAL_MspInit+0x44>)
 8000e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e74:	61d3      	str	r3, [r2, #28]
 8000e76:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <HAL_MspInit+0x44>)
 8000e78:	69db      	ldr	r3, [r3, #28]
 8000e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e7e:	603b      	str	r3, [r7, #0]
 8000e80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e82:	bf00      	nop
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	40021000 	.word	0x40021000

08000e94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b08c      	sub	sp, #48	; 0x30
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9c:	f107 031c 	add.w	r3, r7, #28
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]
 8000eaa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000eb4:	d12d      	bne.n	8000f12 <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000eb6:	4b32      	ldr	r3, [pc, #200]	; (8000f80 <HAL_ADC_MspInit+0xec>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	4a30      	ldr	r2, [pc, #192]	; (8000f80 <HAL_ADC_MspInit+0xec>)
 8000ebe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000ec0:	4b2f      	ldr	r3, [pc, #188]	; (8000f80 <HAL_ADC_MspInit+0xec>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d10b      	bne.n	8000ee0 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000ec8:	4b2e      	ldr	r3, [pc, #184]	; (8000f84 <HAL_ADC_MspInit+0xf0>)
 8000eca:	695b      	ldr	r3, [r3, #20]
 8000ecc:	4a2d      	ldr	r2, [pc, #180]	; (8000f84 <HAL_ADC_MspInit+0xf0>)
 8000ece:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ed2:	6153      	str	r3, [r2, #20]
 8000ed4:	4b2b      	ldr	r3, [pc, #172]	; (8000f84 <HAL_ADC_MspInit+0xf0>)
 8000ed6:	695b      	ldr	r3, [r3, #20]
 8000ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000edc:	61bb      	str	r3, [r7, #24]
 8000ede:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ee0:	4b28      	ldr	r3, [pc, #160]	; (8000f84 <HAL_ADC_MspInit+0xf0>)
 8000ee2:	695b      	ldr	r3, [r3, #20]
 8000ee4:	4a27      	ldr	r2, [pc, #156]	; (8000f84 <HAL_ADC_MspInit+0xf0>)
 8000ee6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000eea:	6153      	str	r3, [r2, #20]
 8000eec:	4b25      	ldr	r3, [pc, #148]	; (8000f84 <HAL_ADC_MspInit+0xf0>)
 8000eee:	695b      	ldr	r3, [r3, #20]
 8000ef0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ef4:	617b      	str	r3, [r7, #20]
 8000ef6:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000efc:	2303      	movs	r3, #3
 8000efe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f04:	f107 031c 	add.w	r3, r7, #28
 8000f08:	4619      	mov	r1, r3
 8000f0a:	481f      	ldr	r0, [pc, #124]	; (8000f88 <HAL_ADC_MspInit+0xf4>)
 8000f0c:	f001 fbd4 	bl	80026b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000f10:	e032      	b.n	8000f78 <HAL_ADC_MspInit+0xe4>
  else if(hadc->Instance==ADC2)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a1d      	ldr	r2, [pc, #116]	; (8000f8c <HAL_ADC_MspInit+0xf8>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d12d      	bne.n	8000f78 <HAL_ADC_MspInit+0xe4>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000f1c:	4b18      	ldr	r3, [pc, #96]	; (8000f80 <HAL_ADC_MspInit+0xec>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	3301      	adds	r3, #1
 8000f22:	4a17      	ldr	r2, [pc, #92]	; (8000f80 <HAL_ADC_MspInit+0xec>)
 8000f24:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000f26:	4b16      	ldr	r3, [pc, #88]	; (8000f80 <HAL_ADC_MspInit+0xec>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d10b      	bne.n	8000f46 <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000f2e:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <HAL_ADC_MspInit+0xf0>)
 8000f30:	695b      	ldr	r3, [r3, #20]
 8000f32:	4a14      	ldr	r2, [pc, #80]	; (8000f84 <HAL_ADC_MspInit+0xf0>)
 8000f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f38:	6153      	str	r3, [r2, #20]
 8000f3a:	4b12      	ldr	r3, [pc, #72]	; (8000f84 <HAL_ADC_MspInit+0xf0>)
 8000f3c:	695b      	ldr	r3, [r3, #20]
 8000f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f42:	613b      	str	r3, [r7, #16]
 8000f44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f46:	4b0f      	ldr	r3, [pc, #60]	; (8000f84 <HAL_ADC_MspInit+0xf0>)
 8000f48:	695b      	ldr	r3, [r3, #20]
 8000f4a:	4a0e      	ldr	r2, [pc, #56]	; (8000f84 <HAL_ADC_MspInit+0xf0>)
 8000f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f50:	6153      	str	r3, [r2, #20]
 8000f52:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <HAL_ADC_MspInit+0xf0>)
 8000f54:	695b      	ldr	r3, [r3, #20]
 8000f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f5e:	2310      	movs	r3, #16
 8000f60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f62:	2303      	movs	r3, #3
 8000f64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6a:	f107 031c 	add.w	r3, r7, #28
 8000f6e:	4619      	mov	r1, r3
 8000f70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f74:	f001 fba0 	bl	80026b8 <HAL_GPIO_Init>
}
 8000f78:	bf00      	nop
 8000f7a:	3730      	adds	r7, #48	; 0x30
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20000178 	.word	0x20000178
 8000f84:	40021000 	.word	0x40021000
 8000f88:	48000800 	.word	0x48000800
 8000f8c:	50000100 	.word	0x50000100

08000f90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08a      	sub	sp, #40	; 0x28
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	f107 0314 	add.w	r3, r7, #20
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a26      	ldr	r2, [pc, #152]	; (8001048 <HAL_I2C_MspInit+0xb8>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d145      	bne.n	800103e <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb2:	4b26      	ldr	r3, [pc, #152]	; (800104c <HAL_I2C_MspInit+0xbc>)
 8000fb4:	695b      	ldr	r3, [r3, #20]
 8000fb6:	4a25      	ldr	r2, [pc, #148]	; (800104c <HAL_I2C_MspInit+0xbc>)
 8000fb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fbc:	6153      	str	r3, [r2, #20]
 8000fbe:	4b23      	ldr	r3, [pc, #140]	; (800104c <HAL_I2C_MspInit+0xbc>)
 8000fc0:	695b      	ldr	r3, [r3, #20]
 8000fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc6:	613b      	str	r3, [r7, #16]
 8000fc8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fca:	4b20      	ldr	r3, [pc, #128]	; (800104c <HAL_I2C_MspInit+0xbc>)
 8000fcc:	695b      	ldr	r3, [r3, #20]
 8000fce:	4a1f      	ldr	r2, [pc, #124]	; (800104c <HAL_I2C_MspInit+0xbc>)
 8000fd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fd4:	6153      	str	r3, [r2, #20]
 8000fd6:	4b1d      	ldr	r3, [pc, #116]	; (800104c <HAL_I2C_MspInit+0xbc>)
 8000fd8:	695b      	ldr	r3, [r3, #20]
 8000fda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000fe2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fe6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fe8:	2312      	movs	r3, #18
 8000fea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ff4:	2304      	movs	r3, #4
 8000ff6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001002:	f001 fb59 	bl	80026b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001006:	2380      	movs	r3, #128	; 0x80
 8001008:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800100a:	2312      	movs	r3, #18
 800100c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001012:	2303      	movs	r3, #3
 8001014:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001016:	2304      	movs	r3, #4
 8001018:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800101a:	f107 0314 	add.w	r3, r7, #20
 800101e:	4619      	mov	r1, r3
 8001020:	480b      	ldr	r0, [pc, #44]	; (8001050 <HAL_I2C_MspInit+0xc0>)
 8001022:	f001 fb49 	bl	80026b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001026:	4b09      	ldr	r3, [pc, #36]	; (800104c <HAL_I2C_MspInit+0xbc>)
 8001028:	69db      	ldr	r3, [r3, #28]
 800102a:	4a08      	ldr	r2, [pc, #32]	; (800104c <HAL_I2C_MspInit+0xbc>)
 800102c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001030:	61d3      	str	r3, [r2, #28]
 8001032:	4b06      	ldr	r3, [pc, #24]	; (800104c <HAL_I2C_MspInit+0xbc>)
 8001034:	69db      	ldr	r3, [r3, #28]
 8001036:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800103a:	60bb      	str	r3, [r7, #8]
 800103c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800103e:	bf00      	nop
 8001040:	3728      	adds	r7, #40	; 0x28
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40005400 	.word	0x40005400
 800104c:	40021000 	.word	0x40021000
 8001050:	48000400 	.word	0x48000400

08001054 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001054:	b480      	push	{r7}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001064:	d10b      	bne.n	800107e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001066:	4b09      	ldr	r3, [pc, #36]	; (800108c <HAL_TIM_Base_MspInit+0x38>)
 8001068:	69db      	ldr	r3, [r3, #28]
 800106a:	4a08      	ldr	r2, [pc, #32]	; (800108c <HAL_TIM_Base_MspInit+0x38>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	61d3      	str	r3, [r2, #28]
 8001072:	4b06      	ldr	r3, [pc, #24]	; (800108c <HAL_TIM_Base_MspInit+0x38>)
 8001074:	69db      	ldr	r3, [r3, #28]
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800107e:	bf00      	nop
 8001080:	3714      	adds	r7, #20
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	40021000 	.word	0x40021000

08001090 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b088      	sub	sp, #32
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	f107 030c 	add.w	r3, r7, #12
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010b0:	d11c      	bne.n	80010ec <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b2:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <HAL_TIM_MspPostInit+0x64>)
 80010b4:	695b      	ldr	r3, [r3, #20]
 80010b6:	4a0f      	ldr	r2, [pc, #60]	; (80010f4 <HAL_TIM_MspPostInit+0x64>)
 80010b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010bc:	6153      	str	r3, [r2, #20]
 80010be:	4b0d      	ldr	r3, [pc, #52]	; (80010f4 <HAL_TIM_MspPostInit+0x64>)
 80010c0:	695b      	ldr	r3, [r3, #20]
 80010c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c6:	60bb      	str	r3, [r7, #8]
 80010c8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010ca:	2303      	movs	r3, #3
 80010cc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ce:	2302      	movs	r3, #2
 80010d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d6:	2300      	movs	r3, #0
 80010d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010da:	2301      	movs	r3, #1
 80010dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010de:	f107 030c 	add.w	r3, r7, #12
 80010e2:	4619      	mov	r1, r3
 80010e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e8:	f001 fae6 	bl	80026b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80010ec:	bf00      	nop
 80010ee:	3720      	adds	r7, #32
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40021000 	.word	0x40021000

080010f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010fc:	e7fe      	b.n	80010fc <NMI_Handler+0x4>

080010fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001102:	e7fe      	b.n	8001102 <HardFault_Handler+0x4>

08001104 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001108:	e7fe      	b.n	8001108 <MemManage_Handler+0x4>

0800110a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800110a:	b480      	push	{r7}
 800110c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800110e:	e7fe      	b.n	800110e <BusFault_Handler+0x4>

08001110 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001114:	e7fe      	b.n	8001114 <UsageFault_Handler+0x4>

08001116 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001116:	b480      	push	{r7}
 8001118:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr

08001132 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001144:	f000 f88c 	bl	8001260 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001148:	bf00      	nop
 800114a:	bd80      	pop	{r7, pc}

0800114c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Pin);
 8001150:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001154:	f001 fc52 	bl	80029fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}

0800115c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001160:	4b06      	ldr	r3, [pc, #24]	; (800117c <SystemInit+0x20>)
 8001162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001166:	4a05      	ldr	r2, [pc, #20]	; (800117c <SystemInit+0x20>)
 8001168:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800116c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001180:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011b8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001184:	f7ff ffea 	bl	800115c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001188:	480c      	ldr	r0, [pc, #48]	; (80011bc <LoopForever+0x6>)
  ldr r1, =_edata
 800118a:	490d      	ldr	r1, [pc, #52]	; (80011c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800118c:	4a0d      	ldr	r2, [pc, #52]	; (80011c4 <LoopForever+0xe>)
  movs r3, #0
 800118e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001190:	e002      	b.n	8001198 <LoopCopyDataInit>

08001192 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001192:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001194:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001196:	3304      	adds	r3, #4

08001198 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001198:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800119a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800119c:	d3f9      	bcc.n	8001192 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800119e:	4a0a      	ldr	r2, [pc, #40]	; (80011c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011a0:	4c0a      	ldr	r4, [pc, #40]	; (80011cc <LoopForever+0x16>)
  movs r3, #0
 80011a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011a4:	e001      	b.n	80011aa <LoopFillZerobss>

080011a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011a8:	3204      	adds	r2, #4

080011aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011ac:	d3fb      	bcc.n	80011a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011ae:	f004 fd77 	bl	8005ca0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011b2:	f7ff f9a9 	bl	8000508 <main>

080011b6 <LoopForever>:

LoopForever:
    b LoopForever
 80011b6:	e7fe      	b.n	80011b6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011b8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80011bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011c0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80011c4:	08005d88 	.word	0x08005d88
  ldr r2, =_sbss
 80011c8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80011cc:	20000180 	.word	0x20000180

080011d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011d0:	e7fe      	b.n	80011d0 <ADC1_2_IRQHandler>
	...

080011d4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011d8:	4b08      	ldr	r3, [pc, #32]	; (80011fc <HAL_Init+0x28>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a07      	ldr	r2, [pc, #28]	; (80011fc <HAL_Init+0x28>)
 80011de:	f043 0310 	orr.w	r3, r3, #16
 80011e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e4:	2003      	movs	r0, #3
 80011e6:	f001 fa25 	bl	8002634 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ea:	200f      	movs	r0, #15
 80011ec:	f000 f808 	bl	8001200 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011f0:	f7ff fe2c 	bl	8000e4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40022000 	.word	0x40022000

08001200 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001208:	4b12      	ldr	r3, [pc, #72]	; (8001254 <HAL_InitTick+0x54>)
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	4b12      	ldr	r3, [pc, #72]	; (8001258 <HAL_InitTick+0x58>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	4619      	mov	r1, r3
 8001212:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001216:	fbb3 f3f1 	udiv	r3, r3, r1
 800121a:	fbb2 f3f3 	udiv	r3, r2, r3
 800121e:	4618      	mov	r0, r3
 8001220:	f001 fa3d 	bl	800269e <HAL_SYSTICK_Config>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e00e      	b.n	800124c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2b0f      	cmp	r3, #15
 8001232:	d80a      	bhi.n	800124a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001234:	2200      	movs	r2, #0
 8001236:	6879      	ldr	r1, [r7, #4]
 8001238:	f04f 30ff 	mov.w	r0, #4294967295
 800123c:	f001 fa05 	bl	800264a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001240:	4a06      	ldr	r2, [pc, #24]	; (800125c <HAL_InitTick+0x5c>)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001246:	2300      	movs	r3, #0
 8001248:	e000      	b.n	800124c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
}
 800124c:	4618      	mov	r0, r3
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20000004 	.word	0x20000004
 8001258:	2000000c 	.word	0x2000000c
 800125c:	20000008 	.word	0x20000008

08001260 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001264:	4b06      	ldr	r3, [pc, #24]	; (8001280 <HAL_IncTick+0x20>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	461a      	mov	r2, r3
 800126a:	4b06      	ldr	r3, [pc, #24]	; (8001284 <HAL_IncTick+0x24>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4413      	add	r3, r2
 8001270:	4a04      	ldr	r2, [pc, #16]	; (8001284 <HAL_IncTick+0x24>)
 8001272:	6013      	str	r3, [r2, #0]
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	2000000c 	.word	0x2000000c
 8001284:	2000017c 	.word	0x2000017c

08001288 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  return uwTick;  
 800128c:	4b03      	ldr	r3, [pc, #12]	; (800129c <HAL_GetTick+0x14>)
 800128e:	681b      	ldr	r3, [r3, #0]
}
 8001290:	4618      	mov	r0, r3
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	2000017c 	.word	0x2000017c

080012a0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012a8:	f7ff ffee 	bl	8001288 <HAL_GetTick>
 80012ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012b8:	d005      	beq.n	80012c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ba:	4b0a      	ldr	r3, [pc, #40]	; (80012e4 <HAL_Delay+0x44>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	461a      	mov	r2, r3
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	4413      	add	r3, r2
 80012c4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80012c6:	bf00      	nop
 80012c8:	f7ff ffde 	bl	8001288 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	68fa      	ldr	r2, [r7, #12]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d8f7      	bhi.n	80012c8 <HAL_Delay+0x28>
  {
  }
}
 80012d8:	bf00      	nop
 80012da:	bf00      	nop
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	2000000c 	.word	0x2000000c

080012e8 <HAL_ResumeTick>:
  *         The function is declared as __Weak  to be overwritten  in case of other
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80012ec:	4b05      	ldr	r3, [pc, #20]	; (8001304 <HAL_ResumeTick+0x1c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a04      	ldr	r2, [pc, #16]	; (8001304 <HAL_ResumeTick+0x1c>)
 80012f2:	f043 0302 	orr.w	r3, r3, #2
 80012f6:	6013      	str	r3, [r2, #0]
  
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	e000e010 	.word	0xe000e010

08001308 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b09a      	sub	sp, #104	; 0x68
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001310:	2300      	movs	r3, #0
 8001312:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001316:	2300      	movs	r3, #0
 8001318:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800131a:	2300      	movs	r3, #0
 800131c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d101      	bne.n	8001328 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e1e3      	b.n	80016f0 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	691b      	ldr	r3, [r3, #16]
 800132c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001332:	f003 0310 	and.w	r3, r3, #16
 8001336:	2b00      	cmp	r3, #0
 8001338:	d176      	bne.n	8001428 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133e:	2b00      	cmp	r3, #0
 8001340:	d152      	bne.n	80013e8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2200      	movs	r2, #0
 800134c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2200      	movs	r2, #0
 8001358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f7ff fd99 	bl	8000e94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d13b      	bne.n	80013e8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f001 f829 	bl	80023c8 <ADC_Disable>
 8001376:	4603      	mov	r3, r0
 8001378:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001380:	f003 0310 	and.w	r3, r3, #16
 8001384:	2b00      	cmp	r3, #0
 8001386:	d12f      	bne.n	80013e8 <HAL_ADC_Init+0xe0>
 8001388:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800138c:	2b00      	cmp	r3, #0
 800138e:	d12b      	bne.n	80013e8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001394:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001398:	f023 0302 	bic.w	r3, r3, #2
 800139c:	f043 0202 	orr.w	r2, r3, #2
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	689a      	ldr	r2, [r3, #8]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013b2:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	689a      	ldr	r2, [r3, #8]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80013c2:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80013c4:	4b92      	ldr	r3, [pc, #584]	; (8001610 <HAL_ADC_Init+0x308>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a92      	ldr	r2, [pc, #584]	; (8001614 <HAL_ADC_Init+0x30c>)
 80013ca:	fba2 2303 	umull	r2, r3, r2, r3
 80013ce:	0c9a      	lsrs	r2, r3, #18
 80013d0:	4613      	mov	r3, r2
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	4413      	add	r3, r2
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013da:	e002      	b.n	80013e2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	3b01      	subs	r3, #1
 80013e0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1f9      	bne.n	80013dc <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d007      	beq.n	8001406 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001400:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001404:	d110      	bne.n	8001428 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	f023 0312 	bic.w	r3, r3, #18
 800140e:	f043 0210 	orr.w	r2, r3, #16
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141a:	f043 0201 	orr.w	r2, r3, #1
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142c:	f003 0310 	and.w	r3, r3, #16
 8001430:	2b00      	cmp	r3, #0
 8001432:	f040 8150 	bne.w	80016d6 <HAL_ADC_Init+0x3ce>
 8001436:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800143a:	2b00      	cmp	r3, #0
 800143c:	f040 814b 	bne.w	80016d6 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800144a:	2b00      	cmp	r3, #0
 800144c:	f040 8143 	bne.w	80016d6 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001454:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001458:	f043 0202 	orr.w	r2, r3, #2
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001468:	d004      	beq.n	8001474 <HAL_ADC_Init+0x16c>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a6a      	ldr	r2, [pc, #424]	; (8001618 <HAL_ADC_Init+0x310>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d101      	bne.n	8001478 <HAL_ADC_Init+0x170>
 8001474:	4b69      	ldr	r3, [pc, #420]	; (800161c <HAL_ADC_Init+0x314>)
 8001476:	e000      	b.n	800147a <HAL_ADC_Init+0x172>
 8001478:	4b69      	ldr	r3, [pc, #420]	; (8001620 <HAL_ADC_Init+0x318>)
 800147a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001484:	d102      	bne.n	800148c <HAL_ADC_Init+0x184>
 8001486:	4b64      	ldr	r3, [pc, #400]	; (8001618 <HAL_ADC_Init+0x310>)
 8001488:	60fb      	str	r3, [r7, #12]
 800148a:	e01a      	b.n	80014c2 <HAL_ADC_Init+0x1ba>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a61      	ldr	r2, [pc, #388]	; (8001618 <HAL_ADC_Init+0x310>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d103      	bne.n	800149e <HAL_ADC_Init+0x196>
 8001496:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	e011      	b.n	80014c2 <HAL_ADC_Init+0x1ba>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a60      	ldr	r2, [pc, #384]	; (8001624 <HAL_ADC_Init+0x31c>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d102      	bne.n	80014ae <HAL_ADC_Init+0x1a6>
 80014a8:	4b5f      	ldr	r3, [pc, #380]	; (8001628 <HAL_ADC_Init+0x320>)
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	e009      	b.n	80014c2 <HAL_ADC_Init+0x1ba>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a5d      	ldr	r2, [pc, #372]	; (8001628 <HAL_ADC_Init+0x320>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d102      	bne.n	80014be <HAL_ADC_Init+0x1b6>
 80014b8:	4b5a      	ldr	r3, [pc, #360]	; (8001624 <HAL_ADC_Init+0x31c>)
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	e001      	b.n	80014c2 <HAL_ADC_Init+0x1ba>
 80014be:	2300      	movs	r3, #0
 80014c0:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	f003 0303 	and.w	r3, r3, #3
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d108      	bne.n	80014e2 <HAL_ADC_Init+0x1da>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d101      	bne.n	80014e2 <HAL_ADC_Init+0x1da>
 80014de:	2301      	movs	r3, #1
 80014e0:	e000      	b.n	80014e4 <HAL_ADC_Init+0x1dc>
 80014e2:	2300      	movs	r3, #0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d11c      	bne.n	8001522 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80014e8:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d010      	beq.n	8001510 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	f003 0303 	and.w	r3, r3, #3
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d107      	bne.n	800150a <HAL_ADC_Init+0x202>
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	2b01      	cmp	r3, #1
 8001504:	d101      	bne.n	800150a <HAL_ADC_Init+0x202>
 8001506:	2301      	movs	r3, #1
 8001508:	e000      	b.n	800150c <HAL_ADC_Init+0x204>
 800150a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800150c:	2b00      	cmp	r3, #0
 800150e:	d108      	bne.n	8001522 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001510:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	431a      	orrs	r2, r3
 800151e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001520:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	7e5b      	ldrb	r3, [r3, #25]
 8001526:	035b      	lsls	r3, r3, #13
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800152c:	2a01      	cmp	r2, #1
 800152e:	d002      	beq.n	8001536 <HAL_ADC_Init+0x22e>
 8001530:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001534:	e000      	b.n	8001538 <HAL_ADC_Init+0x230>
 8001536:	2200      	movs	r2, #0
 8001538:	431a      	orrs	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	431a      	orrs	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	4313      	orrs	r3, r2
 8001546:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001548:	4313      	orrs	r3, r2
 800154a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d11b      	bne.n	800158e <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	7e5b      	ldrb	r3, [r3, #25]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d109      	bne.n	8001572 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001562:	3b01      	subs	r3, #1
 8001564:	045a      	lsls	r2, r3, #17
 8001566:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001568:	4313      	orrs	r3, r2
 800156a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800156e:	663b      	str	r3, [r7, #96]	; 0x60
 8001570:	e00d      	b.n	800158e <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001576:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800157a:	f043 0220 	orr.w	r2, r3, #32
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001586:	f043 0201 	orr.w	r2, r3, #1
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001592:	2b01      	cmp	r3, #1
 8001594:	d054      	beq.n	8001640 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a22      	ldr	r2, [pc, #136]	; (8001624 <HAL_ADC_Init+0x31c>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d004      	beq.n	80015aa <HAL_ADC_Init+0x2a2>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a20      	ldr	r2, [pc, #128]	; (8001628 <HAL_ADC_Init+0x320>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d140      	bne.n	800162c <HAL_ADC_Init+0x324>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ae:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80015b2:	d02a      	beq.n	800160a <HAL_ADC_Init+0x302>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015bc:	d022      	beq.n	8001604 <HAL_ADC_Init+0x2fc>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c2:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80015c6:	d01a      	beq.n	80015fe <HAL_ADC_Init+0x2f6>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015cc:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 80015d0:	d012      	beq.n	80015f8 <HAL_ADC_Init+0x2f0>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d6:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 80015da:	d00a      	beq.n	80015f2 <HAL_ADC_Init+0x2ea>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e0:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 80015e4:	d002      	beq.n	80015ec <HAL_ADC_Init+0x2e4>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ea:	e023      	b.n	8001634 <HAL_ADC_Init+0x32c>
 80015ec:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80015f0:	e020      	b.n	8001634 <HAL_ADC_Init+0x32c>
 80015f2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80015f6:	e01d      	b.n	8001634 <HAL_ADC_Init+0x32c>
 80015f8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80015fc:	e01a      	b.n	8001634 <HAL_ADC_Init+0x32c>
 80015fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001602:	e017      	b.n	8001634 <HAL_ADC_Init+0x32c>
 8001604:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001608:	e014      	b.n	8001634 <HAL_ADC_Init+0x32c>
 800160a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800160e:	e011      	b.n	8001634 <HAL_ADC_Init+0x32c>
 8001610:	20000004 	.word	0x20000004
 8001614:	431bde83 	.word	0x431bde83
 8001618:	50000100 	.word	0x50000100
 800161c:	50000300 	.word	0x50000300
 8001620:	50000700 	.word	0x50000700
 8001624:	50000400 	.word	0x50000400
 8001628:	50000500 	.word	0x50000500
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001630:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001638:	4313      	orrs	r3, r2
 800163a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800163c:	4313      	orrs	r3, r2
 800163e:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f003 030c 	and.w	r3, r3, #12
 800164a:	2b00      	cmp	r3, #0
 800164c:	d114      	bne.n	8001678 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	6812      	ldr	r2, [r2, #0]
 8001658:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800165c:	f023 0302 	bic.w	r3, r3, #2
 8001660:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	7e1b      	ldrb	r3, [r3, #24]
 8001666:	039a      	lsls	r2, r3, #14
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	4313      	orrs	r3, r2
 8001672:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001674:	4313      	orrs	r3, r2
 8001676:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	68da      	ldr	r2, [r3, #12]
 800167e:	4b1e      	ldr	r3, [pc, #120]	; (80016f8 <HAL_ADC_Init+0x3f0>)
 8001680:	4013      	ands	r3, r2
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	6812      	ldr	r2, [r2, #0]
 8001686:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001688:	430b      	orrs	r3, r1
 800168a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	691b      	ldr	r3, [r3, #16]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d10c      	bne.n	80016ae <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	f023 010f 	bic.w	r1, r3, #15
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	69db      	ldr	r3, [r3, #28]
 80016a2:	1e5a      	subs	r2, r3, #1
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	430a      	orrs	r2, r1
 80016aa:	631a      	str	r2, [r3, #48]	; 0x30
 80016ac:	e007      	b.n	80016be <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f022 020f 	bic.w	r2, r2, #15
 80016bc:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c8:	f023 0303 	bic.w	r3, r3, #3
 80016cc:	f043 0201 	orr.w	r2, r3, #1
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	641a      	str	r2, [r3, #64]	; 0x40
 80016d4:	e00a      	b.n	80016ec <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	f023 0312 	bic.w	r3, r3, #18
 80016de:	f043 0210 	orr.w	r2, r3, #16
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80016e6:	2301      	movs	r3, #1
 80016e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80016ec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3768      	adds	r7, #104	; 0x68
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	fff0c007 	.word	0xfff0c007

080016fc <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001704:	2300      	movs	r3, #0
 8001706:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f003 0304 	and.w	r3, r3, #4
 8001712:	2b00      	cmp	r3, #0
 8001714:	f040 80f9 	bne.w	800190a <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800171e:	2b01      	cmp	r3, #1
 8001720:	d101      	bne.n	8001726 <HAL_ADC_Start+0x2a>
 8001722:	2302      	movs	r3, #2
 8001724:	e0f4      	b.n	8001910 <HAL_ADC_Start+0x214>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2201      	movs	r2, #1
 800172a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f000 fde6 	bl	8002300 <ADC_Enable>
 8001734:	4603      	mov	r3, r0
 8001736:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001738:	7bfb      	ldrb	r3, [r7, #15]
 800173a:	2b00      	cmp	r3, #0
 800173c:	f040 80e0 	bne.w	8001900 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001744:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001748:	f023 0301 	bic.w	r3, r3, #1
 800174c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800175c:	d004      	beq.n	8001768 <HAL_ADC_Start+0x6c>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a6d      	ldr	r2, [pc, #436]	; (8001918 <HAL_ADC_Start+0x21c>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d106      	bne.n	8001776 <HAL_ADC_Start+0x7a>
 8001768:	4b6c      	ldr	r3, [pc, #432]	; (800191c <HAL_ADC_Start+0x220>)
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f003 031f 	and.w	r3, r3, #31
 8001770:	2b00      	cmp	r3, #0
 8001772:	d010      	beq.n	8001796 <HAL_ADC_Start+0x9a>
 8001774:	e005      	b.n	8001782 <HAL_ADC_Start+0x86>
 8001776:	4b6a      	ldr	r3, [pc, #424]	; (8001920 <HAL_ADC_Start+0x224>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f003 031f 	and.w	r3, r3, #31
 800177e:	2b00      	cmp	r3, #0
 8001780:	d009      	beq.n	8001796 <HAL_ADC_Start+0x9a>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800178a:	d004      	beq.n	8001796 <HAL_ADC_Start+0x9a>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a64      	ldr	r2, [pc, #400]	; (8001924 <HAL_ADC_Start+0x228>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d115      	bne.n	80017c2 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d036      	beq.n	800181e <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017b8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80017c0:	e02d      	b.n	800181e <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017d6:	d004      	beq.n	80017e2 <HAL_ADC_Start+0xe6>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a4e      	ldr	r2, [pc, #312]	; (8001918 <HAL_ADC_Start+0x21c>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d10a      	bne.n	80017f8 <HAL_ADC_Start+0xfc>
 80017e2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	bf14      	ite	ne
 80017f0:	2301      	movne	r3, #1
 80017f2:	2300      	moveq	r3, #0
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	e008      	b.n	800180a <HAL_ADC_Start+0x10e>
 80017f8:	4b4a      	ldr	r3, [pc, #296]	; (8001924 <HAL_ADC_Start+0x228>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001800:	2b00      	cmp	r3, #0
 8001802:	bf14      	ite	ne
 8001804:	2301      	movne	r3, #1
 8001806:	2300      	moveq	r3, #0
 8001808:	b2db      	uxtb	r3, r3
 800180a:	2b00      	cmp	r3, #0
 800180c:	d007      	beq.n	800181e <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001816:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001822:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001826:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800182a:	d106      	bne.n	800183a <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001830:	f023 0206 	bic.w	r2, r3, #6
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	645a      	str	r2, [r3, #68]	; 0x44
 8001838:	e002      	b.n	8001840 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2200      	movs	r2, #0
 800183e:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	221c      	movs	r2, #28
 800184e:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001858:	d004      	beq.n	8001864 <HAL_ADC_Start+0x168>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a2e      	ldr	r2, [pc, #184]	; (8001918 <HAL_ADC_Start+0x21c>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d106      	bne.n	8001872 <HAL_ADC_Start+0x176>
 8001864:	4b2d      	ldr	r3, [pc, #180]	; (800191c <HAL_ADC_Start+0x220>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f003 031f 	and.w	r3, r3, #31
 800186c:	2b00      	cmp	r3, #0
 800186e:	d03e      	beq.n	80018ee <HAL_ADC_Start+0x1f2>
 8001870:	e005      	b.n	800187e <HAL_ADC_Start+0x182>
 8001872:	4b2b      	ldr	r3, [pc, #172]	; (8001920 <HAL_ADC_Start+0x224>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f003 031f 	and.w	r3, r3, #31
 800187a:	2b00      	cmp	r3, #0
 800187c:	d037      	beq.n	80018ee <HAL_ADC_Start+0x1f2>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001886:	d004      	beq.n	8001892 <HAL_ADC_Start+0x196>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a22      	ldr	r2, [pc, #136]	; (8001918 <HAL_ADC_Start+0x21c>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d106      	bne.n	80018a0 <HAL_ADC_Start+0x1a4>
 8001892:	4b22      	ldr	r3, [pc, #136]	; (800191c <HAL_ADC_Start+0x220>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	f003 031f 	and.w	r3, r3, #31
 800189a:	2b05      	cmp	r3, #5
 800189c:	d027      	beq.n	80018ee <HAL_ADC_Start+0x1f2>
 800189e:	e005      	b.n	80018ac <HAL_ADC_Start+0x1b0>
 80018a0:	4b1f      	ldr	r3, [pc, #124]	; (8001920 <HAL_ADC_Start+0x224>)
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f003 031f 	and.w	r3, r3, #31
 80018a8:	2b05      	cmp	r3, #5
 80018aa:	d020      	beq.n	80018ee <HAL_ADC_Start+0x1f2>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018b4:	d004      	beq.n	80018c0 <HAL_ADC_Start+0x1c4>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a17      	ldr	r2, [pc, #92]	; (8001918 <HAL_ADC_Start+0x21c>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d106      	bne.n	80018ce <HAL_ADC_Start+0x1d2>
 80018c0:	4b16      	ldr	r3, [pc, #88]	; (800191c <HAL_ADC_Start+0x220>)
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f003 031f 	and.w	r3, r3, #31
 80018c8:	2b09      	cmp	r3, #9
 80018ca:	d010      	beq.n	80018ee <HAL_ADC_Start+0x1f2>
 80018cc:	e005      	b.n	80018da <HAL_ADC_Start+0x1de>
 80018ce:	4b14      	ldr	r3, [pc, #80]	; (8001920 <HAL_ADC_Start+0x224>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f003 031f 	and.w	r3, r3, #31
 80018d6:	2b09      	cmp	r3, #9
 80018d8:	d009      	beq.n	80018ee <HAL_ADC_Start+0x1f2>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018e2:	d004      	beq.n	80018ee <HAL_ADC_Start+0x1f2>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a0e      	ldr	r2, [pc, #56]	; (8001924 <HAL_ADC_Start+0x228>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d10f      	bne.n	800190e <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	689a      	ldr	r2, [r3, #8]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f042 0204 	orr.w	r2, r2, #4
 80018fc:	609a      	str	r2, [r3, #8]
 80018fe:	e006      	b.n	800190e <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001908:	e001      	b.n	800190e <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800190a:	2302      	movs	r3, #2
 800190c:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800190e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001910:	4618      	mov	r0, r3
 8001912:	3710      	adds	r7, #16
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	50000100 	.word	0x50000100
 800191c:	50000300 	.word	0x50000300
 8001920:	50000700 	.word	0x50000700
 8001924:	50000400 	.word	0x50000400

08001928 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001932:	2300      	movs	r3, #0
 8001934:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	695b      	ldr	r3, [r3, #20]
 800193a:	2b08      	cmp	r3, #8
 800193c:	d102      	bne.n	8001944 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800193e:	2308      	movs	r3, #8
 8001940:	617b      	str	r3, [r7, #20]
 8001942:	e03a      	b.n	80019ba <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800194c:	d004      	beq.n	8001958 <HAL_ADC_PollForConversion+0x30>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a72      	ldr	r2, [pc, #456]	; (8001b1c <HAL_ADC_PollForConversion+0x1f4>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d101      	bne.n	800195c <HAL_ADC_PollForConversion+0x34>
 8001958:	4b71      	ldr	r3, [pc, #452]	; (8001b20 <HAL_ADC_PollForConversion+0x1f8>)
 800195a:	e000      	b.n	800195e <HAL_ADC_PollForConversion+0x36>
 800195c:	4b71      	ldr	r3, [pc, #452]	; (8001b24 <HAL_ADC_PollForConversion+0x1fc>)
 800195e:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f003 031f 	and.w	r3, r3, #31
 8001968:	2b00      	cmp	r3, #0
 800196a:	d112      	bne.n	8001992 <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	2b01      	cmp	r3, #1
 8001978:	d11d      	bne.n	80019b6 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	f043 0220 	orr.w	r2, r3, #32
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e0bf      	b.n	8001b12 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d00b      	beq.n	80019b6 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a2:	f043 0220 	orr.w	r2, r3, #32
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e0ad      	b.n	8001b12 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80019b6:	230c      	movs	r3, #12
 80019b8:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019c2:	d004      	beq.n	80019ce <HAL_ADC_PollForConversion+0xa6>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a54      	ldr	r2, [pc, #336]	; (8001b1c <HAL_ADC_PollForConversion+0x1f4>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d106      	bne.n	80019dc <HAL_ADC_PollForConversion+0xb4>
 80019ce:	4b54      	ldr	r3, [pc, #336]	; (8001b20 <HAL_ADC_PollForConversion+0x1f8>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f003 031f 	and.w	r3, r3, #31
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d010      	beq.n	80019fc <HAL_ADC_PollForConversion+0xd4>
 80019da:	e005      	b.n	80019e8 <HAL_ADC_PollForConversion+0xc0>
 80019dc:	4b51      	ldr	r3, [pc, #324]	; (8001b24 <HAL_ADC_PollForConversion+0x1fc>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f003 031f 	and.w	r3, r3, #31
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d009      	beq.n	80019fc <HAL_ADC_PollForConversion+0xd4>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019f0:	d004      	beq.n	80019fc <HAL_ADC_PollForConversion+0xd4>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a4c      	ldr	r2, [pc, #304]	; (8001b28 <HAL_ADC_PollForConversion+0x200>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d104      	bne.n	8001a06 <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	613b      	str	r3, [r7, #16]
 8001a04:	e00f      	b.n	8001a26 <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a0e:	d004      	beq.n	8001a1a <HAL_ADC_PollForConversion+0xf2>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a41      	ldr	r2, [pc, #260]	; (8001b1c <HAL_ADC_PollForConversion+0x1f4>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d102      	bne.n	8001a20 <HAL_ADC_PollForConversion+0xf8>
 8001a1a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001a1e:	e000      	b.n	8001a22 <HAL_ADC_PollForConversion+0xfa>
 8001a20:	4b41      	ldr	r3, [pc, #260]	; (8001b28 <HAL_ADC_PollForConversion+0x200>)
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8001a26:	f7ff fc2f 	bl	8001288 <HAL_GetTick>
 8001a2a:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001a2c:	e021      	b.n	8001a72 <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a34:	d01d      	beq.n	8001a72 <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d007      	beq.n	8001a4c <HAL_ADC_PollForConversion+0x124>
 8001a3c:	f7ff fc24 	bl	8001288 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d212      	bcs.n	8001a72 <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	4013      	ands	r3, r2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d10b      	bne.n	8001a72 <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5e:	f043 0204 	orr.w	r2, r3, #4
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e04f      	b.n	8001b12 <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d0d6      	beq.n	8001a2e <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a84:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d131      	bne.n	8001afe <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d12c      	bne.n	8001afe <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0308 	and.w	r3, r3, #8
 8001aae:	2b08      	cmp	r3, #8
 8001ab0:	d125      	bne.n	8001afe <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f003 0304 	and.w	r3, r3, #4
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d112      	bne.n	8001ae6 <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d112      	bne.n	8001afe <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001adc:	f043 0201 	orr.w	r2, r3, #1
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	641a      	str	r2, [r3, #64]	; 0x40
 8001ae4:	e00b      	b.n	8001afe <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	f043 0220 	orr.w	r2, r3, #32
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af6:	f043 0201 	orr.w	r2, r3, #1
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d103      	bne.n	8001b10 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	697a      	ldr	r2, [r7, #20]
 8001b0e:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3718      	adds	r7, #24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	50000100 	.word	0x50000100
 8001b20:	50000300 	.word	0x50000300
 8001b24:	50000700 	.word	0x50000700
 8001b28:	50000400 	.word	0x50000400

08001b2c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
	...

08001b48 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b09b      	sub	sp, #108	; 0x6c
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b52:	2300      	movs	r3, #0
 8001b54:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d101      	bne.n	8001b6a <HAL_ADC_ConfigChannel+0x22>
 8001b66:	2302      	movs	r3, #2
 8001b68:	e2c8      	b.n	80020fc <HAL_ADC_ConfigChannel+0x5b4>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f003 0304 	and.w	r3, r3, #4
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	f040 82ac 	bne.w	80020da <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	2b04      	cmp	r3, #4
 8001b88:	d81c      	bhi.n	8001bc4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685a      	ldr	r2, [r3, #4]
 8001b94:	4613      	mov	r3, r2
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	4413      	add	r3, r2
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	231f      	movs	r3, #31
 8001ba0:	4093      	lsls	r3, r2
 8001ba2:	43db      	mvns	r3, r3
 8001ba4:	4019      	ands	r1, r3
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	6818      	ldr	r0, [r3, #0]
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685a      	ldr	r2, [r3, #4]
 8001bae:	4613      	mov	r3, r2
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	4413      	add	r3, r2
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	fa00 f203 	lsl.w	r2, r0, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	631a      	str	r2, [r3, #48]	; 0x30
 8001bc2:	e063      	b.n	8001c8c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	2b09      	cmp	r3, #9
 8001bca:	d81e      	bhi.n	8001c0a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685a      	ldr	r2, [r3, #4]
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	4413      	add	r3, r2
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	3b1e      	subs	r3, #30
 8001be0:	221f      	movs	r2, #31
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	43db      	mvns	r3, r3
 8001be8:	4019      	ands	r1, r3
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	6818      	ldr	r0, [r3, #0]
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685a      	ldr	r2, [r3, #4]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	4413      	add	r3, r2
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	3b1e      	subs	r3, #30
 8001bfc:	fa00 f203 	lsl.w	r2, r0, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	430a      	orrs	r2, r1
 8001c06:	635a      	str	r2, [r3, #52]	; 0x34
 8001c08:	e040      	b.n	8001c8c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	2b0e      	cmp	r3, #14
 8001c10:	d81e      	bhi.n	8001c50 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685a      	ldr	r2, [r3, #4]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	4413      	add	r3, r2
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	3b3c      	subs	r3, #60	; 0x3c
 8001c26:	221f      	movs	r2, #31
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	4019      	ands	r1, r3
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	6818      	ldr	r0, [r3, #0]
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685a      	ldr	r2, [r3, #4]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	4413      	add	r3, r2
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	3b3c      	subs	r3, #60	; 0x3c
 8001c42:	fa00 f203 	lsl.w	r2, r0, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	639a      	str	r2, [r3, #56]	; 0x38
 8001c4e:	e01d      	b.n	8001c8c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685a      	ldr	r2, [r3, #4]
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	4413      	add	r3, r2
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	3b5a      	subs	r3, #90	; 0x5a
 8001c64:	221f      	movs	r2, #31
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	4019      	ands	r1, r3
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	6818      	ldr	r0, [r3, #0]
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685a      	ldr	r2, [r3, #4]
 8001c76:	4613      	mov	r3, r2
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	4413      	add	r3, r2
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	3b5a      	subs	r3, #90	; 0x5a
 8001c80:	fa00 f203 	lsl.w	r2, r0, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f003 030c 	and.w	r3, r3, #12
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f040 80e5 	bne.w	8001e66 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2b09      	cmp	r3, #9
 8001ca2:	d91c      	bls.n	8001cde <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	6999      	ldr	r1, [r3, #24]
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	4413      	add	r3, r2
 8001cb4:	3b1e      	subs	r3, #30
 8001cb6:	2207      	movs	r2, #7
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	4019      	ands	r1, r3
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	6898      	ldr	r0, [r3, #8]
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	4413      	add	r3, r2
 8001cce:	3b1e      	subs	r3, #30
 8001cd0:	fa00 f203 	lsl.w	r2, r0, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	619a      	str	r2, [r3, #24]
 8001cdc:	e019      	b.n	8001d12 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	6959      	ldr	r1, [r3, #20]
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	4413      	add	r3, r2
 8001cee:	2207      	movs	r2, #7
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	4019      	ands	r1, r3
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	6898      	ldr	r0, [r3, #8]
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	4613      	mov	r3, r2
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	4413      	add	r3, r2
 8001d06:	fa00 f203 	lsl.w	r2, r0, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	695a      	ldr	r2, [r3, #20]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	08db      	lsrs	r3, r3, #3
 8001d1e:	f003 0303 	and.w	r3, r3, #3
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	2b03      	cmp	r3, #3
 8001d32:	d84f      	bhi.n	8001dd4 <HAL_ADC_ConfigChannel+0x28c>
 8001d34:	a201      	add	r2, pc, #4	; (adr r2, 8001d3c <HAL_ADC_ConfigChannel+0x1f4>)
 8001d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d3a:	bf00      	nop
 8001d3c:	08001d4d 	.word	0x08001d4d
 8001d40:	08001d6f 	.word	0x08001d6f
 8001d44:	08001d91 	.word	0x08001d91
 8001d48:	08001db3 	.word	0x08001db3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d52:	4b99      	ldr	r3, [pc, #612]	; (8001fb8 <HAL_ADC_ConfigChannel+0x470>)
 8001d54:	4013      	ands	r3, r2
 8001d56:	683a      	ldr	r2, [r7, #0]
 8001d58:	6812      	ldr	r2, [r2, #0]
 8001d5a:	0691      	lsls	r1, r2, #26
 8001d5c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	431a      	orrs	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001d6a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001d6c:	e07b      	b.n	8001e66 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001d74:	4b90      	ldr	r3, [pc, #576]	; (8001fb8 <HAL_ADC_ConfigChannel+0x470>)
 8001d76:	4013      	ands	r3, r2
 8001d78:	683a      	ldr	r2, [r7, #0]
 8001d7a:	6812      	ldr	r2, [r2, #0]
 8001d7c:	0691      	lsls	r1, r2, #26
 8001d7e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d80:	430a      	orrs	r2, r1
 8001d82:	431a      	orrs	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001d8c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001d8e:	e06a      	b.n	8001e66 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001d96:	4b88      	ldr	r3, [pc, #544]	; (8001fb8 <HAL_ADC_ConfigChannel+0x470>)
 8001d98:	4013      	ands	r3, r2
 8001d9a:	683a      	ldr	r2, [r7, #0]
 8001d9c:	6812      	ldr	r2, [r2, #0]
 8001d9e:	0691      	lsls	r1, r2, #26
 8001da0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001da2:	430a      	orrs	r2, r1
 8001da4:	431a      	orrs	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001dae:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001db0:	e059      	b.n	8001e66 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001db8:	4b7f      	ldr	r3, [pc, #508]	; (8001fb8 <HAL_ADC_ConfigChannel+0x470>)
 8001dba:	4013      	ands	r3, r2
 8001dbc:	683a      	ldr	r2, [r7, #0]
 8001dbe:	6812      	ldr	r2, [r2, #0]
 8001dc0:	0691      	lsls	r1, r2, #26
 8001dc2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	431a      	orrs	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001dd0:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001dd2:	e048      	b.n	8001e66 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dda:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	069b      	lsls	r3, r3, #26
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d107      	bne.n	8001df8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001df6:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001dfe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	069b      	lsls	r3, r3, #26
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d107      	bne.n	8001e1c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001e1a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	069b      	lsls	r3, r3, #26
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d107      	bne.n	8001e40 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001e3e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e46:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	069b      	lsls	r3, r3, #26
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d107      	bne.n	8001e64 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001e62:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001e64:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f003 0303 	and.w	r3, r3, #3
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d108      	bne.n	8001e86 <HAL_ADC_ConfigChannel+0x33e>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d101      	bne.n	8001e86 <HAL_ADC_ConfigChannel+0x33e>
 8001e82:	2301      	movs	r3, #1
 8001e84:	e000      	b.n	8001e88 <HAL_ADC_ConfigChannel+0x340>
 8001e86:	2300      	movs	r3, #0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	f040 8131 	bne.w	80020f0 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d00f      	beq.n	8001eb6 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	43da      	mvns	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	400a      	ands	r2, r1
 8001eb0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001eb4:	e049      	b.n	8001f4a <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	409a      	lsls	r2, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2b09      	cmp	r3, #9
 8001ed6:	d91c      	bls.n	8001f12 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6999      	ldr	r1, [r3, #24]
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	4413      	add	r3, r2
 8001ee8:	3b1b      	subs	r3, #27
 8001eea:	2207      	movs	r2, #7
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	4019      	ands	r1, r3
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	6898      	ldr	r0, [r3, #8]
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	4613      	mov	r3, r2
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	4413      	add	r3, r2
 8001f02:	3b1b      	subs	r3, #27
 8001f04:	fa00 f203 	lsl.w	r2, r0, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	619a      	str	r2, [r3, #24]
 8001f10:	e01b      	b.n	8001f4a <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	6959      	ldr	r1, [r3, #20]
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	1c5a      	adds	r2, r3, #1
 8001f1e:	4613      	mov	r3, r2
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	4413      	add	r3, r2
 8001f24:	2207      	movs	r2, #7
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	4019      	ands	r1, r3
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	6898      	ldr	r0, [r3, #8]
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	1c5a      	adds	r2, r3, #1
 8001f38:	4613      	mov	r3, r2
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	4413      	add	r3, r2
 8001f3e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	430a      	orrs	r2, r1
 8001f48:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f52:	d004      	beq.n	8001f5e <HAL_ADC_ConfigChannel+0x416>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a18      	ldr	r2, [pc, #96]	; (8001fbc <HAL_ADC_ConfigChannel+0x474>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d101      	bne.n	8001f62 <HAL_ADC_ConfigChannel+0x41a>
 8001f5e:	4b18      	ldr	r3, [pc, #96]	; (8001fc0 <HAL_ADC_ConfigChannel+0x478>)
 8001f60:	e000      	b.n	8001f64 <HAL_ADC_ConfigChannel+0x41c>
 8001f62:	4b18      	ldr	r3, [pc, #96]	; (8001fc4 <HAL_ADC_ConfigChannel+0x47c>)
 8001f64:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2b10      	cmp	r3, #16
 8001f6c:	d105      	bne.n	8001f7a <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001f6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d015      	beq.n	8001fa6 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001f7e:	2b11      	cmp	r3, #17
 8001f80:	d105      	bne.n	8001f8e <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001f82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d00b      	beq.n	8001fa6 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001f92:	2b12      	cmp	r3, #18
 8001f94:	f040 80ac 	bne.w	80020f0 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001f98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	f040 80a5 	bne.w	80020f0 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fae:	d10b      	bne.n	8001fc8 <HAL_ADC_ConfigChannel+0x480>
 8001fb0:	4b02      	ldr	r3, [pc, #8]	; (8001fbc <HAL_ADC_ConfigChannel+0x474>)
 8001fb2:	60fb      	str	r3, [r7, #12]
 8001fb4:	e023      	b.n	8001ffe <HAL_ADC_ConfigChannel+0x4b6>
 8001fb6:	bf00      	nop
 8001fb8:	83fff000 	.word	0x83fff000
 8001fbc:	50000100 	.word	0x50000100
 8001fc0:	50000300 	.word	0x50000300
 8001fc4:	50000700 	.word	0x50000700
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a4e      	ldr	r2, [pc, #312]	; (8002108 <HAL_ADC_ConfigChannel+0x5c0>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d103      	bne.n	8001fda <HAL_ADC_ConfigChannel+0x492>
 8001fd2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	e011      	b.n	8001ffe <HAL_ADC_ConfigChannel+0x4b6>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a4b      	ldr	r2, [pc, #300]	; (800210c <HAL_ADC_ConfigChannel+0x5c4>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d102      	bne.n	8001fea <HAL_ADC_ConfigChannel+0x4a2>
 8001fe4:	4b4a      	ldr	r3, [pc, #296]	; (8002110 <HAL_ADC_ConfigChannel+0x5c8>)
 8001fe6:	60fb      	str	r3, [r7, #12]
 8001fe8:	e009      	b.n	8001ffe <HAL_ADC_ConfigChannel+0x4b6>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a48      	ldr	r2, [pc, #288]	; (8002110 <HAL_ADC_ConfigChannel+0x5c8>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d102      	bne.n	8001ffa <HAL_ADC_ConfigChannel+0x4b2>
 8001ff4:	4b45      	ldr	r3, [pc, #276]	; (800210c <HAL_ADC_ConfigChannel+0x5c4>)
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	e001      	b.n	8001ffe <HAL_ADC_ConfigChannel+0x4b6>
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f003 0303 	and.w	r3, r3, #3
 8002008:	2b01      	cmp	r3, #1
 800200a:	d108      	bne.n	800201e <HAL_ADC_ConfigChannel+0x4d6>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	2b01      	cmp	r3, #1
 8002018:	d101      	bne.n	800201e <HAL_ADC_ConfigChannel+0x4d6>
 800201a:	2301      	movs	r3, #1
 800201c:	e000      	b.n	8002020 <HAL_ADC_ConfigChannel+0x4d8>
 800201e:	2300      	movs	r3, #0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d150      	bne.n	80020c6 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002024:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002026:	2b00      	cmp	r3, #0
 8002028:	d010      	beq.n	800204c <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f003 0303 	and.w	r3, r3, #3
 8002032:	2b01      	cmp	r3, #1
 8002034:	d107      	bne.n	8002046 <HAL_ADC_ConfigChannel+0x4fe>
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	2b01      	cmp	r3, #1
 8002040:	d101      	bne.n	8002046 <HAL_ADC_ConfigChannel+0x4fe>
 8002042:	2301      	movs	r3, #1
 8002044:	e000      	b.n	8002048 <HAL_ADC_ConfigChannel+0x500>
 8002046:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002048:	2b00      	cmp	r3, #0
 800204a:	d13c      	bne.n	80020c6 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2b10      	cmp	r3, #16
 8002052:	d11d      	bne.n	8002090 <HAL_ADC_ConfigChannel+0x548>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800205c:	d118      	bne.n	8002090 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800205e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002066:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002068:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800206a:	4b2a      	ldr	r3, [pc, #168]	; (8002114 <HAL_ADC_ConfigChannel+0x5cc>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a2a      	ldr	r2, [pc, #168]	; (8002118 <HAL_ADC_ConfigChannel+0x5d0>)
 8002070:	fba2 2303 	umull	r2, r3, r2, r3
 8002074:	0c9a      	lsrs	r2, r3, #18
 8002076:	4613      	mov	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	4413      	add	r3, r2
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002080:	e002      	b.n	8002088 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	3b01      	subs	r3, #1
 8002086:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d1f9      	bne.n	8002082 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800208e:	e02e      	b.n	80020ee <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2b11      	cmp	r3, #17
 8002096:	d10b      	bne.n	80020b0 <HAL_ADC_ConfigChannel+0x568>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020a0:	d106      	bne.n	80020b0 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80020a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80020aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020ac:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80020ae:	e01e      	b.n	80020ee <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2b12      	cmp	r3, #18
 80020b6:	d11a      	bne.n	80020ee <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80020b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80020c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020c2:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80020c4:	e013      	b.n	80020ee <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	f043 0220 	orr.w	r2, r3, #32
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80020d8:	e00a      	b.n	80020f0 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020de:	f043 0220 	orr.w	r2, r3, #32
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80020ec:	e000      	b.n	80020f0 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80020ee:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80020f8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	376c      	adds	r7, #108	; 0x6c
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr
 8002108:	50000100 	.word	0x50000100
 800210c:	50000400 	.word	0x50000400
 8002110:	50000500 	.word	0x50000500
 8002114:	20000004 	.word	0x20000004
 8002118:	431bde83 	.word	0x431bde83

0800211c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800211c:	b480      	push	{r7}
 800211e:	b099      	sub	sp, #100	; 0x64
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002126:	2300      	movs	r3, #0
 8002128:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002134:	d102      	bne.n	800213c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002136:	4b6d      	ldr	r3, [pc, #436]	; (80022ec <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002138:	60bb      	str	r3, [r7, #8]
 800213a:	e01a      	b.n	8002172 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a6a      	ldr	r2, [pc, #424]	; (80022ec <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d103      	bne.n	800214e <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8002146:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800214a:	60bb      	str	r3, [r7, #8]
 800214c:	e011      	b.n	8002172 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a67      	ldr	r2, [pc, #412]	; (80022f0 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d102      	bne.n	800215e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002158:	4b66      	ldr	r3, [pc, #408]	; (80022f4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800215a:	60bb      	str	r3, [r7, #8]
 800215c:	e009      	b.n	8002172 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a64      	ldr	r2, [pc, #400]	; (80022f4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d102      	bne.n	800216e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002168:	4b61      	ldr	r3, [pc, #388]	; (80022f0 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800216a:	60bb      	str	r3, [r7, #8]
 800216c:	e001      	b.n	8002172 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800216e:	2300      	movs	r3, #0
 8002170:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d101      	bne.n	800217c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e0b0      	b.n	80022de <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002182:	2b01      	cmp	r3, #1
 8002184:	d101      	bne.n	800218a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002186:	2302      	movs	r3, #2
 8002188:	e0a9      	b.n	80022de <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2201      	movs	r2, #1
 800218e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f003 0304 	and.w	r3, r3, #4
 800219c:	2b00      	cmp	r3, #0
 800219e:	f040 808d 	bne.w	80022bc <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f003 0304 	and.w	r3, r3, #4
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f040 8086 	bne.w	80022bc <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021b8:	d004      	beq.n	80021c4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a4b      	ldr	r2, [pc, #300]	; (80022ec <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d101      	bne.n	80021c8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80021c4:	4b4c      	ldr	r3, [pc, #304]	; (80022f8 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80021c6:	e000      	b.n	80021ca <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80021c8:	4b4c      	ldr	r3, [pc, #304]	; (80022fc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80021ca:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d040      	beq.n	8002256 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80021d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	6859      	ldr	r1, [r3, #4]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021e6:	035b      	lsls	r3, r3, #13
 80021e8:	430b      	orrs	r3, r1
 80021ea:	431a      	orrs	r2, r3
 80021ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021ee:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f003 0303 	and.w	r3, r3, #3
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d108      	bne.n	8002210 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	2b01      	cmp	r3, #1
 800220a:	d101      	bne.n	8002210 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800220c:	2301      	movs	r3, #1
 800220e:	e000      	b.n	8002212 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002210:	2300      	movs	r3, #0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d15c      	bne.n	80022d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f003 0303 	and.w	r3, r3, #3
 800221e:	2b01      	cmp	r3, #1
 8002220:	d107      	bne.n	8002232 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	2b01      	cmp	r3, #1
 800222c:	d101      	bne.n	8002232 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800222e:	2301      	movs	r3, #1
 8002230:	e000      	b.n	8002234 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002232:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002234:	2b00      	cmp	r3, #0
 8002236:	d14b      	bne.n	80022d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002238:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002240:	f023 030f 	bic.w	r3, r3, #15
 8002244:	683a      	ldr	r2, [r7, #0]
 8002246:	6811      	ldr	r1, [r2, #0]
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	6892      	ldr	r2, [r2, #8]
 800224c:	430a      	orrs	r2, r1
 800224e:	431a      	orrs	r2, r3
 8002250:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002252:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002254:	e03c      	b.n	80022d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002256:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800225e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002260:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f003 0303 	and.w	r3, r3, #3
 800226c:	2b01      	cmp	r3, #1
 800226e:	d108      	bne.n	8002282 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	2b01      	cmp	r3, #1
 800227c:	d101      	bne.n	8002282 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800227e:	2301      	movs	r3, #1
 8002280:	e000      	b.n	8002284 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002282:	2300      	movs	r3, #0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d123      	bne.n	80022d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f003 0303 	and.w	r3, r3, #3
 8002290:	2b01      	cmp	r3, #1
 8002292:	d107      	bne.n	80022a4 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	2b01      	cmp	r3, #1
 800229e:	d101      	bne.n	80022a4 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80022a0:	2301      	movs	r3, #1
 80022a2:	e000      	b.n	80022a6 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80022a4:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d112      	bne.n	80022d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80022aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80022b2:	f023 030f 	bic.w	r3, r3, #15
 80022b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80022b8:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80022ba:	e009      	b.n	80022d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c0:	f043 0220 	orr.w	r2, r3, #32
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80022ce:	e000      	b.n	80022d2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80022d0:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80022da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80022de:	4618      	mov	r0, r3
 80022e0:	3764      	adds	r7, #100	; 0x64
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	50000100 	.word	0x50000100
 80022f0:	50000400 	.word	0x50000400
 80022f4:	50000500 	.word	0x50000500
 80022f8:	50000300 	.word	0x50000300
 80022fc:	50000700 	.word	0x50000700

08002300 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002308:	2300      	movs	r3, #0
 800230a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f003 0303 	and.w	r3, r3, #3
 8002316:	2b01      	cmp	r3, #1
 8002318:	d108      	bne.n	800232c <ADC_Enable+0x2c>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	2b01      	cmp	r3, #1
 8002326:	d101      	bne.n	800232c <ADC_Enable+0x2c>
 8002328:	2301      	movs	r3, #1
 800232a:	e000      	b.n	800232e <ADC_Enable+0x2e>
 800232c:	2300      	movs	r3, #0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d143      	bne.n	80023ba <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	689a      	ldr	r2, [r3, #8]
 8002338:	4b22      	ldr	r3, [pc, #136]	; (80023c4 <ADC_Enable+0xc4>)
 800233a:	4013      	ands	r3, r2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d00d      	beq.n	800235c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002344:	f043 0210 	orr.w	r2, r3, #16
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002350:	f043 0201 	orr.w	r2, r3, #1
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e02f      	b.n	80023bc <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	689a      	ldr	r2, [r3, #8]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f042 0201 	orr.w	r2, r2, #1
 800236a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 800236c:	f7fe ff8c 	bl	8001288 <HAL_GetTick>
 8002370:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002372:	e01b      	b.n	80023ac <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002374:	f7fe ff88 	bl	8001288 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d914      	bls.n	80023ac <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	2b01      	cmp	r3, #1
 800238e:	d00d      	beq.n	80023ac <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002394:	f043 0210 	orr.w	r2, r3, #16
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a0:	f043 0201 	orr.w	r2, r3, #1
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e007      	b.n	80023bc <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d1dc      	bne.n	8002374 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80023ba:	2300      	movs	r3, #0
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3710      	adds	r7, #16
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	8000003f 	.word	0x8000003f

080023c8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023d0:	2300      	movs	r3, #0
 80023d2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f003 0303 	and.w	r3, r3, #3
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d108      	bne.n	80023f4 <ADC_Disable+0x2c>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0301 	and.w	r3, r3, #1
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d101      	bne.n	80023f4 <ADC_Disable+0x2c>
 80023f0:	2301      	movs	r3, #1
 80023f2:	e000      	b.n	80023f6 <ADC_Disable+0x2e>
 80023f4:	2300      	movs	r3, #0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d047      	beq.n	800248a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f003 030d 	and.w	r3, r3, #13
 8002404:	2b01      	cmp	r3, #1
 8002406:	d10f      	bne.n	8002428 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	689a      	ldr	r2, [r3, #8]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f042 0202 	orr.w	r2, r2, #2
 8002416:	609a      	str	r2, [r3, #8]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2203      	movs	r2, #3
 800241e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002420:	f7fe ff32 	bl	8001288 <HAL_GetTick>
 8002424:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002426:	e029      	b.n	800247c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242c:	f043 0210 	orr.w	r2, r3, #16
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002438:	f043 0201 	orr.w	r2, r3, #1
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e023      	b.n	800248c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002444:	f7fe ff20 	bl	8001288 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d914      	bls.n	800247c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f003 0301 	and.w	r3, r3, #1
 800245c:	2b01      	cmp	r3, #1
 800245e:	d10d      	bne.n	800247c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002464:	f043 0210 	orr.w	r2, r3, #16
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002470:	f043 0201 	orr.w	r2, r3, #1
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e007      	b.n	800248c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	2b01      	cmp	r3, #1
 8002488:	d0dc      	beq.n	8002444 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800248a:	2300      	movs	r3, #0
}
 800248c:	4618      	mov	r0, r3
 800248e:	3710      	adds	r7, #16
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f003 0307 	and.w	r3, r3, #7
 80024a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024a4:	4b0c      	ldr	r3, [pc, #48]	; (80024d8 <__NVIC_SetPriorityGrouping+0x44>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024aa:	68ba      	ldr	r2, [r7, #8]
 80024ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024b0:	4013      	ands	r3, r2
 80024b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024c6:	4a04      	ldr	r2, [pc, #16]	; (80024d8 <__NVIC_SetPriorityGrouping+0x44>)
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	60d3      	str	r3, [r2, #12]
}
 80024cc:	bf00      	nop
 80024ce:	3714      	adds	r7, #20
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr
 80024d8:	e000ed00 	.word	0xe000ed00

080024dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024e0:	4b04      	ldr	r3, [pc, #16]	; (80024f4 <__NVIC_GetPriorityGrouping+0x18>)
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	0a1b      	lsrs	r3, r3, #8
 80024e6:	f003 0307 	and.w	r3, r3, #7
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr
 80024f4:	e000ed00 	.word	0xe000ed00

080024f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	4603      	mov	r3, r0
 8002500:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002506:	2b00      	cmp	r3, #0
 8002508:	db0b      	blt.n	8002522 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800250a:	79fb      	ldrb	r3, [r7, #7]
 800250c:	f003 021f 	and.w	r2, r3, #31
 8002510:	4907      	ldr	r1, [pc, #28]	; (8002530 <__NVIC_EnableIRQ+0x38>)
 8002512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002516:	095b      	lsrs	r3, r3, #5
 8002518:	2001      	movs	r0, #1
 800251a:	fa00 f202 	lsl.w	r2, r0, r2
 800251e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002522:	bf00      	nop
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	e000e100 	.word	0xe000e100

08002534 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	4603      	mov	r3, r0
 800253c:	6039      	str	r1, [r7, #0]
 800253e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002544:	2b00      	cmp	r3, #0
 8002546:	db0a      	blt.n	800255e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	b2da      	uxtb	r2, r3
 800254c:	490c      	ldr	r1, [pc, #48]	; (8002580 <__NVIC_SetPriority+0x4c>)
 800254e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002552:	0112      	lsls	r2, r2, #4
 8002554:	b2d2      	uxtb	r2, r2
 8002556:	440b      	add	r3, r1
 8002558:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800255c:	e00a      	b.n	8002574 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	b2da      	uxtb	r2, r3
 8002562:	4908      	ldr	r1, [pc, #32]	; (8002584 <__NVIC_SetPriority+0x50>)
 8002564:	79fb      	ldrb	r3, [r7, #7]
 8002566:	f003 030f 	and.w	r3, r3, #15
 800256a:	3b04      	subs	r3, #4
 800256c:	0112      	lsls	r2, r2, #4
 800256e:	b2d2      	uxtb	r2, r2
 8002570:	440b      	add	r3, r1
 8002572:	761a      	strb	r2, [r3, #24]
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr
 8002580:	e000e100 	.word	0xe000e100
 8002584:	e000ed00 	.word	0xe000ed00

08002588 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002588:	b480      	push	{r7}
 800258a:	b089      	sub	sp, #36	; 0x24
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	f1c3 0307 	rsb	r3, r3, #7
 80025a2:	2b04      	cmp	r3, #4
 80025a4:	bf28      	it	cs
 80025a6:	2304      	movcs	r3, #4
 80025a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	3304      	adds	r3, #4
 80025ae:	2b06      	cmp	r3, #6
 80025b0:	d902      	bls.n	80025b8 <NVIC_EncodePriority+0x30>
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	3b03      	subs	r3, #3
 80025b6:	e000      	b.n	80025ba <NVIC_EncodePriority+0x32>
 80025b8:	2300      	movs	r3, #0
 80025ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025bc:	f04f 32ff 	mov.w	r2, #4294967295
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	43da      	mvns	r2, r3
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	401a      	ands	r2, r3
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025d0:	f04f 31ff 	mov.w	r1, #4294967295
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	fa01 f303 	lsl.w	r3, r1, r3
 80025da:	43d9      	mvns	r1, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025e0:	4313      	orrs	r3, r2
         );
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3724      	adds	r7, #36	; 0x24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
	...

080025f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	3b01      	subs	r3, #1
 80025fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002600:	d301      	bcc.n	8002606 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002602:	2301      	movs	r3, #1
 8002604:	e00f      	b.n	8002626 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002606:	4a0a      	ldr	r2, [pc, #40]	; (8002630 <SysTick_Config+0x40>)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	3b01      	subs	r3, #1
 800260c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800260e:	210f      	movs	r1, #15
 8002610:	f04f 30ff 	mov.w	r0, #4294967295
 8002614:	f7ff ff8e 	bl	8002534 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002618:	4b05      	ldr	r3, [pc, #20]	; (8002630 <SysTick_Config+0x40>)
 800261a:	2200      	movs	r2, #0
 800261c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800261e:	4b04      	ldr	r3, [pc, #16]	; (8002630 <SysTick_Config+0x40>)
 8002620:	2207      	movs	r2, #7
 8002622:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	e000e010 	.word	0xe000e010

08002634 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f7ff ff29 	bl	8002494 <__NVIC_SetPriorityGrouping>
}
 8002642:	bf00      	nop
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b086      	sub	sp, #24
 800264e:	af00      	add	r7, sp, #0
 8002650:	4603      	mov	r3, r0
 8002652:	60b9      	str	r1, [r7, #8]
 8002654:	607a      	str	r2, [r7, #4]
 8002656:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002658:	2300      	movs	r3, #0
 800265a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800265c:	f7ff ff3e 	bl	80024dc <__NVIC_GetPriorityGrouping>
 8002660:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	68b9      	ldr	r1, [r7, #8]
 8002666:	6978      	ldr	r0, [r7, #20]
 8002668:	f7ff ff8e 	bl	8002588 <NVIC_EncodePriority>
 800266c:	4602      	mov	r2, r0
 800266e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002672:	4611      	mov	r1, r2
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff ff5d 	bl	8002534 <__NVIC_SetPriority>
}
 800267a:	bf00      	nop
 800267c:	3718      	adds	r7, #24
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002682:	b580      	push	{r7, lr}
 8002684:	b082      	sub	sp, #8
 8002686:	af00      	add	r7, sp, #0
 8002688:	4603      	mov	r3, r0
 800268a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800268c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002690:	4618      	mov	r0, r3
 8002692:	f7ff ff31 	bl	80024f8 <__NVIC_EnableIRQ>
}
 8002696:	bf00      	nop
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b082      	sub	sp, #8
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f7ff ffa2 	bl	80025f0 <SysTick_Config>
 80026ac:	4603      	mov	r3, r0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
	...

080026b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b087      	sub	sp, #28
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026c2:	2300      	movs	r3, #0
 80026c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026c6:	e160      	b.n	800298a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	2101      	movs	r1, #1
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	fa01 f303 	lsl.w	r3, r1, r3
 80026d4:	4013      	ands	r3, r2
 80026d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	f000 8152 	beq.w	8002984 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f003 0303 	and.w	r3, r3, #3
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d005      	beq.n	80026f8 <HAL_GPIO_Init+0x40>
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f003 0303 	and.w	r3, r3, #3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d130      	bne.n	800275a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	2203      	movs	r2, #3
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	43db      	mvns	r3, r3
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	4013      	ands	r3, r2
 800270e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	68da      	ldr	r2, [r3, #12]
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	4313      	orrs	r3, r2
 8002720:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800272e:	2201      	movs	r2, #1
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	43db      	mvns	r3, r3
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	4013      	ands	r3, r2
 800273c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	091b      	lsrs	r3, r3, #4
 8002744:	f003 0201 	and.w	r2, r3, #1
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	fa02 f303 	lsl.w	r3, r2, r3
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	4313      	orrs	r3, r2
 8002752:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f003 0303 	and.w	r3, r3, #3
 8002762:	2b03      	cmp	r3, #3
 8002764:	d017      	beq.n	8002796 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	2203      	movs	r2, #3
 8002772:	fa02 f303 	lsl.w	r3, r2, r3
 8002776:	43db      	mvns	r3, r3
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	4013      	ands	r3, r2
 800277c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	689a      	ldr	r2, [r3, #8]
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	fa02 f303 	lsl.w	r3, r2, r3
 800278a:	693a      	ldr	r2, [r7, #16]
 800278c:	4313      	orrs	r3, r2
 800278e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f003 0303 	and.w	r3, r3, #3
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d123      	bne.n	80027ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	08da      	lsrs	r2, r3, #3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	3208      	adds	r2, #8
 80027aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	f003 0307 	and.w	r3, r3, #7
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	220f      	movs	r2, #15
 80027ba:	fa02 f303 	lsl.w	r3, r2, r3
 80027be:	43db      	mvns	r3, r3
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	4013      	ands	r3, r2
 80027c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	691a      	ldr	r2, [r3, #16]
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	f003 0307 	and.w	r3, r3, #7
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	4313      	orrs	r3, r2
 80027da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	08da      	lsrs	r2, r3, #3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	3208      	adds	r2, #8
 80027e4:	6939      	ldr	r1, [r7, #16]
 80027e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	2203      	movs	r2, #3
 80027f6:	fa02 f303 	lsl.w	r3, r2, r3
 80027fa:	43db      	mvns	r3, r3
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	4013      	ands	r3, r2
 8002800:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f003 0203 	and.w	r2, r3, #3
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	4313      	orrs	r3, r2
 8002816:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002826:	2b00      	cmp	r3, #0
 8002828:	f000 80ac 	beq.w	8002984 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800282c:	4b5e      	ldr	r3, [pc, #376]	; (80029a8 <HAL_GPIO_Init+0x2f0>)
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	4a5d      	ldr	r2, [pc, #372]	; (80029a8 <HAL_GPIO_Init+0x2f0>)
 8002832:	f043 0301 	orr.w	r3, r3, #1
 8002836:	6193      	str	r3, [r2, #24]
 8002838:	4b5b      	ldr	r3, [pc, #364]	; (80029a8 <HAL_GPIO_Init+0x2f0>)
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	60bb      	str	r3, [r7, #8]
 8002842:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002844:	4a59      	ldr	r2, [pc, #356]	; (80029ac <HAL_GPIO_Init+0x2f4>)
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	089b      	lsrs	r3, r3, #2
 800284a:	3302      	adds	r3, #2
 800284c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002850:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	f003 0303 	and.w	r3, r3, #3
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	220f      	movs	r2, #15
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	43db      	mvns	r3, r3
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	4013      	ands	r3, r2
 8002866:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800286e:	d025      	beq.n	80028bc <HAL_GPIO_Init+0x204>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4a4f      	ldr	r2, [pc, #316]	; (80029b0 <HAL_GPIO_Init+0x2f8>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d01f      	beq.n	80028b8 <HAL_GPIO_Init+0x200>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4a4e      	ldr	r2, [pc, #312]	; (80029b4 <HAL_GPIO_Init+0x2fc>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d019      	beq.n	80028b4 <HAL_GPIO_Init+0x1fc>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a4d      	ldr	r2, [pc, #308]	; (80029b8 <HAL_GPIO_Init+0x300>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d013      	beq.n	80028b0 <HAL_GPIO_Init+0x1f8>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a4c      	ldr	r2, [pc, #304]	; (80029bc <HAL_GPIO_Init+0x304>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d00d      	beq.n	80028ac <HAL_GPIO_Init+0x1f4>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a4b      	ldr	r2, [pc, #300]	; (80029c0 <HAL_GPIO_Init+0x308>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d007      	beq.n	80028a8 <HAL_GPIO_Init+0x1f0>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4a4a      	ldr	r2, [pc, #296]	; (80029c4 <HAL_GPIO_Init+0x30c>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d101      	bne.n	80028a4 <HAL_GPIO_Init+0x1ec>
 80028a0:	2306      	movs	r3, #6
 80028a2:	e00c      	b.n	80028be <HAL_GPIO_Init+0x206>
 80028a4:	2307      	movs	r3, #7
 80028a6:	e00a      	b.n	80028be <HAL_GPIO_Init+0x206>
 80028a8:	2305      	movs	r3, #5
 80028aa:	e008      	b.n	80028be <HAL_GPIO_Init+0x206>
 80028ac:	2304      	movs	r3, #4
 80028ae:	e006      	b.n	80028be <HAL_GPIO_Init+0x206>
 80028b0:	2303      	movs	r3, #3
 80028b2:	e004      	b.n	80028be <HAL_GPIO_Init+0x206>
 80028b4:	2302      	movs	r3, #2
 80028b6:	e002      	b.n	80028be <HAL_GPIO_Init+0x206>
 80028b8:	2301      	movs	r3, #1
 80028ba:	e000      	b.n	80028be <HAL_GPIO_Init+0x206>
 80028bc:	2300      	movs	r3, #0
 80028be:	697a      	ldr	r2, [r7, #20]
 80028c0:	f002 0203 	and.w	r2, r2, #3
 80028c4:	0092      	lsls	r2, r2, #2
 80028c6:	4093      	lsls	r3, r2
 80028c8:	693a      	ldr	r2, [r7, #16]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80028ce:	4937      	ldr	r1, [pc, #220]	; (80029ac <HAL_GPIO_Init+0x2f4>)
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	089b      	lsrs	r3, r3, #2
 80028d4:	3302      	adds	r3, #2
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028dc:	4b3a      	ldr	r3, [pc, #232]	; (80029c8 <HAL_GPIO_Init+0x310>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	43db      	mvns	r3, r3
 80028e6:	693a      	ldr	r2, [r7, #16]
 80028e8:	4013      	ands	r3, r2
 80028ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d003      	beq.n	8002900 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80028f8:	693a      	ldr	r2, [r7, #16]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002900:	4a31      	ldr	r2, [pc, #196]	; (80029c8 <HAL_GPIO_Init+0x310>)
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002906:	4b30      	ldr	r3, [pc, #192]	; (80029c8 <HAL_GPIO_Init+0x310>)
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	43db      	mvns	r3, r3
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	4013      	ands	r3, r2
 8002914:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	4313      	orrs	r3, r2
 8002928:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800292a:	4a27      	ldr	r2, [pc, #156]	; (80029c8 <HAL_GPIO_Init+0x310>)
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002930:	4b25      	ldr	r3, [pc, #148]	; (80029c8 <HAL_GPIO_Init+0x310>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	43db      	mvns	r3, r3
 800293a:	693a      	ldr	r2, [r7, #16]
 800293c:	4013      	ands	r3, r2
 800293e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d003      	beq.n	8002954 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	4313      	orrs	r3, r2
 8002952:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002954:	4a1c      	ldr	r2, [pc, #112]	; (80029c8 <HAL_GPIO_Init+0x310>)
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800295a:	4b1b      	ldr	r3, [pc, #108]	; (80029c8 <HAL_GPIO_Init+0x310>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	43db      	mvns	r3, r3
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	4013      	ands	r3, r2
 8002968:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d003      	beq.n	800297e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	4313      	orrs	r3, r2
 800297c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800297e:	4a12      	ldr	r2, [pc, #72]	; (80029c8 <HAL_GPIO_Init+0x310>)
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	3301      	adds	r3, #1
 8002988:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	fa22 f303 	lsr.w	r3, r2, r3
 8002994:	2b00      	cmp	r3, #0
 8002996:	f47f ae97 	bne.w	80026c8 <HAL_GPIO_Init+0x10>
  }
}
 800299a:	bf00      	nop
 800299c:	bf00      	nop
 800299e:	371c      	adds	r7, #28
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr
 80029a8:	40021000 	.word	0x40021000
 80029ac:	40010000 	.word	0x40010000
 80029b0:	48000400 	.word	0x48000400
 80029b4:	48000800 	.word	0x48000800
 80029b8:	48000c00 	.word	0x48000c00
 80029bc:	48001000 	.word	0x48001000
 80029c0:	48001400 	.word	0x48001400
 80029c4:	48001800 	.word	0x48001800
 80029c8:	40010400 	.word	0x40010400

080029cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	460b      	mov	r3, r1
 80029d6:	807b      	strh	r3, [r7, #2]
 80029d8:	4613      	mov	r3, r2
 80029da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029dc:	787b      	ldrb	r3, [r7, #1]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d003      	beq.n	80029ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029e2:	887a      	ldrh	r2, [r7, #2]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80029e8:	e002      	b.n	80029f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029ea:	887a      	ldrh	r2, [r7, #2]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	4603      	mov	r3, r0
 8002a04:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002a06:	4b08      	ldr	r3, [pc, #32]	; (8002a28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a08:	695a      	ldr	r2, [r3, #20]
 8002a0a:	88fb      	ldrh	r3, [r7, #6]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d006      	beq.n	8002a20 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a12:	4a05      	ldr	r2, [pc, #20]	; (8002a28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a14:	88fb      	ldrh	r3, [r7, #6]
 8002a16:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a18:	88fb      	ldrh	r3, [r7, #6]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7fd fd36 	bl	800048c <HAL_GPIO_EXTI_Callback>
  }
}
 8002a20:	bf00      	nop
 8002a22:	3708      	adds	r7, #8
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	40010400 	.word	0x40010400

08002a2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e081      	b.n	8002b42 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d106      	bne.n	8002a58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f7fe fa9c 	bl	8000f90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2224      	movs	r2, #36	; 0x24
 8002a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 0201 	bic.w	r2, r2, #1
 8002a6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685a      	ldr	r2, [r3, #4]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a7c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	689a      	ldr	r2, [r3, #8]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a8c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d107      	bne.n	8002aa6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	689a      	ldr	r2, [r3, #8]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002aa2:	609a      	str	r2, [r3, #8]
 8002aa4:	e006      	b.n	8002ab4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	689a      	ldr	r2, [r3, #8]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002ab2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d104      	bne.n	8002ac6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ac4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	6812      	ldr	r2, [r2, #0]
 8002ad0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ad4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ad8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68da      	ldr	r2, [r3, #12]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ae8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	691a      	ldr	r2, [r3, #16]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	430a      	orrs	r2, r1
 8002b02:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	69d9      	ldr	r1, [r3, #28]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a1a      	ldr	r2, [r3, #32]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	430a      	orrs	r2, r1
 8002b12:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f042 0201 	orr.w	r2, r2, #1
 8002b22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2220      	movs	r2, #32
 8002b2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
	...

08002b4c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b088      	sub	sp, #32
 8002b50:	af02      	add	r7, sp, #8
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	607a      	str	r2, [r7, #4]
 8002b56:	461a      	mov	r2, r3
 8002b58:	460b      	mov	r3, r1
 8002b5a:	817b      	strh	r3, [r7, #10]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	2b20      	cmp	r3, #32
 8002b6a:	f040 80da 	bne.w	8002d22 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d101      	bne.n	8002b7c <HAL_I2C_Master_Transmit+0x30>
 8002b78:	2302      	movs	r3, #2
 8002b7a:	e0d3      	b.n	8002d24 <HAL_I2C_Master_Transmit+0x1d8>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b84:	f7fe fb80 	bl	8001288 <HAL_GetTick>
 8002b88:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	9300      	str	r3, [sp, #0]
 8002b8e:	2319      	movs	r3, #25
 8002b90:	2201      	movs	r2, #1
 8002b92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f000 f8f0 	bl	8002d7c <I2C_WaitOnFlagUntilTimeout>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e0be      	b.n	8002d24 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2221      	movs	r2, #33	; 0x21
 8002baa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2210      	movs	r2, #16
 8002bb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	893a      	ldrh	r2, [r7, #8]
 8002bc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	2bff      	cmp	r3, #255	; 0xff
 8002bd6:	d90e      	bls.n	8002bf6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	22ff      	movs	r2, #255	; 0xff
 8002bdc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002be2:	b2da      	uxtb	r2, r3
 8002be4:	8979      	ldrh	r1, [r7, #10]
 8002be6:	4b51      	ldr	r3, [pc, #324]	; (8002d2c <HAL_I2C_Master_Transmit+0x1e0>)
 8002be8:	9300      	str	r3, [sp, #0]
 8002bea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bee:	68f8      	ldr	r0, [r7, #12]
 8002bf0:	f000 fa7e 	bl	80030f0 <I2C_TransferConfig>
 8002bf4:	e06c      	b.n	8002cd0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c04:	b2da      	uxtb	r2, r3
 8002c06:	8979      	ldrh	r1, [r7, #10]
 8002c08:	4b48      	ldr	r3, [pc, #288]	; (8002d2c <HAL_I2C_Master_Transmit+0x1e0>)
 8002c0a:	9300      	str	r3, [sp, #0]
 8002c0c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c10:	68f8      	ldr	r0, [r7, #12]
 8002c12:	f000 fa6d 	bl	80030f0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002c16:	e05b      	b.n	8002cd0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c18:	697a      	ldr	r2, [r7, #20]
 8002c1a:	6a39      	ldr	r1, [r7, #32]
 8002c1c:	68f8      	ldr	r0, [r7, #12]
 8002c1e:	f000 f8fc 	bl	8002e1a <I2C_WaitOnTXISFlagUntilTimeout>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e07b      	b.n	8002d24 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c30:	781a      	ldrb	r2, [r3, #0]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3c:	1c5a      	adds	r2, r3, #1
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	b29a      	uxth	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c54:	3b01      	subs	r3, #1
 8002c56:	b29a      	uxth	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d034      	beq.n	8002cd0 <HAL_I2C_Master_Transmit+0x184>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d130      	bne.n	8002cd0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	9300      	str	r3, [sp, #0]
 8002c72:	6a3b      	ldr	r3, [r7, #32]
 8002c74:	2200      	movs	r2, #0
 8002c76:	2180      	movs	r1, #128	; 0x80
 8002c78:	68f8      	ldr	r0, [r7, #12]
 8002c7a:	f000 f87f 	bl	8002d7c <I2C_WaitOnFlagUntilTimeout>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e04d      	b.n	8002d24 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	2bff      	cmp	r3, #255	; 0xff
 8002c90:	d90e      	bls.n	8002cb0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	22ff      	movs	r2, #255	; 0xff
 8002c96:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c9c:	b2da      	uxtb	r2, r3
 8002c9e:	8979      	ldrh	r1, [r7, #10]
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	9300      	str	r3, [sp, #0]
 8002ca4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f000 fa21 	bl	80030f0 <I2C_TransferConfig>
 8002cae:	e00f      	b.n	8002cd0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cbe:	b2da      	uxtb	r2, r3
 8002cc0:	8979      	ldrh	r1, [r7, #10]
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	9300      	str	r3, [sp, #0]
 8002cc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cca:	68f8      	ldr	r0, [r7, #12]
 8002ccc:	f000 fa10 	bl	80030f0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d19e      	bne.n	8002c18 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cda:	697a      	ldr	r2, [r7, #20]
 8002cdc:	6a39      	ldr	r1, [r7, #32]
 8002cde:	68f8      	ldr	r0, [r7, #12]
 8002ce0:	f000 f8e2 	bl	8002ea8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e01a      	b.n	8002d24 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2220      	movs	r2, #32
 8002cf4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	6859      	ldr	r1, [r3, #4]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	4b0b      	ldr	r3, [pc, #44]	; (8002d30 <HAL_I2C_Master_Transmit+0x1e4>)
 8002d02:	400b      	ands	r3, r1
 8002d04:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2220      	movs	r2, #32
 8002d0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	e000      	b.n	8002d24 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002d22:	2302      	movs	r3, #2
  }
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3718      	adds	r7, #24
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	80002000 	.word	0x80002000
 8002d30:	fe00e800 	.word	0xfe00e800

08002d34 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d103      	bne.n	8002d52 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	f003 0301 	and.w	r3, r3, #1
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d007      	beq.n	8002d70 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	699a      	ldr	r2, [r3, #24]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f042 0201 	orr.w	r2, r2, #1
 8002d6e:	619a      	str	r2, [r3, #24]
  }
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	603b      	str	r3, [r7, #0]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d8c:	e031      	b.n	8002df2 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d94:	d02d      	beq.n	8002df2 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d96:	f7fe fa77 	bl	8001288 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d302      	bcc.n	8002dac <I2C_WaitOnFlagUntilTimeout+0x30>
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d122      	bne.n	8002df2 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	699a      	ldr	r2, [r3, #24]
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	4013      	ands	r3, r2
 8002db6:	68ba      	ldr	r2, [r7, #8]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	bf0c      	ite	eq
 8002dbc:	2301      	moveq	r3, #1
 8002dbe:	2300      	movne	r3, #0
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	79fb      	ldrb	r3, [r7, #7]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d113      	bne.n	8002df2 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dce:	f043 0220 	orr.w	r2, r3, #32
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2220      	movs	r2, #32
 8002dda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e00f      	b.n	8002e12 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	699a      	ldr	r2, [r3, #24]
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	68ba      	ldr	r2, [r7, #8]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	bf0c      	ite	eq
 8002e02:	2301      	moveq	r3, #1
 8002e04:	2300      	movne	r3, #0
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	461a      	mov	r2, r3
 8002e0a:	79fb      	ldrb	r3, [r7, #7]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d0be      	beq.n	8002d8e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3710      	adds	r7, #16
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b084      	sub	sp, #16
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	60f8      	str	r0, [r7, #12]
 8002e22:	60b9      	str	r1, [r7, #8]
 8002e24:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e26:	e033      	b.n	8002e90 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	68b9      	ldr	r1, [r7, #8]
 8002e2c:	68f8      	ldr	r0, [r7, #12]
 8002e2e:	f000 f87f 	bl	8002f30 <I2C_IsErrorOccurred>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e031      	b.n	8002ea0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e42:	d025      	beq.n	8002e90 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e44:	f7fe fa20 	bl	8001288 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	68ba      	ldr	r2, [r7, #8]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d302      	bcc.n	8002e5a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d11a      	bne.n	8002e90 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d013      	beq.n	8002e90 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e6c:	f043 0220 	orr.w	r2, r3, #32
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2220      	movs	r2, #32
 8002e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e007      	b.n	8002ea0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d1c4      	bne.n	8002e28 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3710      	adds	r7, #16
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002eb4:	e02f      	b.n	8002f16 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	68b9      	ldr	r1, [r7, #8]
 8002eba:	68f8      	ldr	r0, [r7, #12]
 8002ebc:	f000 f838 	bl	8002f30 <I2C_IsErrorOccurred>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e02d      	b.n	8002f26 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eca:	f7fe f9dd 	bl	8001288 <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	68ba      	ldr	r2, [r7, #8]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d302      	bcc.n	8002ee0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d11a      	bne.n	8002f16 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	f003 0320 	and.w	r3, r3, #32
 8002eea:	2b20      	cmp	r3, #32
 8002eec:	d013      	beq.n	8002f16 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef2:	f043 0220 	orr.w	r2, r3, #32
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2220      	movs	r2, #32
 8002efe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e007      	b.n	8002f26 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	f003 0320 	and.w	r3, r3, #32
 8002f20:	2b20      	cmp	r3, #32
 8002f22:	d1c8      	bne.n	8002eb6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
	...

08002f30 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b08a      	sub	sp, #40	; 0x28
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	f003 0310 	and.w	r3, r3, #16
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d068      	beq.n	800302e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2210      	movs	r2, #16
 8002f62:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002f64:	e049      	b.n	8002ffa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f6c:	d045      	beq.n	8002ffa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f6e:	f7fe f98b 	bl	8001288 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	68ba      	ldr	r2, [r7, #8]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d302      	bcc.n	8002f84 <I2C_IsErrorOccurred+0x54>
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d13a      	bne.n	8002ffa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f8e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f96:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fa6:	d121      	bne.n	8002fec <I2C_IsErrorOccurred+0xbc>
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fae:	d01d      	beq.n	8002fec <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002fb0:	7cfb      	ldrb	r3, [r7, #19]
 8002fb2:	2b20      	cmp	r3, #32
 8002fb4:	d01a      	beq.n	8002fec <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	685a      	ldr	r2, [r3, #4]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002fc4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002fc6:	f7fe f95f 	bl	8001288 <HAL_GetTick>
 8002fca:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fcc:	e00e      	b.n	8002fec <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002fce:	f7fe f95b 	bl	8001288 <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	2b19      	cmp	r3, #25
 8002fda:	d907      	bls.n	8002fec <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002fdc:	6a3b      	ldr	r3, [r7, #32]
 8002fde:	f043 0320 	orr.w	r3, r3, #32
 8002fe2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002fea:	e006      	b.n	8002ffa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	f003 0320 	and.w	r3, r3, #32
 8002ff6:	2b20      	cmp	r3, #32
 8002ff8:	d1e9      	bne.n	8002fce <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	f003 0320 	and.w	r3, r3, #32
 8003004:	2b20      	cmp	r3, #32
 8003006:	d003      	beq.n	8003010 <I2C_IsErrorOccurred+0xe0>
 8003008:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800300c:	2b00      	cmp	r3, #0
 800300e:	d0aa      	beq.n	8002f66 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003010:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003014:	2b00      	cmp	r3, #0
 8003016:	d103      	bne.n	8003020 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2220      	movs	r2, #32
 800301e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003020:	6a3b      	ldr	r3, [r7, #32]
 8003022:	f043 0304 	orr.w	r3, r3, #4
 8003026:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800303c:	2b00      	cmp	r3, #0
 800303e:	d00b      	beq.n	8003058 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003040:	6a3b      	ldr	r3, [r7, #32]
 8003042:	f043 0301 	orr.w	r3, r3, #1
 8003046:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003050:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800305e:	2b00      	cmp	r3, #0
 8003060:	d00b      	beq.n	800307a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003062:	6a3b      	ldr	r3, [r7, #32]
 8003064:	f043 0308 	orr.w	r3, r3, #8
 8003068:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003072:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00b      	beq.n	800309c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003084:	6a3b      	ldr	r3, [r7, #32]
 8003086:	f043 0302 	orr.w	r3, r3, #2
 800308a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003094:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800309c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d01c      	beq.n	80030de <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	f7ff fe45 	bl	8002d34 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	6859      	ldr	r1, [r3, #4]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	4b0d      	ldr	r3, [pc, #52]	; (80030ec <I2C_IsErrorOccurred+0x1bc>)
 80030b6:	400b      	ands	r3, r1
 80030b8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030be:	6a3b      	ldr	r3, [r7, #32]
 80030c0:	431a      	orrs	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2220      	movs	r2, #32
 80030ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80030de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3728      	adds	r7, #40	; 0x28
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	fe00e800 	.word	0xfe00e800

080030f0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b087      	sub	sp, #28
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	607b      	str	r3, [r7, #4]
 80030fa:	460b      	mov	r3, r1
 80030fc:	817b      	strh	r3, [r7, #10]
 80030fe:	4613      	mov	r3, r2
 8003100:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003102:	897b      	ldrh	r3, [r7, #10]
 8003104:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003108:	7a7b      	ldrb	r3, [r7, #9]
 800310a:	041b      	lsls	r3, r3, #16
 800310c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003110:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003116:	6a3b      	ldr	r3, [r7, #32]
 8003118:	4313      	orrs	r3, r2
 800311a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800311e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	685a      	ldr	r2, [r3, #4]
 8003126:	6a3b      	ldr	r3, [r7, #32]
 8003128:	0d5b      	lsrs	r3, r3, #21
 800312a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800312e:	4b08      	ldr	r3, [pc, #32]	; (8003150 <I2C_TransferConfig+0x60>)
 8003130:	430b      	orrs	r3, r1
 8003132:	43db      	mvns	r3, r3
 8003134:	ea02 0103 	and.w	r1, r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	697a      	ldr	r2, [r7, #20]
 800313e:	430a      	orrs	r2, r1
 8003140:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003142:	bf00      	nop
 8003144:	371c      	adds	r7, #28
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	03ff63ff 	.word	0x03ff63ff

08003154 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b20      	cmp	r3, #32
 8003168:	d138      	bne.n	80031dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003170:	2b01      	cmp	r3, #1
 8003172:	d101      	bne.n	8003178 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003174:	2302      	movs	r3, #2
 8003176:	e032      	b.n	80031de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2224      	movs	r2, #36	; 0x24
 8003184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f022 0201 	bic.w	r2, r2, #1
 8003196:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80031a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	6819      	ldr	r1, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	683a      	ldr	r2, [r7, #0]
 80031b4:	430a      	orrs	r2, r1
 80031b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f042 0201 	orr.w	r2, r2, #1
 80031c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2220      	movs	r2, #32
 80031cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80031d8:	2300      	movs	r3, #0
 80031da:	e000      	b.n	80031de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80031dc:	2302      	movs	r3, #2
  }
}
 80031de:	4618      	mov	r0, r3
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr

080031ea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80031ea:	b480      	push	{r7}
 80031ec:	b085      	sub	sp, #20
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
 80031f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	2b20      	cmp	r3, #32
 80031fe:	d139      	bne.n	8003274 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003206:	2b01      	cmp	r3, #1
 8003208:	d101      	bne.n	800320e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800320a:	2302      	movs	r3, #2
 800320c:	e033      	b.n	8003276 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2224      	movs	r2, #36	; 0x24
 800321a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f022 0201 	bic.w	r2, r2, #1
 800322c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800323c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	021b      	lsls	r3, r3, #8
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	4313      	orrs	r3, r2
 8003246:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68fa      	ldr	r2, [r7, #12]
 800324e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f042 0201 	orr.w	r2, r2, #1
 800325e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2220      	movs	r2, #32
 8003264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003270:	2300      	movs	r3, #0
 8003272:	e000      	b.n	8003276 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003274:	2302      	movs	r3, #2
  }
}
 8003276:	4618      	mov	r0, r3
 8003278:	3714      	adds	r7, #20
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
	...

08003284 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	460b      	mov	r3, r1
 800328e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 8003290:	4b09      	ldr	r3, [pc, #36]	; (80032b8 <HAL_PWR_EnterSLEEPMode+0x34>)
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	4a08      	ldr	r2, [pc, #32]	; (80032b8 <HAL_PWR_EnterSLEEPMode+0x34>)
 8003296:	f023 0304 	bic.w	r3, r3, #4
 800329a:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800329c:	78fb      	ldrb	r3, [r7, #3]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d101      	bne.n	80032a6 <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80032a2:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 80032a4:	e002      	b.n	80032ac <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 80032a6:	bf40      	sev
    __WFE();
 80032a8:	bf20      	wfe
    __WFE();
 80032aa:	bf20      	wfe
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr
 80032b8:	e000ed00 	.word	0xe000ed00

080032bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032c8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80032cc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032d2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d102      	bne.n	80032e2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	f001 b83a 	b.w	8004356 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032e6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f000 816f 	beq.w	80035d6 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80032f8:	4bb5      	ldr	r3, [pc, #724]	; (80035d0 <HAL_RCC_OscConfig+0x314>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f003 030c 	and.w	r3, r3, #12
 8003300:	2b04      	cmp	r3, #4
 8003302:	d00c      	beq.n	800331e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003304:	4bb2      	ldr	r3, [pc, #712]	; (80035d0 <HAL_RCC_OscConfig+0x314>)
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f003 030c 	and.w	r3, r3, #12
 800330c:	2b08      	cmp	r3, #8
 800330e:	d15c      	bne.n	80033ca <HAL_RCC_OscConfig+0x10e>
 8003310:	4baf      	ldr	r3, [pc, #700]	; (80035d0 <HAL_RCC_OscConfig+0x314>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800331c:	d155      	bne.n	80033ca <HAL_RCC_OscConfig+0x10e>
 800331e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003322:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003326:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800332a:	fa93 f3a3 	rbit	r3, r3
 800332e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003332:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003336:	fab3 f383 	clz	r3, r3
 800333a:	b2db      	uxtb	r3, r3
 800333c:	095b      	lsrs	r3, r3, #5
 800333e:	b2db      	uxtb	r3, r3
 8003340:	f043 0301 	orr.w	r3, r3, #1
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b01      	cmp	r3, #1
 8003348:	d102      	bne.n	8003350 <HAL_RCC_OscConfig+0x94>
 800334a:	4ba1      	ldr	r3, [pc, #644]	; (80035d0 <HAL_RCC_OscConfig+0x314>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	e015      	b.n	800337c <HAL_RCC_OscConfig+0xc0>
 8003350:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003354:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003358:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800335c:	fa93 f3a3 	rbit	r3, r3
 8003360:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8003364:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003368:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800336c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8003370:	fa93 f3a3 	rbit	r3, r3
 8003374:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003378:	4b95      	ldr	r3, [pc, #596]	; (80035d0 <HAL_RCC_OscConfig+0x314>)
 800337a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003380:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8003384:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8003388:	fa92 f2a2 	rbit	r2, r2
 800338c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8003390:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003394:	fab2 f282 	clz	r2, r2
 8003398:	b2d2      	uxtb	r2, r2
 800339a:	f042 0220 	orr.w	r2, r2, #32
 800339e:	b2d2      	uxtb	r2, r2
 80033a0:	f002 021f 	and.w	r2, r2, #31
 80033a4:	2101      	movs	r1, #1
 80033a6:	fa01 f202 	lsl.w	r2, r1, r2
 80033aa:	4013      	ands	r3, r2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	f000 8111 	beq.w	80035d4 <HAL_RCC_OscConfig+0x318>
 80033b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033b6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f040 8108 	bne.w	80035d4 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	f000 bfc6 	b.w	8004356 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033ce:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033da:	d106      	bne.n	80033ea <HAL_RCC_OscConfig+0x12e>
 80033dc:	4b7c      	ldr	r3, [pc, #496]	; (80035d0 <HAL_RCC_OscConfig+0x314>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a7b      	ldr	r2, [pc, #492]	; (80035d0 <HAL_RCC_OscConfig+0x314>)
 80033e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e6:	6013      	str	r3, [r2, #0]
 80033e8:	e036      	b.n	8003458 <HAL_RCC_OscConfig+0x19c>
 80033ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033ee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d10c      	bne.n	8003414 <HAL_RCC_OscConfig+0x158>
 80033fa:	4b75      	ldr	r3, [pc, #468]	; (80035d0 <HAL_RCC_OscConfig+0x314>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a74      	ldr	r2, [pc, #464]	; (80035d0 <HAL_RCC_OscConfig+0x314>)
 8003400:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003404:	6013      	str	r3, [r2, #0]
 8003406:	4b72      	ldr	r3, [pc, #456]	; (80035d0 <HAL_RCC_OscConfig+0x314>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a71      	ldr	r2, [pc, #452]	; (80035d0 <HAL_RCC_OscConfig+0x314>)
 800340c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003410:	6013      	str	r3, [r2, #0]
 8003412:	e021      	b.n	8003458 <HAL_RCC_OscConfig+0x19c>
 8003414:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003418:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003424:	d10c      	bne.n	8003440 <HAL_RCC_OscConfig+0x184>
 8003426:	4b6a      	ldr	r3, [pc, #424]	; (80035d0 <HAL_RCC_OscConfig+0x314>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a69      	ldr	r2, [pc, #420]	; (80035d0 <HAL_RCC_OscConfig+0x314>)
 800342c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003430:	6013      	str	r3, [r2, #0]
 8003432:	4b67      	ldr	r3, [pc, #412]	; (80035d0 <HAL_RCC_OscConfig+0x314>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a66      	ldr	r2, [pc, #408]	; (80035d0 <HAL_RCC_OscConfig+0x314>)
 8003438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800343c:	6013      	str	r3, [r2, #0]
 800343e:	e00b      	b.n	8003458 <HAL_RCC_OscConfig+0x19c>
 8003440:	4b63      	ldr	r3, [pc, #396]	; (80035d0 <HAL_RCC_OscConfig+0x314>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a62      	ldr	r2, [pc, #392]	; (80035d0 <HAL_RCC_OscConfig+0x314>)
 8003446:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800344a:	6013      	str	r3, [r2, #0]
 800344c:	4b60      	ldr	r3, [pc, #384]	; (80035d0 <HAL_RCC_OscConfig+0x314>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a5f      	ldr	r2, [pc, #380]	; (80035d0 <HAL_RCC_OscConfig+0x314>)
 8003452:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003456:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003458:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800345c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d059      	beq.n	800351c <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003468:	f7fd ff0e 	bl	8001288 <HAL_GetTick>
 800346c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003470:	e00a      	b.n	8003488 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003472:	f7fd ff09 	bl	8001288 <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b64      	cmp	r3, #100	; 0x64
 8003480:	d902      	bls.n	8003488 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	f000 bf67 	b.w	8004356 <HAL_RCC_OscConfig+0x109a>
 8003488:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800348c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003490:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8003494:	fa93 f3a3 	rbit	r3, r3
 8003498:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 800349c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034a0:	fab3 f383 	clz	r3, r3
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	095b      	lsrs	r3, r3, #5
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	f043 0301 	orr.w	r3, r3, #1
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d102      	bne.n	80034ba <HAL_RCC_OscConfig+0x1fe>
 80034b4:	4b46      	ldr	r3, [pc, #280]	; (80035d0 <HAL_RCC_OscConfig+0x314>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	e015      	b.n	80034e6 <HAL_RCC_OscConfig+0x22a>
 80034ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034be:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80034c6:	fa93 f3a3 	rbit	r3, r3
 80034ca:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80034ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034d2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80034d6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80034da:	fa93 f3a3 	rbit	r3, r3
 80034de:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80034e2:	4b3b      	ldr	r3, [pc, #236]	; (80035d0 <HAL_RCC_OscConfig+0x314>)
 80034e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80034ea:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80034ee:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80034f2:	fa92 f2a2 	rbit	r2, r2
 80034f6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80034fa:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80034fe:	fab2 f282 	clz	r2, r2
 8003502:	b2d2      	uxtb	r2, r2
 8003504:	f042 0220 	orr.w	r2, r2, #32
 8003508:	b2d2      	uxtb	r2, r2
 800350a:	f002 021f 	and.w	r2, r2, #31
 800350e:	2101      	movs	r1, #1
 8003510:	fa01 f202 	lsl.w	r2, r1, r2
 8003514:	4013      	ands	r3, r2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d0ab      	beq.n	8003472 <HAL_RCC_OscConfig+0x1b6>
 800351a:	e05c      	b.n	80035d6 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800351c:	f7fd feb4 	bl	8001288 <HAL_GetTick>
 8003520:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003524:	e00a      	b.n	800353c <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003526:	f7fd feaf 	bl	8001288 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b64      	cmp	r3, #100	; 0x64
 8003534:	d902      	bls.n	800353c <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	f000 bf0d 	b.w	8004356 <HAL_RCC_OscConfig+0x109a>
 800353c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003540:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003544:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003548:	fa93 f3a3 	rbit	r3, r3
 800354c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8003550:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003554:	fab3 f383 	clz	r3, r3
 8003558:	b2db      	uxtb	r3, r3
 800355a:	095b      	lsrs	r3, r3, #5
 800355c:	b2db      	uxtb	r3, r3
 800355e:	f043 0301 	orr.w	r3, r3, #1
 8003562:	b2db      	uxtb	r3, r3
 8003564:	2b01      	cmp	r3, #1
 8003566:	d102      	bne.n	800356e <HAL_RCC_OscConfig+0x2b2>
 8003568:	4b19      	ldr	r3, [pc, #100]	; (80035d0 <HAL_RCC_OscConfig+0x314>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	e015      	b.n	800359a <HAL_RCC_OscConfig+0x2de>
 800356e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003572:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003576:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800357a:	fa93 f3a3 	rbit	r3, r3
 800357e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8003582:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003586:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800358a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800358e:	fa93 f3a3 	rbit	r3, r3
 8003592:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003596:	4b0e      	ldr	r3, [pc, #56]	; (80035d0 <HAL_RCC_OscConfig+0x314>)
 8003598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800359e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80035a2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80035a6:	fa92 f2a2 	rbit	r2, r2
 80035aa:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80035ae:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80035b2:	fab2 f282 	clz	r2, r2
 80035b6:	b2d2      	uxtb	r2, r2
 80035b8:	f042 0220 	orr.w	r2, r2, #32
 80035bc:	b2d2      	uxtb	r2, r2
 80035be:	f002 021f 	and.w	r2, r2, #31
 80035c2:	2101      	movs	r1, #1
 80035c4:	fa01 f202 	lsl.w	r2, r1, r2
 80035c8:	4013      	ands	r3, r2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1ab      	bne.n	8003526 <HAL_RCC_OscConfig+0x26a>
 80035ce:	e002      	b.n	80035d6 <HAL_RCC_OscConfig+0x31a>
 80035d0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035da:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f000 817f 	beq.w	80038ea <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80035ec:	4ba7      	ldr	r3, [pc, #668]	; (800388c <HAL_RCC_OscConfig+0x5d0>)
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f003 030c 	and.w	r3, r3, #12
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00c      	beq.n	8003612 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80035f8:	4ba4      	ldr	r3, [pc, #656]	; (800388c <HAL_RCC_OscConfig+0x5d0>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f003 030c 	and.w	r3, r3, #12
 8003600:	2b08      	cmp	r3, #8
 8003602:	d173      	bne.n	80036ec <HAL_RCC_OscConfig+0x430>
 8003604:	4ba1      	ldr	r3, [pc, #644]	; (800388c <HAL_RCC_OscConfig+0x5d0>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800360c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003610:	d16c      	bne.n	80036ec <HAL_RCC_OscConfig+0x430>
 8003612:	2302      	movs	r3, #2
 8003614:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003618:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800361c:	fa93 f3a3 	rbit	r3, r3
 8003620:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8003624:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003628:	fab3 f383 	clz	r3, r3
 800362c:	b2db      	uxtb	r3, r3
 800362e:	095b      	lsrs	r3, r3, #5
 8003630:	b2db      	uxtb	r3, r3
 8003632:	f043 0301 	orr.w	r3, r3, #1
 8003636:	b2db      	uxtb	r3, r3
 8003638:	2b01      	cmp	r3, #1
 800363a:	d102      	bne.n	8003642 <HAL_RCC_OscConfig+0x386>
 800363c:	4b93      	ldr	r3, [pc, #588]	; (800388c <HAL_RCC_OscConfig+0x5d0>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	e013      	b.n	800366a <HAL_RCC_OscConfig+0x3ae>
 8003642:	2302      	movs	r3, #2
 8003644:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003648:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800364c:	fa93 f3a3 	rbit	r3, r3
 8003650:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8003654:	2302      	movs	r3, #2
 8003656:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800365a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800365e:	fa93 f3a3 	rbit	r3, r3
 8003662:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003666:	4b89      	ldr	r3, [pc, #548]	; (800388c <HAL_RCC_OscConfig+0x5d0>)
 8003668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366a:	2202      	movs	r2, #2
 800366c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8003670:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8003674:	fa92 f2a2 	rbit	r2, r2
 8003678:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800367c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003680:	fab2 f282 	clz	r2, r2
 8003684:	b2d2      	uxtb	r2, r2
 8003686:	f042 0220 	orr.w	r2, r2, #32
 800368a:	b2d2      	uxtb	r2, r2
 800368c:	f002 021f 	and.w	r2, r2, #31
 8003690:	2101      	movs	r1, #1
 8003692:	fa01 f202 	lsl.w	r2, r1, r2
 8003696:	4013      	ands	r3, r2
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00a      	beq.n	80036b2 <HAL_RCC_OscConfig+0x3f6>
 800369c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036a0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d002      	beq.n	80036b2 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	f000 be52 	b.w	8004356 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036b2:	4b76      	ldr	r3, [pc, #472]	; (800388c <HAL_RCC_OscConfig+0x5d0>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036be:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	21f8      	movs	r1, #248	; 0xf8
 80036c8:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036cc:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80036d0:	fa91 f1a1 	rbit	r1, r1
 80036d4:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80036d8:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80036dc:	fab1 f181 	clz	r1, r1
 80036e0:	b2c9      	uxtb	r1, r1
 80036e2:	408b      	lsls	r3, r1
 80036e4:	4969      	ldr	r1, [pc, #420]	; (800388c <HAL_RCC_OscConfig+0x5d0>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ea:	e0fe      	b.n	80038ea <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036f0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	f000 8088 	beq.w	800380e <HAL_RCC_OscConfig+0x552>
 80036fe:	2301      	movs	r3, #1
 8003700:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003704:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003708:	fa93 f3a3 	rbit	r3, r3
 800370c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8003710:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003714:	fab3 f383 	clz	r3, r3
 8003718:	b2db      	uxtb	r3, r3
 800371a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800371e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	461a      	mov	r2, r3
 8003726:	2301      	movs	r3, #1
 8003728:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800372a:	f7fd fdad 	bl	8001288 <HAL_GetTick>
 800372e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003732:	e00a      	b.n	800374a <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003734:	f7fd fda8 	bl	8001288 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	2b02      	cmp	r3, #2
 8003742:	d902      	bls.n	800374a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	f000 be06 	b.w	8004356 <HAL_RCC_OscConfig+0x109a>
 800374a:	2302      	movs	r3, #2
 800374c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003750:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003754:	fa93 f3a3 	rbit	r3, r3
 8003758:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 800375c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003760:	fab3 f383 	clz	r3, r3
 8003764:	b2db      	uxtb	r3, r3
 8003766:	095b      	lsrs	r3, r3, #5
 8003768:	b2db      	uxtb	r3, r3
 800376a:	f043 0301 	orr.w	r3, r3, #1
 800376e:	b2db      	uxtb	r3, r3
 8003770:	2b01      	cmp	r3, #1
 8003772:	d102      	bne.n	800377a <HAL_RCC_OscConfig+0x4be>
 8003774:	4b45      	ldr	r3, [pc, #276]	; (800388c <HAL_RCC_OscConfig+0x5d0>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	e013      	b.n	80037a2 <HAL_RCC_OscConfig+0x4e6>
 800377a:	2302      	movs	r3, #2
 800377c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003780:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003784:	fa93 f3a3 	rbit	r3, r3
 8003788:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800378c:	2302      	movs	r3, #2
 800378e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003792:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003796:	fa93 f3a3 	rbit	r3, r3
 800379a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800379e:	4b3b      	ldr	r3, [pc, #236]	; (800388c <HAL_RCC_OscConfig+0x5d0>)
 80037a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a2:	2202      	movs	r2, #2
 80037a4:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80037a8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80037ac:	fa92 f2a2 	rbit	r2, r2
 80037b0:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80037b4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80037b8:	fab2 f282 	clz	r2, r2
 80037bc:	b2d2      	uxtb	r2, r2
 80037be:	f042 0220 	orr.w	r2, r2, #32
 80037c2:	b2d2      	uxtb	r2, r2
 80037c4:	f002 021f 	and.w	r2, r2, #31
 80037c8:	2101      	movs	r1, #1
 80037ca:	fa01 f202 	lsl.w	r2, r1, r2
 80037ce:	4013      	ands	r3, r2
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d0af      	beq.n	8003734 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037d4:	4b2d      	ldr	r3, [pc, #180]	; (800388c <HAL_RCC_OscConfig+0x5d0>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037e0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	21f8      	movs	r1, #248	; 0xf8
 80037ea:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ee:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80037f2:	fa91 f1a1 	rbit	r1, r1
 80037f6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80037fa:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80037fe:	fab1 f181 	clz	r1, r1
 8003802:	b2c9      	uxtb	r1, r1
 8003804:	408b      	lsls	r3, r1
 8003806:	4921      	ldr	r1, [pc, #132]	; (800388c <HAL_RCC_OscConfig+0x5d0>)
 8003808:	4313      	orrs	r3, r2
 800380a:	600b      	str	r3, [r1, #0]
 800380c:	e06d      	b.n	80038ea <HAL_RCC_OscConfig+0x62e>
 800380e:	2301      	movs	r3, #1
 8003810:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003814:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003818:	fa93 f3a3 	rbit	r3, r3
 800381c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8003820:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003824:	fab3 f383 	clz	r3, r3
 8003828:	b2db      	uxtb	r3, r3
 800382a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800382e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	461a      	mov	r2, r3
 8003836:	2300      	movs	r3, #0
 8003838:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800383a:	f7fd fd25 	bl	8001288 <HAL_GetTick>
 800383e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003842:	e00a      	b.n	800385a <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003844:	f7fd fd20 	bl	8001288 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	2b02      	cmp	r3, #2
 8003852:	d902      	bls.n	800385a <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	f000 bd7e 	b.w	8004356 <HAL_RCC_OscConfig+0x109a>
 800385a:	2302      	movs	r3, #2
 800385c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003860:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003864:	fa93 f3a3 	rbit	r3, r3
 8003868:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800386c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003870:	fab3 f383 	clz	r3, r3
 8003874:	b2db      	uxtb	r3, r3
 8003876:	095b      	lsrs	r3, r3, #5
 8003878:	b2db      	uxtb	r3, r3
 800387a:	f043 0301 	orr.w	r3, r3, #1
 800387e:	b2db      	uxtb	r3, r3
 8003880:	2b01      	cmp	r3, #1
 8003882:	d105      	bne.n	8003890 <HAL_RCC_OscConfig+0x5d4>
 8003884:	4b01      	ldr	r3, [pc, #4]	; (800388c <HAL_RCC_OscConfig+0x5d0>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	e016      	b.n	80038b8 <HAL_RCC_OscConfig+0x5fc>
 800388a:	bf00      	nop
 800388c:	40021000 	.word	0x40021000
 8003890:	2302      	movs	r3, #2
 8003892:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003896:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800389a:	fa93 f3a3 	rbit	r3, r3
 800389e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80038a2:	2302      	movs	r3, #2
 80038a4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80038a8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80038ac:	fa93 f3a3 	rbit	r3, r3
 80038b0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80038b4:	4bbf      	ldr	r3, [pc, #764]	; (8003bb4 <HAL_RCC_OscConfig+0x8f8>)
 80038b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b8:	2202      	movs	r2, #2
 80038ba:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80038be:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80038c2:	fa92 f2a2 	rbit	r2, r2
 80038c6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80038ca:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80038ce:	fab2 f282 	clz	r2, r2
 80038d2:	b2d2      	uxtb	r2, r2
 80038d4:	f042 0220 	orr.w	r2, r2, #32
 80038d8:	b2d2      	uxtb	r2, r2
 80038da:	f002 021f 	and.w	r2, r2, #31
 80038de:	2101      	movs	r1, #1
 80038e0:	fa01 f202 	lsl.w	r2, r1, r2
 80038e4:	4013      	ands	r3, r2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1ac      	bne.n	8003844 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038ee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0308 	and.w	r3, r3, #8
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	f000 8113 	beq.w	8003b26 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003900:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003904:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	695b      	ldr	r3, [r3, #20]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d07c      	beq.n	8003a0a <HAL_RCC_OscConfig+0x74e>
 8003910:	2301      	movs	r3, #1
 8003912:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003916:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800391a:	fa93 f3a3 	rbit	r3, r3
 800391e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8003922:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003926:	fab3 f383 	clz	r3, r3
 800392a:	b2db      	uxtb	r3, r3
 800392c:	461a      	mov	r2, r3
 800392e:	4ba2      	ldr	r3, [pc, #648]	; (8003bb8 <HAL_RCC_OscConfig+0x8fc>)
 8003930:	4413      	add	r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	461a      	mov	r2, r3
 8003936:	2301      	movs	r3, #1
 8003938:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800393a:	f7fd fca5 	bl	8001288 <HAL_GetTick>
 800393e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003942:	e00a      	b.n	800395a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003944:	f7fd fca0 	bl	8001288 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	2b02      	cmp	r3, #2
 8003952:	d902      	bls.n	800395a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	f000 bcfe 	b.w	8004356 <HAL_RCC_OscConfig+0x109a>
 800395a:	2302      	movs	r3, #2
 800395c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003960:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003964:	fa93 f2a3 	rbit	r2, r3
 8003968:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800396c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003970:	601a      	str	r2, [r3, #0]
 8003972:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003976:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800397a:	2202      	movs	r2, #2
 800397c:	601a      	str	r2, [r3, #0]
 800397e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003982:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	fa93 f2a3 	rbit	r2, r3
 800398c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003990:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003994:	601a      	str	r2, [r3, #0]
 8003996:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800399a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800399e:	2202      	movs	r2, #2
 80039a0:	601a      	str	r2, [r3, #0]
 80039a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039a6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	fa93 f2a3 	rbit	r2, r3
 80039b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039b4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80039b8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039ba:	4b7e      	ldr	r3, [pc, #504]	; (8003bb4 <HAL_RCC_OscConfig+0x8f8>)
 80039bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039c2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80039c6:	2102      	movs	r1, #2
 80039c8:	6019      	str	r1, [r3, #0]
 80039ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039ce:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	fa93 f1a3 	rbit	r1, r3
 80039d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039dc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80039e0:	6019      	str	r1, [r3, #0]
  return result;
 80039e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039e6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	fab3 f383 	clz	r3, r3
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	f003 031f 	and.w	r3, r3, #31
 80039fc:	2101      	movs	r1, #1
 80039fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003a02:	4013      	ands	r3, r2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d09d      	beq.n	8003944 <HAL_RCC_OscConfig+0x688>
 8003a08:	e08d      	b.n	8003b26 <HAL_RCC_OscConfig+0x86a>
 8003a0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a0e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003a12:	2201      	movs	r2, #1
 8003a14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a1a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	fa93 f2a3 	rbit	r2, r3
 8003a24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a28:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003a2c:	601a      	str	r2, [r3, #0]
  return result;
 8003a2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a32:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003a36:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a38:	fab3 f383 	clz	r3, r3
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	461a      	mov	r2, r3
 8003a40:	4b5d      	ldr	r3, [pc, #372]	; (8003bb8 <HAL_RCC_OscConfig+0x8fc>)
 8003a42:	4413      	add	r3, r2
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	461a      	mov	r2, r3
 8003a48:	2300      	movs	r3, #0
 8003a4a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a4c:	f7fd fc1c 	bl	8001288 <HAL_GetTick>
 8003a50:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a54:	e00a      	b.n	8003a6c <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a56:	f7fd fc17 	bl	8001288 <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d902      	bls.n	8003a6c <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	f000 bc75 	b.w	8004356 <HAL_RCC_OscConfig+0x109a>
 8003a6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a70:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003a74:	2202      	movs	r2, #2
 8003a76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a7c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	fa93 f2a3 	rbit	r2, r3
 8003a86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a8a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003a8e:	601a      	str	r2, [r3, #0]
 8003a90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003a98:	2202      	movs	r2, #2
 8003a9a:	601a      	str	r2, [r3, #0]
 8003a9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003aa0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	fa93 f2a3 	rbit	r2, r3
 8003aaa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003aae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003ab2:	601a      	str	r2, [r3, #0]
 8003ab4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ab8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003abc:	2202      	movs	r2, #2
 8003abe:	601a      	str	r2, [r3, #0]
 8003ac0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ac4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	fa93 f2a3 	rbit	r2, r3
 8003ace:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ad2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003ad6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ad8:	4b36      	ldr	r3, [pc, #216]	; (8003bb4 <HAL_RCC_OscConfig+0x8f8>)
 8003ada:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003adc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ae0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003ae4:	2102      	movs	r1, #2
 8003ae6:	6019      	str	r1, [r3, #0]
 8003ae8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003aec:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	fa93 f1a3 	rbit	r1, r3
 8003af6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003afa:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003afe:	6019      	str	r1, [r3, #0]
  return result;
 8003b00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b04:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	fab3 f383 	clz	r3, r3
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	f003 031f 	and.w	r3, r3, #31
 8003b1a:	2101      	movs	r1, #1
 8003b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b20:	4013      	ands	r3, r2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d197      	bne.n	8003a56 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b2a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0304 	and.w	r3, r3, #4
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	f000 81a5 	beq.w	8003e86 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b42:	4b1c      	ldr	r3, [pc, #112]	; (8003bb4 <HAL_RCC_OscConfig+0x8f8>)
 8003b44:	69db      	ldr	r3, [r3, #28]
 8003b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d116      	bne.n	8003b7c <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b4e:	4b19      	ldr	r3, [pc, #100]	; (8003bb4 <HAL_RCC_OscConfig+0x8f8>)
 8003b50:	69db      	ldr	r3, [r3, #28]
 8003b52:	4a18      	ldr	r2, [pc, #96]	; (8003bb4 <HAL_RCC_OscConfig+0x8f8>)
 8003b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b58:	61d3      	str	r3, [r2, #28]
 8003b5a:	4b16      	ldr	r3, [pc, #88]	; (8003bb4 <HAL_RCC_OscConfig+0x8f8>)
 8003b5c:	69db      	ldr	r3, [r3, #28]
 8003b5e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003b62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b6a:	601a      	str	r2, [r3, #0]
 8003b6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b70:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b74:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003b76:	2301      	movs	r3, #1
 8003b78:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b7c:	4b0f      	ldr	r3, [pc, #60]	; (8003bbc <HAL_RCC_OscConfig+0x900>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d121      	bne.n	8003bcc <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b88:	4b0c      	ldr	r3, [pc, #48]	; (8003bbc <HAL_RCC_OscConfig+0x900>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a0b      	ldr	r2, [pc, #44]	; (8003bbc <HAL_RCC_OscConfig+0x900>)
 8003b8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b92:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b94:	f7fd fb78 	bl	8001288 <HAL_GetTick>
 8003b98:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b9c:	e010      	b.n	8003bc0 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b9e:	f7fd fb73 	bl	8001288 <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b64      	cmp	r3, #100	; 0x64
 8003bac:	d908      	bls.n	8003bc0 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e3d1      	b.n	8004356 <HAL_RCC_OscConfig+0x109a>
 8003bb2:	bf00      	nop
 8003bb4:	40021000 	.word	0x40021000
 8003bb8:	10908120 	.word	0x10908120
 8003bbc:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bc0:	4b8d      	ldr	r3, [pc, #564]	; (8003df8 <HAL_RCC_OscConfig+0xb3c>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d0e8      	beq.n	8003b9e <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bcc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bd0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d106      	bne.n	8003bea <HAL_RCC_OscConfig+0x92e>
 8003bdc:	4b87      	ldr	r3, [pc, #540]	; (8003dfc <HAL_RCC_OscConfig+0xb40>)
 8003bde:	6a1b      	ldr	r3, [r3, #32]
 8003be0:	4a86      	ldr	r2, [pc, #536]	; (8003dfc <HAL_RCC_OscConfig+0xb40>)
 8003be2:	f043 0301 	orr.w	r3, r3, #1
 8003be6:	6213      	str	r3, [r2, #32]
 8003be8:	e035      	b.n	8003c56 <HAL_RCC_OscConfig+0x99a>
 8003bea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d10c      	bne.n	8003c14 <HAL_RCC_OscConfig+0x958>
 8003bfa:	4b80      	ldr	r3, [pc, #512]	; (8003dfc <HAL_RCC_OscConfig+0xb40>)
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
 8003bfe:	4a7f      	ldr	r2, [pc, #508]	; (8003dfc <HAL_RCC_OscConfig+0xb40>)
 8003c00:	f023 0301 	bic.w	r3, r3, #1
 8003c04:	6213      	str	r3, [r2, #32]
 8003c06:	4b7d      	ldr	r3, [pc, #500]	; (8003dfc <HAL_RCC_OscConfig+0xb40>)
 8003c08:	6a1b      	ldr	r3, [r3, #32]
 8003c0a:	4a7c      	ldr	r2, [pc, #496]	; (8003dfc <HAL_RCC_OscConfig+0xb40>)
 8003c0c:	f023 0304 	bic.w	r3, r3, #4
 8003c10:	6213      	str	r3, [r2, #32]
 8003c12:	e020      	b.n	8003c56 <HAL_RCC_OscConfig+0x99a>
 8003c14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c18:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	2b05      	cmp	r3, #5
 8003c22:	d10c      	bne.n	8003c3e <HAL_RCC_OscConfig+0x982>
 8003c24:	4b75      	ldr	r3, [pc, #468]	; (8003dfc <HAL_RCC_OscConfig+0xb40>)
 8003c26:	6a1b      	ldr	r3, [r3, #32]
 8003c28:	4a74      	ldr	r2, [pc, #464]	; (8003dfc <HAL_RCC_OscConfig+0xb40>)
 8003c2a:	f043 0304 	orr.w	r3, r3, #4
 8003c2e:	6213      	str	r3, [r2, #32]
 8003c30:	4b72      	ldr	r3, [pc, #456]	; (8003dfc <HAL_RCC_OscConfig+0xb40>)
 8003c32:	6a1b      	ldr	r3, [r3, #32]
 8003c34:	4a71      	ldr	r2, [pc, #452]	; (8003dfc <HAL_RCC_OscConfig+0xb40>)
 8003c36:	f043 0301 	orr.w	r3, r3, #1
 8003c3a:	6213      	str	r3, [r2, #32]
 8003c3c:	e00b      	b.n	8003c56 <HAL_RCC_OscConfig+0x99a>
 8003c3e:	4b6f      	ldr	r3, [pc, #444]	; (8003dfc <HAL_RCC_OscConfig+0xb40>)
 8003c40:	6a1b      	ldr	r3, [r3, #32]
 8003c42:	4a6e      	ldr	r2, [pc, #440]	; (8003dfc <HAL_RCC_OscConfig+0xb40>)
 8003c44:	f023 0301 	bic.w	r3, r3, #1
 8003c48:	6213      	str	r3, [r2, #32]
 8003c4a:	4b6c      	ldr	r3, [pc, #432]	; (8003dfc <HAL_RCC_OscConfig+0xb40>)
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	4a6b      	ldr	r2, [pc, #428]	; (8003dfc <HAL_RCC_OscConfig+0xb40>)
 8003c50:	f023 0304 	bic.w	r3, r3, #4
 8003c54:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c5a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	f000 8081 	beq.w	8003d6a <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c68:	f7fd fb0e 	bl	8001288 <HAL_GetTick>
 8003c6c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c70:	e00b      	b.n	8003c8a <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c72:	f7fd fb09 	bl	8001288 <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d901      	bls.n	8003c8a <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e365      	b.n	8004356 <HAL_RCC_OscConfig+0x109a>
 8003c8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c8e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003c92:	2202      	movs	r2, #2
 8003c94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c9a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	fa93 f2a3 	rbit	r2, r3
 8003ca4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ca8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003cac:	601a      	str	r2, [r3, #0]
 8003cae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cb2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003cb6:	2202      	movs	r2, #2
 8003cb8:	601a      	str	r2, [r3, #0]
 8003cba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cbe:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	fa93 f2a3 	rbit	r2, r3
 8003cc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ccc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003cd0:	601a      	str	r2, [r3, #0]
  return result;
 8003cd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cd6:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003cda:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cdc:	fab3 f383 	clz	r3, r3
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	095b      	lsrs	r3, r3, #5
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	f043 0302 	orr.w	r3, r3, #2
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d102      	bne.n	8003cf6 <HAL_RCC_OscConfig+0xa3a>
 8003cf0:	4b42      	ldr	r3, [pc, #264]	; (8003dfc <HAL_RCC_OscConfig+0xb40>)
 8003cf2:	6a1b      	ldr	r3, [r3, #32]
 8003cf4:	e013      	b.n	8003d1e <HAL_RCC_OscConfig+0xa62>
 8003cf6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cfa:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003cfe:	2202      	movs	r2, #2
 8003d00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d06:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	fa93 f2a3 	rbit	r2, r3
 8003d10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d14:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003d18:	601a      	str	r2, [r3, #0]
 8003d1a:	4b38      	ldr	r3, [pc, #224]	; (8003dfc <HAL_RCC_OscConfig+0xb40>)
 8003d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003d22:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003d26:	2102      	movs	r1, #2
 8003d28:	6011      	str	r1, [r2, #0]
 8003d2a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003d2e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003d32:	6812      	ldr	r2, [r2, #0]
 8003d34:	fa92 f1a2 	rbit	r1, r2
 8003d38:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003d3c:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003d40:	6011      	str	r1, [r2, #0]
  return result;
 8003d42:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003d46:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003d4a:	6812      	ldr	r2, [r2, #0]
 8003d4c:	fab2 f282 	clz	r2, r2
 8003d50:	b2d2      	uxtb	r2, r2
 8003d52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d56:	b2d2      	uxtb	r2, r2
 8003d58:	f002 021f 	and.w	r2, r2, #31
 8003d5c:	2101      	movs	r1, #1
 8003d5e:	fa01 f202 	lsl.w	r2, r1, r2
 8003d62:	4013      	ands	r3, r2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d084      	beq.n	8003c72 <HAL_RCC_OscConfig+0x9b6>
 8003d68:	e083      	b.n	8003e72 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d6a:	f7fd fa8d 	bl	8001288 <HAL_GetTick>
 8003d6e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d72:	e00b      	b.n	8003d8c <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d74:	f7fd fa88 	bl	8001288 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d901      	bls.n	8003d8c <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e2e4      	b.n	8004356 <HAL_RCC_OscConfig+0x109a>
 8003d8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d90:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003d94:	2202      	movs	r2, #2
 8003d96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d9c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	fa93 f2a3 	rbit	r2, r3
 8003da6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003daa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003dae:	601a      	str	r2, [r3, #0]
 8003db0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003db4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003db8:	2202      	movs	r2, #2
 8003dba:	601a      	str	r2, [r3, #0]
 8003dbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dc0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	fa93 f2a3 	rbit	r2, r3
 8003dca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dce:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003dd2:	601a      	str	r2, [r3, #0]
  return result;
 8003dd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dd8:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003ddc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dde:	fab3 f383 	clz	r3, r3
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	095b      	lsrs	r3, r3, #5
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	f043 0302 	orr.w	r3, r3, #2
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d106      	bne.n	8003e00 <HAL_RCC_OscConfig+0xb44>
 8003df2:	4b02      	ldr	r3, [pc, #8]	; (8003dfc <HAL_RCC_OscConfig+0xb40>)
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	e017      	b.n	8003e28 <HAL_RCC_OscConfig+0xb6c>
 8003df8:	40007000 	.word	0x40007000
 8003dfc:	40021000 	.word	0x40021000
 8003e00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e04:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003e08:	2202      	movs	r2, #2
 8003e0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e10:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	fa93 f2a3 	rbit	r2, r3
 8003e1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e1e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8003e22:	601a      	str	r2, [r3, #0]
 8003e24:	4bb3      	ldr	r3, [pc, #716]	; (80040f4 <HAL_RCC_OscConfig+0xe38>)
 8003e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e28:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003e2c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003e30:	2102      	movs	r1, #2
 8003e32:	6011      	str	r1, [r2, #0]
 8003e34:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003e38:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003e3c:	6812      	ldr	r2, [r2, #0]
 8003e3e:	fa92 f1a2 	rbit	r1, r2
 8003e42:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003e46:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003e4a:	6011      	str	r1, [r2, #0]
  return result;
 8003e4c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003e50:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003e54:	6812      	ldr	r2, [r2, #0]
 8003e56:	fab2 f282 	clz	r2, r2
 8003e5a:	b2d2      	uxtb	r2, r2
 8003e5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e60:	b2d2      	uxtb	r2, r2
 8003e62:	f002 021f 	and.w	r2, r2, #31
 8003e66:	2101      	movs	r1, #1
 8003e68:	fa01 f202 	lsl.w	r2, r1, r2
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d180      	bne.n	8003d74 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e72:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d105      	bne.n	8003e86 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e7a:	4b9e      	ldr	r3, [pc, #632]	; (80040f4 <HAL_RCC_OscConfig+0xe38>)
 8003e7c:	69db      	ldr	r3, [r3, #28]
 8003e7e:	4a9d      	ldr	r2, [pc, #628]	; (80040f4 <HAL_RCC_OscConfig+0xe38>)
 8003e80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e84:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e8a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	f000 825e 	beq.w	8004354 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e98:	4b96      	ldr	r3, [pc, #600]	; (80040f4 <HAL_RCC_OscConfig+0xe38>)
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f003 030c 	and.w	r3, r3, #12
 8003ea0:	2b08      	cmp	r3, #8
 8003ea2:	f000 821f 	beq.w	80042e4 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ea6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003eaa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	f040 8170 	bne.w	8004198 <HAL_RCC_OscConfig+0xedc>
 8003eb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ebc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003ec0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003ec4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003eca:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	fa93 f2a3 	rbit	r2, r3
 8003ed4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ed8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003edc:	601a      	str	r2, [r3, #0]
  return result;
 8003ede:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ee2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003ee6:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ee8:	fab3 f383 	clz	r3, r3
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ef2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	461a      	mov	r2, r3
 8003efa:	2300      	movs	r3, #0
 8003efc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003efe:	f7fd f9c3 	bl	8001288 <HAL_GetTick>
 8003f02:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f06:	e009      	b.n	8003f1c <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f08:	f7fd f9be 	bl	8001288 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d901      	bls.n	8003f1c <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	e21c      	b.n	8004356 <HAL_RCC_OscConfig+0x109a>
 8003f1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f20:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003f24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f2e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	fa93 f2a3 	rbit	r2, r3
 8003f38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f3c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003f40:	601a      	str	r2, [r3, #0]
  return result;
 8003f42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f46:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003f4a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f4c:	fab3 f383 	clz	r3, r3
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	095b      	lsrs	r3, r3, #5
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	f043 0301 	orr.w	r3, r3, #1
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d102      	bne.n	8003f66 <HAL_RCC_OscConfig+0xcaa>
 8003f60:	4b64      	ldr	r3, [pc, #400]	; (80040f4 <HAL_RCC_OscConfig+0xe38>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	e027      	b.n	8003fb6 <HAL_RCC_OscConfig+0xcfa>
 8003f66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f6a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003f6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f78:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	fa93 f2a3 	rbit	r2, r3
 8003f82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f86:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003f8a:	601a      	str	r2, [r3, #0]
 8003f8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f90:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003f94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f98:	601a      	str	r2, [r3, #0]
 8003f9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f9e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	fa93 f2a3 	rbit	r2, r3
 8003fa8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fac:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8003fb0:	601a      	str	r2, [r3, #0]
 8003fb2:	4b50      	ldr	r3, [pc, #320]	; (80040f4 <HAL_RCC_OscConfig+0xe38>)
 8003fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003fba:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003fbe:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003fc2:	6011      	str	r1, [r2, #0]
 8003fc4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003fc8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003fcc:	6812      	ldr	r2, [r2, #0]
 8003fce:	fa92 f1a2 	rbit	r1, r2
 8003fd2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003fd6:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003fda:	6011      	str	r1, [r2, #0]
  return result;
 8003fdc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003fe0:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003fe4:	6812      	ldr	r2, [r2, #0]
 8003fe6:	fab2 f282 	clz	r2, r2
 8003fea:	b2d2      	uxtb	r2, r2
 8003fec:	f042 0220 	orr.w	r2, r2, #32
 8003ff0:	b2d2      	uxtb	r2, r2
 8003ff2:	f002 021f 	and.w	r2, r2, #31
 8003ff6:	2101      	movs	r1, #1
 8003ff8:	fa01 f202 	lsl.w	r2, r1, r2
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d182      	bne.n	8003f08 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004002:	4b3c      	ldr	r3, [pc, #240]	; (80040f4 <HAL_RCC_OscConfig+0xe38>)
 8004004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004006:	f023 020f 	bic.w	r2, r3, #15
 800400a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800400e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004016:	4937      	ldr	r1, [pc, #220]	; (80040f4 <HAL_RCC_OscConfig+0xe38>)
 8004018:	4313      	orrs	r3, r2
 800401a:	62cb      	str	r3, [r1, #44]	; 0x2c
 800401c:	4b35      	ldr	r3, [pc, #212]	; (80040f4 <HAL_RCC_OscConfig+0xe38>)
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8004024:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004028:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	6a19      	ldr	r1, [r3, #32]
 8004030:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004034:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	69db      	ldr	r3, [r3, #28]
 800403c:	430b      	orrs	r3, r1
 800403e:	492d      	ldr	r1, [pc, #180]	; (80040f4 <HAL_RCC_OscConfig+0xe38>)
 8004040:	4313      	orrs	r3, r2
 8004042:	604b      	str	r3, [r1, #4]
 8004044:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004048:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800404c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004050:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004052:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004056:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	fa93 f2a3 	rbit	r2, r3
 8004060:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004064:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004068:	601a      	str	r2, [r3, #0]
  return result;
 800406a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800406e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004072:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004074:	fab3 f383 	clz	r3, r3
 8004078:	b2db      	uxtb	r3, r3
 800407a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800407e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	461a      	mov	r2, r3
 8004086:	2301      	movs	r3, #1
 8004088:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800408a:	f7fd f8fd 	bl	8001288 <HAL_GetTick>
 800408e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004092:	e009      	b.n	80040a8 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004094:	f7fd f8f8 	bl	8001288 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d901      	bls.n	80040a8 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e156      	b.n	8004356 <HAL_RCC_OscConfig+0x109a>
 80040a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040ac:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80040b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040ba:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	fa93 f2a3 	rbit	r2, r3
 80040c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040c8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80040cc:	601a      	str	r2, [r3, #0]
  return result;
 80040ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040d2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80040d6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040d8:	fab3 f383 	clz	r3, r3
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	095b      	lsrs	r3, r3, #5
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	f043 0301 	orr.w	r3, r3, #1
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d105      	bne.n	80040f8 <HAL_RCC_OscConfig+0xe3c>
 80040ec:	4b01      	ldr	r3, [pc, #4]	; (80040f4 <HAL_RCC_OscConfig+0xe38>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	e02a      	b.n	8004148 <HAL_RCC_OscConfig+0xe8c>
 80040f2:	bf00      	nop
 80040f4:	40021000 	.word	0x40021000
 80040f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040fc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004100:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004104:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004106:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800410a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	fa93 f2a3 	rbit	r2, r3
 8004114:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004118:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800411c:	601a      	str	r2, [r3, #0]
 800411e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004122:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004126:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800412a:	601a      	str	r2, [r3, #0]
 800412c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004130:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	fa93 f2a3 	rbit	r2, r3
 800413a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800413e:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8004142:	601a      	str	r2, [r3, #0]
 8004144:	4b86      	ldr	r3, [pc, #536]	; (8004360 <HAL_RCC_OscConfig+0x10a4>)
 8004146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004148:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800414c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004150:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004154:	6011      	str	r1, [r2, #0]
 8004156:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800415a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800415e:	6812      	ldr	r2, [r2, #0]
 8004160:	fa92 f1a2 	rbit	r1, r2
 8004164:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004168:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800416c:	6011      	str	r1, [r2, #0]
  return result;
 800416e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004172:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8004176:	6812      	ldr	r2, [r2, #0]
 8004178:	fab2 f282 	clz	r2, r2
 800417c:	b2d2      	uxtb	r2, r2
 800417e:	f042 0220 	orr.w	r2, r2, #32
 8004182:	b2d2      	uxtb	r2, r2
 8004184:	f002 021f 	and.w	r2, r2, #31
 8004188:	2101      	movs	r1, #1
 800418a:	fa01 f202 	lsl.w	r2, r1, r2
 800418e:	4013      	ands	r3, r2
 8004190:	2b00      	cmp	r3, #0
 8004192:	f43f af7f 	beq.w	8004094 <HAL_RCC_OscConfig+0xdd8>
 8004196:	e0dd      	b.n	8004354 <HAL_RCC_OscConfig+0x1098>
 8004198:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800419c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80041a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80041a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041aa:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	fa93 f2a3 	rbit	r2, r3
 80041b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041b8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80041bc:	601a      	str	r2, [r3, #0]
  return result;
 80041be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041c2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80041c6:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041c8:	fab3 f383 	clz	r3, r3
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80041d2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	461a      	mov	r2, r3
 80041da:	2300      	movs	r3, #0
 80041dc:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041de:	f7fd f853 	bl	8001288 <HAL_GetTick>
 80041e2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041e6:	e009      	b.n	80041fc <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041e8:	f7fd f84e 	bl	8001288 <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d901      	bls.n	80041fc <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e0ac      	b.n	8004356 <HAL_RCC_OscConfig+0x109a>
 80041fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004200:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004204:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004208:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800420a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800420e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	fa93 f2a3 	rbit	r2, r3
 8004218:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800421c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004220:	601a      	str	r2, [r3, #0]
  return result;
 8004222:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004226:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800422a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800422c:	fab3 f383 	clz	r3, r3
 8004230:	b2db      	uxtb	r3, r3
 8004232:	095b      	lsrs	r3, r3, #5
 8004234:	b2db      	uxtb	r3, r3
 8004236:	f043 0301 	orr.w	r3, r3, #1
 800423a:	b2db      	uxtb	r3, r3
 800423c:	2b01      	cmp	r3, #1
 800423e:	d102      	bne.n	8004246 <HAL_RCC_OscConfig+0xf8a>
 8004240:	4b47      	ldr	r3, [pc, #284]	; (8004360 <HAL_RCC_OscConfig+0x10a4>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	e027      	b.n	8004296 <HAL_RCC_OscConfig+0xfda>
 8004246:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800424a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800424e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004252:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004254:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004258:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	fa93 f2a3 	rbit	r2, r3
 8004262:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004266:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800426a:	601a      	str	r2, [r3, #0]
 800426c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004270:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004274:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004278:	601a      	str	r2, [r3, #0]
 800427a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800427e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	fa93 f2a3 	rbit	r2, r3
 8004288:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800428c:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8004290:	601a      	str	r2, [r3, #0]
 8004292:	4b33      	ldr	r3, [pc, #204]	; (8004360 <HAL_RCC_OscConfig+0x10a4>)
 8004294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004296:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800429a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800429e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80042a2:	6011      	str	r1, [r2, #0]
 80042a4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80042a8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80042ac:	6812      	ldr	r2, [r2, #0]
 80042ae:	fa92 f1a2 	rbit	r1, r2
 80042b2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80042b6:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80042ba:	6011      	str	r1, [r2, #0]
  return result;
 80042bc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80042c0:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80042c4:	6812      	ldr	r2, [r2, #0]
 80042c6:	fab2 f282 	clz	r2, r2
 80042ca:	b2d2      	uxtb	r2, r2
 80042cc:	f042 0220 	orr.w	r2, r2, #32
 80042d0:	b2d2      	uxtb	r2, r2
 80042d2:	f002 021f 	and.w	r2, r2, #31
 80042d6:	2101      	movs	r1, #1
 80042d8:	fa01 f202 	lsl.w	r2, r1, r2
 80042dc:	4013      	ands	r3, r2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d182      	bne.n	80041e8 <HAL_RCC_OscConfig+0xf2c>
 80042e2:	e037      	b.n	8004354 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042e8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d101      	bne.n	80042f8 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e02e      	b.n	8004356 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80042f8:	4b19      	ldr	r3, [pc, #100]	; (8004360 <HAL_RCC_OscConfig+0x10a4>)
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8004300:	4b17      	ldr	r3, [pc, #92]	; (8004360 <HAL_RCC_OscConfig+0x10a4>)
 8004302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004304:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004308:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800430c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8004310:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004314:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	69db      	ldr	r3, [r3, #28]
 800431c:	429a      	cmp	r2, r3
 800431e:	d117      	bne.n	8004350 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004320:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004324:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004328:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800432c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004334:	429a      	cmp	r2, r3
 8004336:	d10b      	bne.n	8004350 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8004338:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800433c:	f003 020f 	and.w	r2, r3, #15
 8004340:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004344:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800434c:	429a      	cmp	r2, r3
 800434e:	d001      	beq.n	8004354 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e000      	b.n	8004356 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}
 8004360:	40021000 	.word	0x40021000

08004364 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b09e      	sub	sp, #120	; 0x78
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800436e:	2300      	movs	r3, #0
 8004370:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d101      	bne.n	800437c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e162      	b.n	8004642 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800437c:	4b90      	ldr	r3, [pc, #576]	; (80045c0 <HAL_RCC_ClockConfig+0x25c>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0307 	and.w	r3, r3, #7
 8004384:	683a      	ldr	r2, [r7, #0]
 8004386:	429a      	cmp	r2, r3
 8004388:	d910      	bls.n	80043ac <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800438a:	4b8d      	ldr	r3, [pc, #564]	; (80045c0 <HAL_RCC_ClockConfig+0x25c>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f023 0207 	bic.w	r2, r3, #7
 8004392:	498b      	ldr	r1, [pc, #556]	; (80045c0 <HAL_RCC_ClockConfig+0x25c>)
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	4313      	orrs	r3, r2
 8004398:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800439a:	4b89      	ldr	r3, [pc, #548]	; (80045c0 <HAL_RCC_ClockConfig+0x25c>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0307 	and.w	r3, r3, #7
 80043a2:	683a      	ldr	r2, [r7, #0]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d001      	beq.n	80043ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e14a      	b.n	8004642 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0302 	and.w	r3, r3, #2
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d008      	beq.n	80043ca <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043b8:	4b82      	ldr	r3, [pc, #520]	; (80045c4 <HAL_RCC_ClockConfig+0x260>)
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	497f      	ldr	r1, [pc, #508]	; (80045c4 <HAL_RCC_ClockConfig+0x260>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	f000 80dc 	beq.w	8004590 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d13c      	bne.n	800445a <HAL_RCC_ClockConfig+0xf6>
 80043e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043e4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043e8:	fa93 f3a3 	rbit	r3, r3
 80043ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80043ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043f0:	fab3 f383 	clz	r3, r3
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	095b      	lsrs	r3, r3, #5
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	f043 0301 	orr.w	r3, r3, #1
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	2b01      	cmp	r3, #1
 8004402:	d102      	bne.n	800440a <HAL_RCC_ClockConfig+0xa6>
 8004404:	4b6f      	ldr	r3, [pc, #444]	; (80045c4 <HAL_RCC_ClockConfig+0x260>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	e00f      	b.n	800442a <HAL_RCC_ClockConfig+0xc6>
 800440a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800440e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004410:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004412:	fa93 f3a3 	rbit	r3, r3
 8004416:	667b      	str	r3, [r7, #100]	; 0x64
 8004418:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800441c:	663b      	str	r3, [r7, #96]	; 0x60
 800441e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004420:	fa93 f3a3 	rbit	r3, r3
 8004424:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004426:	4b67      	ldr	r3, [pc, #412]	; (80045c4 <HAL_RCC_ClockConfig+0x260>)
 8004428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800442e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004430:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004432:	fa92 f2a2 	rbit	r2, r2
 8004436:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004438:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800443a:	fab2 f282 	clz	r2, r2
 800443e:	b2d2      	uxtb	r2, r2
 8004440:	f042 0220 	orr.w	r2, r2, #32
 8004444:	b2d2      	uxtb	r2, r2
 8004446:	f002 021f 	and.w	r2, r2, #31
 800444a:	2101      	movs	r1, #1
 800444c:	fa01 f202 	lsl.w	r2, r1, r2
 8004450:	4013      	ands	r3, r2
 8004452:	2b00      	cmp	r3, #0
 8004454:	d17b      	bne.n	800454e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e0f3      	b.n	8004642 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	2b02      	cmp	r3, #2
 8004460:	d13c      	bne.n	80044dc <HAL_RCC_ClockConfig+0x178>
 8004462:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004466:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004468:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800446a:	fa93 f3a3 	rbit	r3, r3
 800446e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004470:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004472:	fab3 f383 	clz	r3, r3
 8004476:	b2db      	uxtb	r3, r3
 8004478:	095b      	lsrs	r3, r3, #5
 800447a:	b2db      	uxtb	r3, r3
 800447c:	f043 0301 	orr.w	r3, r3, #1
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b01      	cmp	r3, #1
 8004484:	d102      	bne.n	800448c <HAL_RCC_ClockConfig+0x128>
 8004486:	4b4f      	ldr	r3, [pc, #316]	; (80045c4 <HAL_RCC_ClockConfig+0x260>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	e00f      	b.n	80044ac <HAL_RCC_ClockConfig+0x148>
 800448c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004490:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004492:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004494:	fa93 f3a3 	rbit	r3, r3
 8004498:	647b      	str	r3, [r7, #68]	; 0x44
 800449a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800449e:	643b      	str	r3, [r7, #64]	; 0x40
 80044a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044a2:	fa93 f3a3 	rbit	r3, r3
 80044a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044a8:	4b46      	ldr	r3, [pc, #280]	; (80045c4 <HAL_RCC_ClockConfig+0x260>)
 80044aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80044b0:	63ba      	str	r2, [r7, #56]	; 0x38
 80044b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044b4:	fa92 f2a2 	rbit	r2, r2
 80044b8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80044ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044bc:	fab2 f282 	clz	r2, r2
 80044c0:	b2d2      	uxtb	r2, r2
 80044c2:	f042 0220 	orr.w	r2, r2, #32
 80044c6:	b2d2      	uxtb	r2, r2
 80044c8:	f002 021f 	and.w	r2, r2, #31
 80044cc:	2101      	movs	r1, #1
 80044ce:	fa01 f202 	lsl.w	r2, r1, r2
 80044d2:	4013      	ands	r3, r2
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d13a      	bne.n	800454e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e0b2      	b.n	8004642 <HAL_RCC_ClockConfig+0x2de>
 80044dc:	2302      	movs	r3, #2
 80044de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e2:	fa93 f3a3 	rbit	r3, r3
 80044e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80044e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044ea:	fab3 f383 	clz	r3, r3
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	095b      	lsrs	r3, r3, #5
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	f043 0301 	orr.w	r3, r3, #1
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d102      	bne.n	8004504 <HAL_RCC_ClockConfig+0x1a0>
 80044fe:	4b31      	ldr	r3, [pc, #196]	; (80045c4 <HAL_RCC_ClockConfig+0x260>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	e00d      	b.n	8004520 <HAL_RCC_ClockConfig+0x1bc>
 8004504:	2302      	movs	r3, #2
 8004506:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800450a:	fa93 f3a3 	rbit	r3, r3
 800450e:	627b      	str	r3, [r7, #36]	; 0x24
 8004510:	2302      	movs	r3, #2
 8004512:	623b      	str	r3, [r7, #32]
 8004514:	6a3b      	ldr	r3, [r7, #32]
 8004516:	fa93 f3a3 	rbit	r3, r3
 800451a:	61fb      	str	r3, [r7, #28]
 800451c:	4b29      	ldr	r3, [pc, #164]	; (80045c4 <HAL_RCC_ClockConfig+0x260>)
 800451e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004520:	2202      	movs	r2, #2
 8004522:	61ba      	str	r2, [r7, #24]
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	fa92 f2a2 	rbit	r2, r2
 800452a:	617a      	str	r2, [r7, #20]
  return result;
 800452c:	697a      	ldr	r2, [r7, #20]
 800452e:	fab2 f282 	clz	r2, r2
 8004532:	b2d2      	uxtb	r2, r2
 8004534:	f042 0220 	orr.w	r2, r2, #32
 8004538:	b2d2      	uxtb	r2, r2
 800453a:	f002 021f 	and.w	r2, r2, #31
 800453e:	2101      	movs	r1, #1
 8004540:	fa01 f202 	lsl.w	r2, r1, r2
 8004544:	4013      	ands	r3, r2
 8004546:	2b00      	cmp	r3, #0
 8004548:	d101      	bne.n	800454e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e079      	b.n	8004642 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800454e:	4b1d      	ldr	r3, [pc, #116]	; (80045c4 <HAL_RCC_ClockConfig+0x260>)
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f023 0203 	bic.w	r2, r3, #3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	491a      	ldr	r1, [pc, #104]	; (80045c4 <HAL_RCC_ClockConfig+0x260>)
 800455c:	4313      	orrs	r3, r2
 800455e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004560:	f7fc fe92 	bl	8001288 <HAL_GetTick>
 8004564:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004566:	e00a      	b.n	800457e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004568:	f7fc fe8e 	bl	8001288 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	f241 3288 	movw	r2, #5000	; 0x1388
 8004576:	4293      	cmp	r3, r2
 8004578:	d901      	bls.n	800457e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e061      	b.n	8004642 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800457e:	4b11      	ldr	r3, [pc, #68]	; (80045c4 <HAL_RCC_ClockConfig+0x260>)
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f003 020c 	and.w	r2, r3, #12
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	429a      	cmp	r2, r3
 800458e:	d1eb      	bne.n	8004568 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004590:	4b0b      	ldr	r3, [pc, #44]	; (80045c0 <HAL_RCC_ClockConfig+0x25c>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0307 	and.w	r3, r3, #7
 8004598:	683a      	ldr	r2, [r7, #0]
 800459a:	429a      	cmp	r2, r3
 800459c:	d214      	bcs.n	80045c8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800459e:	4b08      	ldr	r3, [pc, #32]	; (80045c0 <HAL_RCC_ClockConfig+0x25c>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f023 0207 	bic.w	r2, r3, #7
 80045a6:	4906      	ldr	r1, [pc, #24]	; (80045c0 <HAL_RCC_ClockConfig+0x25c>)
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ae:	4b04      	ldr	r3, [pc, #16]	; (80045c0 <HAL_RCC_ClockConfig+0x25c>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0307 	and.w	r3, r3, #7
 80045b6:	683a      	ldr	r2, [r7, #0]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d005      	beq.n	80045c8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e040      	b.n	8004642 <HAL_RCC_ClockConfig+0x2de>
 80045c0:	40022000 	.word	0x40022000
 80045c4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0304 	and.w	r3, r3, #4
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d008      	beq.n	80045e6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045d4:	4b1d      	ldr	r3, [pc, #116]	; (800464c <HAL_RCC_ClockConfig+0x2e8>)
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	491a      	ldr	r1, [pc, #104]	; (800464c <HAL_RCC_ClockConfig+0x2e8>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0308 	and.w	r3, r3, #8
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d009      	beq.n	8004606 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045f2:	4b16      	ldr	r3, [pc, #88]	; (800464c <HAL_RCC_ClockConfig+0x2e8>)
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	00db      	lsls	r3, r3, #3
 8004600:	4912      	ldr	r1, [pc, #72]	; (800464c <HAL_RCC_ClockConfig+0x2e8>)
 8004602:	4313      	orrs	r3, r2
 8004604:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004606:	f000 f829 	bl	800465c <HAL_RCC_GetSysClockFreq>
 800460a:	4601      	mov	r1, r0
 800460c:	4b0f      	ldr	r3, [pc, #60]	; (800464c <HAL_RCC_ClockConfig+0x2e8>)
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004614:	22f0      	movs	r2, #240	; 0xf0
 8004616:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004618:	693a      	ldr	r2, [r7, #16]
 800461a:	fa92 f2a2 	rbit	r2, r2
 800461e:	60fa      	str	r2, [r7, #12]
  return result;
 8004620:	68fa      	ldr	r2, [r7, #12]
 8004622:	fab2 f282 	clz	r2, r2
 8004626:	b2d2      	uxtb	r2, r2
 8004628:	40d3      	lsrs	r3, r2
 800462a:	4a09      	ldr	r2, [pc, #36]	; (8004650 <HAL_RCC_ClockConfig+0x2ec>)
 800462c:	5cd3      	ldrb	r3, [r2, r3]
 800462e:	fa21 f303 	lsr.w	r3, r1, r3
 8004632:	4a08      	ldr	r2, [pc, #32]	; (8004654 <HAL_RCC_ClockConfig+0x2f0>)
 8004634:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004636:	4b08      	ldr	r3, [pc, #32]	; (8004658 <HAL_RCC_ClockConfig+0x2f4>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4618      	mov	r0, r3
 800463c:	f7fc fde0 	bl	8001200 <HAL_InitTick>
  
  return HAL_OK;
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	3778      	adds	r7, #120	; 0x78
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	40021000 	.word	0x40021000
 8004650:	08005d50 	.word	0x08005d50
 8004654:	20000004 	.word	0x20000004
 8004658:	20000008 	.word	0x20000008

0800465c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800465c:	b480      	push	{r7}
 800465e:	b08b      	sub	sp, #44	; 0x2c
 8004660:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004662:	2300      	movs	r3, #0
 8004664:	61fb      	str	r3, [r7, #28]
 8004666:	2300      	movs	r3, #0
 8004668:	61bb      	str	r3, [r7, #24]
 800466a:	2300      	movs	r3, #0
 800466c:	627b      	str	r3, [r7, #36]	; 0x24
 800466e:	2300      	movs	r3, #0
 8004670:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004672:	2300      	movs	r3, #0
 8004674:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004676:	4b2a      	ldr	r3, [pc, #168]	; (8004720 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	f003 030c 	and.w	r3, r3, #12
 8004682:	2b04      	cmp	r3, #4
 8004684:	d002      	beq.n	800468c <HAL_RCC_GetSysClockFreq+0x30>
 8004686:	2b08      	cmp	r3, #8
 8004688:	d003      	beq.n	8004692 <HAL_RCC_GetSysClockFreq+0x36>
 800468a:	e03f      	b.n	800470c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800468c:	4b25      	ldr	r3, [pc, #148]	; (8004724 <HAL_RCC_GetSysClockFreq+0xc8>)
 800468e:	623b      	str	r3, [r7, #32]
      break;
 8004690:	e03f      	b.n	8004712 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004698:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800469c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800469e:	68ba      	ldr	r2, [r7, #8]
 80046a0:	fa92 f2a2 	rbit	r2, r2
 80046a4:	607a      	str	r2, [r7, #4]
  return result;
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	fab2 f282 	clz	r2, r2
 80046ac:	b2d2      	uxtb	r2, r2
 80046ae:	40d3      	lsrs	r3, r2
 80046b0:	4a1d      	ldr	r2, [pc, #116]	; (8004728 <HAL_RCC_GetSysClockFreq+0xcc>)
 80046b2:	5cd3      	ldrb	r3, [r2, r3]
 80046b4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80046b6:	4b1a      	ldr	r3, [pc, #104]	; (8004720 <HAL_RCC_GetSysClockFreq+0xc4>)
 80046b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ba:	f003 030f 	and.w	r3, r3, #15
 80046be:	220f      	movs	r2, #15
 80046c0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	fa92 f2a2 	rbit	r2, r2
 80046c8:	60fa      	str	r2, [r7, #12]
  return result;
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	fab2 f282 	clz	r2, r2
 80046d0:	b2d2      	uxtb	r2, r2
 80046d2:	40d3      	lsrs	r3, r2
 80046d4:	4a15      	ldr	r2, [pc, #84]	; (800472c <HAL_RCC_GetSysClockFreq+0xd0>)
 80046d6:	5cd3      	ldrb	r3, [r2, r3]
 80046d8:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d008      	beq.n	80046f6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80046e4:	4a0f      	ldr	r2, [pc, #60]	; (8004724 <HAL_RCC_GetSysClockFreq+0xc8>)
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	fb02 f303 	mul.w	r3, r2, r3
 80046f2:	627b      	str	r3, [r7, #36]	; 0x24
 80046f4:	e007      	b.n	8004706 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80046f6:	4a0b      	ldr	r2, [pc, #44]	; (8004724 <HAL_RCC_GetSysClockFreq+0xc8>)
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	fbb2 f2f3 	udiv	r2, r2, r3
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	fb02 f303 	mul.w	r3, r2, r3
 8004704:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004708:	623b      	str	r3, [r7, #32]
      break;
 800470a:	e002      	b.n	8004712 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800470c:	4b05      	ldr	r3, [pc, #20]	; (8004724 <HAL_RCC_GetSysClockFreq+0xc8>)
 800470e:	623b      	str	r3, [r7, #32]
      break;
 8004710:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004712:	6a3b      	ldr	r3, [r7, #32]
}
 8004714:	4618      	mov	r0, r3
 8004716:	372c      	adds	r7, #44	; 0x2c
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr
 8004720:	40021000 	.word	0x40021000
 8004724:	007a1200 	.word	0x007a1200
 8004728:	08005d60 	.word	0x08005d60
 800472c:	08005d70 	.word	0x08005d70

08004730 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b092      	sub	sp, #72	; 0x48
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004738:	2300      	movs	r3, #0
 800473a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800473c:	2300      	movs	r3, #0
 800473e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004740:	2300      	movs	r3, #0
 8004742:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800474e:	2b00      	cmp	r3, #0
 8004750:	f000 80d4 	beq.w	80048fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004754:	4b4e      	ldr	r3, [pc, #312]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004756:	69db      	ldr	r3, [r3, #28]
 8004758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d10e      	bne.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004760:	4b4b      	ldr	r3, [pc, #300]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004762:	69db      	ldr	r3, [r3, #28]
 8004764:	4a4a      	ldr	r2, [pc, #296]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004766:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800476a:	61d3      	str	r3, [r2, #28]
 800476c:	4b48      	ldr	r3, [pc, #288]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800476e:	69db      	ldr	r3, [r3, #28]
 8004770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004774:	60bb      	str	r3, [r7, #8]
 8004776:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004778:	2301      	movs	r3, #1
 800477a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800477e:	4b45      	ldr	r3, [pc, #276]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004786:	2b00      	cmp	r3, #0
 8004788:	d118      	bne.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800478a:	4b42      	ldr	r3, [pc, #264]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a41      	ldr	r2, [pc, #260]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004790:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004794:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004796:	f7fc fd77 	bl	8001288 <HAL_GetTick>
 800479a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800479c:	e008      	b.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800479e:	f7fc fd73 	bl	8001288 <HAL_GetTick>
 80047a2:	4602      	mov	r2, r0
 80047a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	2b64      	cmp	r3, #100	; 0x64
 80047aa:	d901      	bls.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e1d6      	b.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047b0:	4b38      	ldr	r3, [pc, #224]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d0f0      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047bc:	4b34      	ldr	r3, [pc, #208]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047be:	6a1b      	ldr	r3, [r3, #32]
 80047c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f000 8084 	beq.w	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80047d8:	429a      	cmp	r2, r3
 80047da:	d07c      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047dc:	4b2c      	ldr	r3, [pc, #176]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047de:	6a1b      	ldr	r3, [r3, #32]
 80047e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80047ea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ee:	fa93 f3a3 	rbit	r3, r3
 80047f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80047f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047f6:	fab3 f383 	clz	r3, r3
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	461a      	mov	r2, r3
 80047fe:	4b26      	ldr	r3, [pc, #152]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004800:	4413      	add	r3, r2
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	461a      	mov	r2, r3
 8004806:	2301      	movs	r3, #1
 8004808:	6013      	str	r3, [r2, #0]
 800480a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800480e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004812:	fa93 f3a3 	rbit	r3, r3
 8004816:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800481a:	fab3 f383 	clz	r3, r3
 800481e:	b2db      	uxtb	r3, r3
 8004820:	461a      	mov	r2, r3
 8004822:	4b1d      	ldr	r3, [pc, #116]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004824:	4413      	add	r3, r2
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	461a      	mov	r2, r3
 800482a:	2300      	movs	r3, #0
 800482c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800482e:	4a18      	ldr	r2, [pc, #96]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004832:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004834:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004836:	f003 0301 	and.w	r3, r3, #1
 800483a:	2b00      	cmp	r3, #0
 800483c:	d04b      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800483e:	f7fc fd23 	bl	8001288 <HAL_GetTick>
 8004842:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004844:	e00a      	b.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004846:	f7fc fd1f 	bl	8001288 <HAL_GetTick>
 800484a:	4602      	mov	r2, r0
 800484c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	f241 3288 	movw	r2, #5000	; 0x1388
 8004854:	4293      	cmp	r3, r2
 8004856:	d901      	bls.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004858:	2303      	movs	r3, #3
 800485a:	e180      	b.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800485c:	2302      	movs	r3, #2
 800485e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004862:	fa93 f3a3 	rbit	r3, r3
 8004866:	627b      	str	r3, [r7, #36]	; 0x24
 8004868:	2302      	movs	r3, #2
 800486a:	623b      	str	r3, [r7, #32]
 800486c:	6a3b      	ldr	r3, [r7, #32]
 800486e:	fa93 f3a3 	rbit	r3, r3
 8004872:	61fb      	str	r3, [r7, #28]
  return result;
 8004874:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004876:	fab3 f383 	clz	r3, r3
 800487a:	b2db      	uxtb	r3, r3
 800487c:	095b      	lsrs	r3, r3, #5
 800487e:	b2db      	uxtb	r3, r3
 8004880:	f043 0302 	orr.w	r3, r3, #2
 8004884:	b2db      	uxtb	r3, r3
 8004886:	2b02      	cmp	r3, #2
 8004888:	d108      	bne.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800488a:	4b01      	ldr	r3, [pc, #4]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800488c:	6a1b      	ldr	r3, [r3, #32]
 800488e:	e00d      	b.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004890:	40021000 	.word	0x40021000
 8004894:	40007000 	.word	0x40007000
 8004898:	10908100 	.word	0x10908100
 800489c:	2302      	movs	r3, #2
 800489e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	fa93 f3a3 	rbit	r3, r3
 80048a6:	617b      	str	r3, [r7, #20]
 80048a8:	4b9a      	ldr	r3, [pc, #616]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ac:	2202      	movs	r2, #2
 80048ae:	613a      	str	r2, [r7, #16]
 80048b0:	693a      	ldr	r2, [r7, #16]
 80048b2:	fa92 f2a2 	rbit	r2, r2
 80048b6:	60fa      	str	r2, [r7, #12]
  return result;
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	fab2 f282 	clz	r2, r2
 80048be:	b2d2      	uxtb	r2, r2
 80048c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048c4:	b2d2      	uxtb	r2, r2
 80048c6:	f002 021f 	and.w	r2, r2, #31
 80048ca:	2101      	movs	r1, #1
 80048cc:	fa01 f202 	lsl.w	r2, r1, r2
 80048d0:	4013      	ands	r3, r2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d0b7      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80048d6:	4b8f      	ldr	r3, [pc, #572]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048d8:	6a1b      	ldr	r3, [r3, #32]
 80048da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	498c      	ldr	r1, [pc, #560]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80048e8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d105      	bne.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048f0:	4b88      	ldr	r3, [pc, #544]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048f2:	69db      	ldr	r3, [r3, #28]
 80048f4:	4a87      	ldr	r2, [pc, #540]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048fa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0301 	and.w	r3, r3, #1
 8004904:	2b00      	cmp	r3, #0
 8004906:	d008      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004908:	4b82      	ldr	r3, [pc, #520]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800490a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490c:	f023 0203 	bic.w	r2, r3, #3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	497f      	ldr	r1, [pc, #508]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004916:	4313      	orrs	r3, r2
 8004918:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0302 	and.w	r3, r3, #2
 8004922:	2b00      	cmp	r3, #0
 8004924:	d008      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004926:	4b7b      	ldr	r3, [pc, #492]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	4978      	ldr	r1, [pc, #480]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004934:	4313      	orrs	r3, r2
 8004936:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0304 	and.w	r3, r3, #4
 8004940:	2b00      	cmp	r3, #0
 8004942:	d008      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004944:	4b73      	ldr	r3, [pc, #460]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004948:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	4970      	ldr	r1, [pc, #448]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004952:	4313      	orrs	r3, r2
 8004954:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0320 	and.w	r3, r3, #32
 800495e:	2b00      	cmp	r3, #0
 8004960:	d008      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004962:	4b6c      	ldr	r3, [pc, #432]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004966:	f023 0210 	bic.w	r2, r3, #16
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	69db      	ldr	r3, [r3, #28]
 800496e:	4969      	ldr	r1, [pc, #420]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004970:	4313      	orrs	r3, r2
 8004972:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d008      	beq.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004980:	4b64      	ldr	r3, [pc, #400]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800498c:	4961      	ldr	r1, [pc, #388]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800498e:	4313      	orrs	r3, r2
 8004990:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800499a:	2b00      	cmp	r3, #0
 800499c:	d008      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800499e:	4b5d      	ldr	r3, [pc, #372]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a2:	f023 0220 	bic.w	r2, r3, #32
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a1b      	ldr	r3, [r3, #32]
 80049aa:	495a      	ldr	r1, [pc, #360]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049ac:	4313      	orrs	r3, r2
 80049ae:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d008      	beq.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80049bc:	4b55      	ldr	r3, [pc, #340]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c8:	4952      	ldr	r1, [pc, #328]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049ca:	4313      	orrs	r3, r2
 80049cc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0308 	and.w	r3, r3, #8
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d008      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80049da:	4b4e      	ldr	r3, [pc, #312]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	695b      	ldr	r3, [r3, #20]
 80049e6:	494b      	ldr	r1, [pc, #300]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0310 	and.w	r3, r3, #16
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d008      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80049f8:	4b46      	ldr	r3, [pc, #280]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049fc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	699b      	ldr	r3, [r3, #24]
 8004a04:	4943      	ldr	r1, [pc, #268]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d008      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004a16:	4b3f      	ldr	r3, [pc, #252]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a22:	493c      	ldr	r1, [pc, #240]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d008      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004a34:	4b37      	ldr	r3, [pc, #220]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a38:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a40:	4934      	ldr	r1, [pc, #208]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d008      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004a52:	4b30      	ldr	r3, [pc, #192]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a56:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a5e:	492d      	ldr	r1, [pc, #180]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d008      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004a70:	4b28      	ldr	r3, [pc, #160]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a74:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a7c:	4925      	ldr	r1, [pc, #148]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d008      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004a8e:	4b21      	ldr	r3, [pc, #132]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a92:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9a:	491e      	ldr	r1, [pc, #120]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d008      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004aac:	4b19      	ldr	r3, [pc, #100]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab8:	4916      	ldr	r1, [pc, #88]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d008      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8004aca:	4b12      	ldr	r3, [pc, #72]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ace:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ad6:	490f      	ldr	r1, [pc, #60]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d008      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004ae8:	4b0a      	ldr	r3, [pc, #40]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aec:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004af4:	4907      	ldr	r1, [pc, #28]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00c      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004b06:	4b03      	ldr	r3, [pc, #12]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b0a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	e002      	b.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004b12:	bf00      	nop
 8004b14:	40021000 	.word	0x40021000
 8004b18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b1a:	4913      	ldr	r1, [pc, #76]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d008      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004b2c:	4b0e      	ldr	r3, [pc, #56]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b30:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b38:	490b      	ldr	r1, [pc, #44]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d008      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8004b4a:	4b07      	ldr	r3, [pc, #28]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b56:	4904      	ldr	r1, [pc, #16]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3748      	adds	r7, #72	; 0x48
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	40021000 	.word	0x40021000

08004b6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b082      	sub	sp, #8
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d101      	bne.n	8004b7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e049      	b.n	8004c12 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d106      	bne.n	8004b98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f7fc fa5e 	bl	8001054 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2202      	movs	r2, #2
 8004b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	3304      	adds	r3, #4
 8004ba8:	4619      	mov	r1, r3
 8004baa:	4610      	mov	r0, r2
 8004bac:	f000 fb80 	bl	80052b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3708      	adds	r7, #8
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}

08004c1a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c1a:	b580      	push	{r7, lr}
 8004c1c:	b082      	sub	sp, #8
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d101      	bne.n	8004c2c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e049      	b.n	8004cc0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d106      	bne.n	8004c46 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f000 f841 	bl	8004cc8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2202      	movs	r2, #2
 8004c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	3304      	adds	r3, #4
 8004c56:	4619      	mov	r1, r3
 8004c58:	4610      	mov	r0, r2
 8004c5a:	f000 fb29 	bl	80052b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2201      	movs	r2, #1
 8004c62:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2201      	movs	r2, #1
 8004c72:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2201      	movs	r2, #1
 8004c82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2201      	movs	r2, #1
 8004c92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3708      	adds	r7, #8
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004cd0:	bf00      	nop
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d109      	bne.n	8004d00 <HAL_TIM_PWM_Start+0x24>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	bf14      	ite	ne
 8004cf8:	2301      	movne	r3, #1
 8004cfa:	2300      	moveq	r3, #0
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	e03c      	b.n	8004d7a <HAL_TIM_PWM_Start+0x9e>
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	2b04      	cmp	r3, #4
 8004d04:	d109      	bne.n	8004d1a <HAL_TIM_PWM_Start+0x3e>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	bf14      	ite	ne
 8004d12:	2301      	movne	r3, #1
 8004d14:	2300      	moveq	r3, #0
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	e02f      	b.n	8004d7a <HAL_TIM_PWM_Start+0x9e>
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	2b08      	cmp	r3, #8
 8004d1e:	d109      	bne.n	8004d34 <HAL_TIM_PWM_Start+0x58>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	bf14      	ite	ne
 8004d2c:	2301      	movne	r3, #1
 8004d2e:	2300      	moveq	r3, #0
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	e022      	b.n	8004d7a <HAL_TIM_PWM_Start+0x9e>
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	2b0c      	cmp	r3, #12
 8004d38:	d109      	bne.n	8004d4e <HAL_TIM_PWM_Start+0x72>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	bf14      	ite	ne
 8004d46:	2301      	movne	r3, #1
 8004d48:	2300      	moveq	r3, #0
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	e015      	b.n	8004d7a <HAL_TIM_PWM_Start+0x9e>
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	2b10      	cmp	r3, #16
 8004d52:	d109      	bne.n	8004d68 <HAL_TIM_PWM_Start+0x8c>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	bf14      	ite	ne
 8004d60:	2301      	movne	r3, #1
 8004d62:	2300      	moveq	r3, #0
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	e008      	b.n	8004d7a <HAL_TIM_PWM_Start+0x9e>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	bf14      	ite	ne
 8004d74:	2301      	movne	r3, #1
 8004d76:	2300      	moveq	r3, #0
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d001      	beq.n	8004d82 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e0a1      	b.n	8004ec6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d104      	bne.n	8004d92 <HAL_TIM_PWM_Start+0xb6>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2202      	movs	r2, #2
 8004d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d90:	e023      	b.n	8004dda <HAL_TIM_PWM_Start+0xfe>
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	2b04      	cmp	r3, #4
 8004d96:	d104      	bne.n	8004da2 <HAL_TIM_PWM_Start+0xc6>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2202      	movs	r2, #2
 8004d9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004da0:	e01b      	b.n	8004dda <HAL_TIM_PWM_Start+0xfe>
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	2b08      	cmp	r3, #8
 8004da6:	d104      	bne.n	8004db2 <HAL_TIM_PWM_Start+0xd6>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2202      	movs	r2, #2
 8004dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004db0:	e013      	b.n	8004dda <HAL_TIM_PWM_Start+0xfe>
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	2b0c      	cmp	r3, #12
 8004db6:	d104      	bne.n	8004dc2 <HAL_TIM_PWM_Start+0xe6>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2202      	movs	r2, #2
 8004dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004dc0:	e00b      	b.n	8004dda <HAL_TIM_PWM_Start+0xfe>
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	2b10      	cmp	r3, #16
 8004dc6:	d104      	bne.n	8004dd2 <HAL_TIM_PWM_Start+0xf6>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2202      	movs	r2, #2
 8004dcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004dd0:	e003      	b.n	8004dda <HAL_TIM_PWM_Start+0xfe>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2202      	movs	r2, #2
 8004dd6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2201      	movs	r2, #1
 8004de0:	6839      	ldr	r1, [r7, #0]
 8004de2:	4618      	mov	r0, r3
 8004de4:	f000 fea2 	bl	8005b2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a38      	ldr	r2, [pc, #224]	; (8004ed0 <HAL_TIM_PWM_Start+0x1f4>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d018      	beq.n	8004e24 <HAL_TIM_PWM_Start+0x148>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a37      	ldr	r2, [pc, #220]	; (8004ed4 <HAL_TIM_PWM_Start+0x1f8>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d013      	beq.n	8004e24 <HAL_TIM_PWM_Start+0x148>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a35      	ldr	r2, [pc, #212]	; (8004ed8 <HAL_TIM_PWM_Start+0x1fc>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d00e      	beq.n	8004e24 <HAL_TIM_PWM_Start+0x148>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a34      	ldr	r2, [pc, #208]	; (8004edc <HAL_TIM_PWM_Start+0x200>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d009      	beq.n	8004e24 <HAL_TIM_PWM_Start+0x148>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a32      	ldr	r2, [pc, #200]	; (8004ee0 <HAL_TIM_PWM_Start+0x204>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d004      	beq.n	8004e24 <HAL_TIM_PWM_Start+0x148>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a31      	ldr	r2, [pc, #196]	; (8004ee4 <HAL_TIM_PWM_Start+0x208>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d101      	bne.n	8004e28 <HAL_TIM_PWM_Start+0x14c>
 8004e24:	2301      	movs	r3, #1
 8004e26:	e000      	b.n	8004e2a <HAL_TIM_PWM_Start+0x14e>
 8004e28:	2300      	movs	r3, #0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d007      	beq.n	8004e3e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e3c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a23      	ldr	r2, [pc, #140]	; (8004ed0 <HAL_TIM_PWM_Start+0x1f4>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d01d      	beq.n	8004e84 <HAL_TIM_PWM_Start+0x1a8>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e50:	d018      	beq.n	8004e84 <HAL_TIM_PWM_Start+0x1a8>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a24      	ldr	r2, [pc, #144]	; (8004ee8 <HAL_TIM_PWM_Start+0x20c>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d013      	beq.n	8004e84 <HAL_TIM_PWM_Start+0x1a8>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a22      	ldr	r2, [pc, #136]	; (8004eec <HAL_TIM_PWM_Start+0x210>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d00e      	beq.n	8004e84 <HAL_TIM_PWM_Start+0x1a8>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a1a      	ldr	r2, [pc, #104]	; (8004ed4 <HAL_TIM_PWM_Start+0x1f8>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d009      	beq.n	8004e84 <HAL_TIM_PWM_Start+0x1a8>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a18      	ldr	r2, [pc, #96]	; (8004ed8 <HAL_TIM_PWM_Start+0x1fc>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d004      	beq.n	8004e84 <HAL_TIM_PWM_Start+0x1a8>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a19      	ldr	r2, [pc, #100]	; (8004ee4 <HAL_TIM_PWM_Start+0x208>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d115      	bne.n	8004eb0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	689a      	ldr	r2, [r3, #8]
 8004e8a:	4b19      	ldr	r3, [pc, #100]	; (8004ef0 <HAL_TIM_PWM_Start+0x214>)
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2b06      	cmp	r3, #6
 8004e94:	d015      	beq.n	8004ec2 <HAL_TIM_PWM_Start+0x1e6>
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e9c:	d011      	beq.n	8004ec2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f042 0201 	orr.w	r2, r2, #1
 8004eac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eae:	e008      	b.n	8004ec2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f042 0201 	orr.w	r2, r2, #1
 8004ebe:	601a      	str	r2, [r3, #0]
 8004ec0:	e000      	b.n	8004ec4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ec2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3710      	adds	r7, #16
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	40012c00 	.word	0x40012c00
 8004ed4:	40013400 	.word	0x40013400
 8004ed8:	40014000 	.word	0x40014000
 8004edc:	40014400 	.word	0x40014400
 8004ee0:	40014800 	.word	0x40014800
 8004ee4:	40015000 	.word	0x40015000
 8004ee8:	40000400 	.word	0x40000400
 8004eec:	40000800 	.word	0x40000800
 8004ef0:	00010007 	.word	0x00010007

08004ef4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b086      	sub	sp, #24
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f00:	2300      	movs	r3, #0
 8004f02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d101      	bne.n	8004f12 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f0e:	2302      	movs	r3, #2
 8004f10:	e0ff      	b.n	8005112 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2201      	movs	r2, #1
 8004f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2b14      	cmp	r3, #20
 8004f1e:	f200 80f0 	bhi.w	8005102 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004f22:	a201      	add	r2, pc, #4	; (adr r2, 8004f28 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f28:	08004f7d 	.word	0x08004f7d
 8004f2c:	08005103 	.word	0x08005103
 8004f30:	08005103 	.word	0x08005103
 8004f34:	08005103 	.word	0x08005103
 8004f38:	08004fbd 	.word	0x08004fbd
 8004f3c:	08005103 	.word	0x08005103
 8004f40:	08005103 	.word	0x08005103
 8004f44:	08005103 	.word	0x08005103
 8004f48:	08004fff 	.word	0x08004fff
 8004f4c:	08005103 	.word	0x08005103
 8004f50:	08005103 	.word	0x08005103
 8004f54:	08005103 	.word	0x08005103
 8004f58:	0800503f 	.word	0x0800503f
 8004f5c:	08005103 	.word	0x08005103
 8004f60:	08005103 	.word	0x08005103
 8004f64:	08005103 	.word	0x08005103
 8004f68:	08005081 	.word	0x08005081
 8004f6c:	08005103 	.word	0x08005103
 8004f70:	08005103 	.word	0x08005103
 8004f74:	08005103 	.word	0x08005103
 8004f78:	080050c1 	.word	0x080050c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68b9      	ldr	r1, [r7, #8]
 8004f82:	4618      	mov	r0, r3
 8004f84:	f000 fa32 	bl	80053ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	699a      	ldr	r2, [r3, #24]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f042 0208 	orr.w	r2, r2, #8
 8004f96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	699a      	ldr	r2, [r3, #24]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f022 0204 	bic.w	r2, r2, #4
 8004fa6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	6999      	ldr	r1, [r3, #24]
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	691a      	ldr	r2, [r3, #16]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	430a      	orrs	r2, r1
 8004fb8:	619a      	str	r2, [r3, #24]
      break;
 8004fba:	e0a5      	b.n	8005108 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68b9      	ldr	r1, [r7, #8]
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f000 faac 	bl	8005520 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	699a      	ldr	r2, [r3, #24]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	699a      	ldr	r2, [r3, #24]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fe6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	6999      	ldr	r1, [r3, #24]
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	021a      	lsls	r2, r3, #8
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	430a      	orrs	r2, r1
 8004ffa:	619a      	str	r2, [r3, #24]
      break;
 8004ffc:	e084      	b.n	8005108 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68b9      	ldr	r1, [r7, #8]
 8005004:	4618      	mov	r0, r3
 8005006:	f000 fb1f 	bl	8005648 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	69da      	ldr	r2, [r3, #28]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f042 0208 	orr.w	r2, r2, #8
 8005018:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	69da      	ldr	r2, [r3, #28]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f022 0204 	bic.w	r2, r2, #4
 8005028:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	69d9      	ldr	r1, [r3, #28]
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	691a      	ldr	r2, [r3, #16]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	430a      	orrs	r2, r1
 800503a:	61da      	str	r2, [r3, #28]
      break;
 800503c:	e064      	b.n	8005108 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68b9      	ldr	r1, [r7, #8]
 8005044:	4618      	mov	r0, r3
 8005046:	f000 fb91 	bl	800576c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	69da      	ldr	r2, [r3, #28]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005058:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	69da      	ldr	r2, [r3, #28]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005068:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	69d9      	ldr	r1, [r3, #28]
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	691b      	ldr	r3, [r3, #16]
 8005074:	021a      	lsls	r2, r3, #8
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	430a      	orrs	r2, r1
 800507c:	61da      	str	r2, [r3, #28]
      break;
 800507e:	e043      	b.n	8005108 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68b9      	ldr	r1, [r7, #8]
 8005086:	4618      	mov	r0, r3
 8005088:	f000 fbe0 	bl	800584c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f042 0208 	orr.w	r2, r2, #8
 800509a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f022 0204 	bic.w	r2, r2, #4
 80050aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	691a      	ldr	r2, [r3, #16]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	430a      	orrs	r2, r1
 80050bc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80050be:	e023      	b.n	8005108 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68b9      	ldr	r1, [r7, #8]
 80050c6:	4618      	mov	r0, r3
 80050c8:	f000 fc2a 	bl	8005920 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	021a      	lsls	r2, r3, #8
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	430a      	orrs	r2, r1
 80050fe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005100:	e002      	b.n	8005108 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	75fb      	strb	r3, [r7, #23]
      break;
 8005106:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2200      	movs	r2, #0
 800510c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005110:	7dfb      	ldrb	r3, [r7, #23]
}
 8005112:	4618      	mov	r0, r3
 8005114:	3718      	adds	r7, #24
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop

0800511c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005126:	2300      	movs	r3, #0
 8005128:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005130:	2b01      	cmp	r3, #1
 8005132:	d101      	bne.n	8005138 <HAL_TIM_ConfigClockSource+0x1c>
 8005134:	2302      	movs	r3, #2
 8005136:	e0b6      	b.n	80052a6 <HAL_TIM_ConfigClockSource+0x18a>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2202      	movs	r2, #2
 8005144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005156:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800515a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005162:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	68ba      	ldr	r2, [r7, #8]
 800516a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005174:	d03e      	beq.n	80051f4 <HAL_TIM_ConfigClockSource+0xd8>
 8005176:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800517a:	f200 8087 	bhi.w	800528c <HAL_TIM_ConfigClockSource+0x170>
 800517e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005182:	f000 8086 	beq.w	8005292 <HAL_TIM_ConfigClockSource+0x176>
 8005186:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800518a:	d87f      	bhi.n	800528c <HAL_TIM_ConfigClockSource+0x170>
 800518c:	2b70      	cmp	r3, #112	; 0x70
 800518e:	d01a      	beq.n	80051c6 <HAL_TIM_ConfigClockSource+0xaa>
 8005190:	2b70      	cmp	r3, #112	; 0x70
 8005192:	d87b      	bhi.n	800528c <HAL_TIM_ConfigClockSource+0x170>
 8005194:	2b60      	cmp	r3, #96	; 0x60
 8005196:	d050      	beq.n	800523a <HAL_TIM_ConfigClockSource+0x11e>
 8005198:	2b60      	cmp	r3, #96	; 0x60
 800519a:	d877      	bhi.n	800528c <HAL_TIM_ConfigClockSource+0x170>
 800519c:	2b50      	cmp	r3, #80	; 0x50
 800519e:	d03c      	beq.n	800521a <HAL_TIM_ConfigClockSource+0xfe>
 80051a0:	2b50      	cmp	r3, #80	; 0x50
 80051a2:	d873      	bhi.n	800528c <HAL_TIM_ConfigClockSource+0x170>
 80051a4:	2b40      	cmp	r3, #64	; 0x40
 80051a6:	d058      	beq.n	800525a <HAL_TIM_ConfigClockSource+0x13e>
 80051a8:	2b40      	cmp	r3, #64	; 0x40
 80051aa:	d86f      	bhi.n	800528c <HAL_TIM_ConfigClockSource+0x170>
 80051ac:	2b30      	cmp	r3, #48	; 0x30
 80051ae:	d064      	beq.n	800527a <HAL_TIM_ConfigClockSource+0x15e>
 80051b0:	2b30      	cmp	r3, #48	; 0x30
 80051b2:	d86b      	bhi.n	800528c <HAL_TIM_ConfigClockSource+0x170>
 80051b4:	2b20      	cmp	r3, #32
 80051b6:	d060      	beq.n	800527a <HAL_TIM_ConfigClockSource+0x15e>
 80051b8:	2b20      	cmp	r3, #32
 80051ba:	d867      	bhi.n	800528c <HAL_TIM_ConfigClockSource+0x170>
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d05c      	beq.n	800527a <HAL_TIM_ConfigClockSource+0x15e>
 80051c0:	2b10      	cmp	r3, #16
 80051c2:	d05a      	beq.n	800527a <HAL_TIM_ConfigClockSource+0x15e>
 80051c4:	e062      	b.n	800528c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80051d6:	f000 fc89 	bl	8005aec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80051e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68ba      	ldr	r2, [r7, #8]
 80051f0:	609a      	str	r2, [r3, #8]
      break;
 80051f2:	e04f      	b.n	8005294 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005204:	f000 fc72 	bl	8005aec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	689a      	ldr	r2, [r3, #8]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005216:	609a      	str	r2, [r3, #8]
      break;
 8005218:	e03c      	b.n	8005294 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005226:	461a      	mov	r2, r3
 8005228:	f000 fbe6 	bl	80059f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2150      	movs	r1, #80	; 0x50
 8005232:	4618      	mov	r0, r3
 8005234:	f000 fc3f 	bl	8005ab6 <TIM_ITRx_SetConfig>
      break;
 8005238:	e02c      	b.n	8005294 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005246:	461a      	mov	r2, r3
 8005248:	f000 fc05 	bl	8005a56 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2160      	movs	r1, #96	; 0x60
 8005252:	4618      	mov	r0, r3
 8005254:	f000 fc2f 	bl	8005ab6 <TIM_ITRx_SetConfig>
      break;
 8005258:	e01c      	b.n	8005294 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005266:	461a      	mov	r2, r3
 8005268:	f000 fbc6 	bl	80059f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2140      	movs	r1, #64	; 0x40
 8005272:	4618      	mov	r0, r3
 8005274:	f000 fc1f 	bl	8005ab6 <TIM_ITRx_SetConfig>
      break;
 8005278:	e00c      	b.n	8005294 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4619      	mov	r1, r3
 8005284:	4610      	mov	r0, r2
 8005286:	f000 fc16 	bl	8005ab6 <TIM_ITRx_SetConfig>
      break;
 800528a:	e003      	b.n	8005294 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	73fb      	strb	r3, [r7, #15]
      break;
 8005290:	e000      	b.n	8005294 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005292:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80052a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3710      	adds	r7, #16
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
	...

080052b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b085      	sub	sp, #20
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4a42      	ldr	r2, [pc, #264]	; (80053cc <TIM_Base_SetConfig+0x11c>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d013      	beq.n	80052f0 <TIM_Base_SetConfig+0x40>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ce:	d00f      	beq.n	80052f0 <TIM_Base_SetConfig+0x40>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a3f      	ldr	r2, [pc, #252]	; (80053d0 <TIM_Base_SetConfig+0x120>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d00b      	beq.n	80052f0 <TIM_Base_SetConfig+0x40>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a3e      	ldr	r2, [pc, #248]	; (80053d4 <TIM_Base_SetConfig+0x124>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d007      	beq.n	80052f0 <TIM_Base_SetConfig+0x40>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4a3d      	ldr	r2, [pc, #244]	; (80053d8 <TIM_Base_SetConfig+0x128>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d003      	beq.n	80052f0 <TIM_Base_SetConfig+0x40>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4a3c      	ldr	r2, [pc, #240]	; (80053dc <TIM_Base_SetConfig+0x12c>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d108      	bne.n	8005302 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	4313      	orrs	r3, r2
 8005300:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a31      	ldr	r2, [pc, #196]	; (80053cc <TIM_Base_SetConfig+0x11c>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d01f      	beq.n	800534a <TIM_Base_SetConfig+0x9a>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005310:	d01b      	beq.n	800534a <TIM_Base_SetConfig+0x9a>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a2e      	ldr	r2, [pc, #184]	; (80053d0 <TIM_Base_SetConfig+0x120>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d017      	beq.n	800534a <TIM_Base_SetConfig+0x9a>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a2d      	ldr	r2, [pc, #180]	; (80053d4 <TIM_Base_SetConfig+0x124>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d013      	beq.n	800534a <TIM_Base_SetConfig+0x9a>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a2c      	ldr	r2, [pc, #176]	; (80053d8 <TIM_Base_SetConfig+0x128>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d00f      	beq.n	800534a <TIM_Base_SetConfig+0x9a>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a2c      	ldr	r2, [pc, #176]	; (80053e0 <TIM_Base_SetConfig+0x130>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d00b      	beq.n	800534a <TIM_Base_SetConfig+0x9a>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a2b      	ldr	r2, [pc, #172]	; (80053e4 <TIM_Base_SetConfig+0x134>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d007      	beq.n	800534a <TIM_Base_SetConfig+0x9a>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4a2a      	ldr	r2, [pc, #168]	; (80053e8 <TIM_Base_SetConfig+0x138>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d003      	beq.n	800534a <TIM_Base_SetConfig+0x9a>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4a25      	ldr	r2, [pc, #148]	; (80053dc <TIM_Base_SetConfig+0x12c>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d108      	bne.n	800535c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005350:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	4313      	orrs	r3, r2
 800535a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	695b      	ldr	r3, [r3, #20]
 8005366:	4313      	orrs	r3, r2
 8005368:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	689a      	ldr	r2, [r3, #8]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4a12      	ldr	r2, [pc, #72]	; (80053cc <TIM_Base_SetConfig+0x11c>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d013      	beq.n	80053b0 <TIM_Base_SetConfig+0x100>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a13      	ldr	r2, [pc, #76]	; (80053d8 <TIM_Base_SetConfig+0x128>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d00f      	beq.n	80053b0 <TIM_Base_SetConfig+0x100>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a13      	ldr	r2, [pc, #76]	; (80053e0 <TIM_Base_SetConfig+0x130>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d00b      	beq.n	80053b0 <TIM_Base_SetConfig+0x100>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4a12      	ldr	r2, [pc, #72]	; (80053e4 <TIM_Base_SetConfig+0x134>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d007      	beq.n	80053b0 <TIM_Base_SetConfig+0x100>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a11      	ldr	r2, [pc, #68]	; (80053e8 <TIM_Base_SetConfig+0x138>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d003      	beq.n	80053b0 <TIM_Base_SetConfig+0x100>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4a0c      	ldr	r2, [pc, #48]	; (80053dc <TIM_Base_SetConfig+0x12c>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d103      	bne.n	80053b8 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	691a      	ldr	r2, [r3, #16]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	615a      	str	r2, [r3, #20]
}
 80053be:	bf00      	nop
 80053c0:	3714      	adds	r7, #20
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop
 80053cc:	40012c00 	.word	0x40012c00
 80053d0:	40000400 	.word	0x40000400
 80053d4:	40000800 	.word	0x40000800
 80053d8:	40013400 	.word	0x40013400
 80053dc:	40015000 	.word	0x40015000
 80053e0:	40014000 	.word	0x40014000
 80053e4:	40014400 	.word	0x40014400
 80053e8:	40014800 	.word	0x40014800

080053ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b087      	sub	sp, #28
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a1b      	ldr	r3, [r3, #32]
 80053fa:	f023 0201 	bic.w	r2, r3, #1
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a1b      	ldr	r3, [r3, #32]
 8005406:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	699b      	ldr	r3, [r3, #24]
 8005412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800541a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800541e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f023 0303 	bic.w	r3, r3, #3
 8005426:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68fa      	ldr	r2, [r7, #12]
 800542e:	4313      	orrs	r3, r2
 8005430:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	f023 0302 	bic.w	r3, r3, #2
 8005438:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	697a      	ldr	r2, [r7, #20]
 8005440:	4313      	orrs	r3, r2
 8005442:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a30      	ldr	r2, [pc, #192]	; (8005508 <TIM_OC1_SetConfig+0x11c>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d013      	beq.n	8005474 <TIM_OC1_SetConfig+0x88>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4a2f      	ldr	r2, [pc, #188]	; (800550c <TIM_OC1_SetConfig+0x120>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d00f      	beq.n	8005474 <TIM_OC1_SetConfig+0x88>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a2e      	ldr	r2, [pc, #184]	; (8005510 <TIM_OC1_SetConfig+0x124>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d00b      	beq.n	8005474 <TIM_OC1_SetConfig+0x88>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a2d      	ldr	r2, [pc, #180]	; (8005514 <TIM_OC1_SetConfig+0x128>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d007      	beq.n	8005474 <TIM_OC1_SetConfig+0x88>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a2c      	ldr	r2, [pc, #176]	; (8005518 <TIM_OC1_SetConfig+0x12c>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d003      	beq.n	8005474 <TIM_OC1_SetConfig+0x88>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a2b      	ldr	r2, [pc, #172]	; (800551c <TIM_OC1_SetConfig+0x130>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d10c      	bne.n	800548e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	f023 0308 	bic.w	r3, r3, #8
 800547a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	697a      	ldr	r2, [r7, #20]
 8005482:	4313      	orrs	r3, r2
 8005484:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	f023 0304 	bic.w	r3, r3, #4
 800548c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a1d      	ldr	r2, [pc, #116]	; (8005508 <TIM_OC1_SetConfig+0x11c>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d013      	beq.n	80054be <TIM_OC1_SetConfig+0xd2>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a1c      	ldr	r2, [pc, #112]	; (800550c <TIM_OC1_SetConfig+0x120>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d00f      	beq.n	80054be <TIM_OC1_SetConfig+0xd2>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a1b      	ldr	r2, [pc, #108]	; (8005510 <TIM_OC1_SetConfig+0x124>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d00b      	beq.n	80054be <TIM_OC1_SetConfig+0xd2>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a1a      	ldr	r2, [pc, #104]	; (8005514 <TIM_OC1_SetConfig+0x128>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d007      	beq.n	80054be <TIM_OC1_SetConfig+0xd2>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a19      	ldr	r2, [pc, #100]	; (8005518 <TIM_OC1_SetConfig+0x12c>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d003      	beq.n	80054be <TIM_OC1_SetConfig+0xd2>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a18      	ldr	r2, [pc, #96]	; (800551c <TIM_OC1_SetConfig+0x130>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d111      	bne.n	80054e2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	695b      	ldr	r3, [r3, #20]
 80054d2:	693a      	ldr	r2, [r7, #16]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	699b      	ldr	r3, [r3, #24]
 80054dc:	693a      	ldr	r2, [r7, #16]
 80054de:	4313      	orrs	r3, r2
 80054e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	693a      	ldr	r2, [r7, #16]
 80054e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	685a      	ldr	r2, [r3, #4]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	697a      	ldr	r2, [r7, #20]
 80054fa:	621a      	str	r2, [r3, #32]
}
 80054fc:	bf00      	nop
 80054fe:	371c      	adds	r7, #28
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr
 8005508:	40012c00 	.word	0x40012c00
 800550c:	40013400 	.word	0x40013400
 8005510:	40014000 	.word	0x40014000
 8005514:	40014400 	.word	0x40014400
 8005518:	40014800 	.word	0x40014800
 800551c:	40015000 	.word	0x40015000

08005520 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005520:	b480      	push	{r7}
 8005522:	b087      	sub	sp, #28
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a1b      	ldr	r3, [r3, #32]
 800552e:	f023 0210 	bic.w	r2, r3, #16
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a1b      	ldr	r3, [r3, #32]
 800553a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800554e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005552:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800555a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	021b      	lsls	r3, r3, #8
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	4313      	orrs	r3, r2
 8005566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	f023 0320 	bic.w	r3, r3, #32
 800556e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	011b      	lsls	r3, r3, #4
 8005576:	697a      	ldr	r2, [r7, #20]
 8005578:	4313      	orrs	r3, r2
 800557a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4a2c      	ldr	r2, [pc, #176]	; (8005630 <TIM_OC2_SetConfig+0x110>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d007      	beq.n	8005594 <TIM_OC2_SetConfig+0x74>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4a2b      	ldr	r2, [pc, #172]	; (8005634 <TIM_OC2_SetConfig+0x114>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d003      	beq.n	8005594 <TIM_OC2_SetConfig+0x74>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a2a      	ldr	r2, [pc, #168]	; (8005638 <TIM_OC2_SetConfig+0x118>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d10d      	bne.n	80055b0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800559a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	011b      	lsls	r3, r3, #4
 80055a2:	697a      	ldr	r2, [r7, #20]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4a1f      	ldr	r2, [pc, #124]	; (8005630 <TIM_OC2_SetConfig+0x110>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d013      	beq.n	80055e0 <TIM_OC2_SetConfig+0xc0>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a1e      	ldr	r2, [pc, #120]	; (8005634 <TIM_OC2_SetConfig+0x114>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d00f      	beq.n	80055e0 <TIM_OC2_SetConfig+0xc0>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a1e      	ldr	r2, [pc, #120]	; (800563c <TIM_OC2_SetConfig+0x11c>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d00b      	beq.n	80055e0 <TIM_OC2_SetConfig+0xc0>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4a1d      	ldr	r2, [pc, #116]	; (8005640 <TIM_OC2_SetConfig+0x120>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d007      	beq.n	80055e0 <TIM_OC2_SetConfig+0xc0>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4a1c      	ldr	r2, [pc, #112]	; (8005644 <TIM_OC2_SetConfig+0x124>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d003      	beq.n	80055e0 <TIM_OC2_SetConfig+0xc0>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4a17      	ldr	r2, [pc, #92]	; (8005638 <TIM_OC2_SetConfig+0x118>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d113      	bne.n	8005608 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055e6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055ee:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	695b      	ldr	r3, [r3, #20]
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	693a      	ldr	r2, [r7, #16]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	699b      	ldr	r3, [r3, #24]
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	693a      	ldr	r2, [r7, #16]
 8005604:	4313      	orrs	r3, r2
 8005606:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	693a      	ldr	r2, [r7, #16]
 800560c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	685a      	ldr	r2, [r3, #4]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	697a      	ldr	r2, [r7, #20]
 8005620:	621a      	str	r2, [r3, #32]
}
 8005622:	bf00      	nop
 8005624:	371c      	adds	r7, #28
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr
 800562e:	bf00      	nop
 8005630:	40012c00 	.word	0x40012c00
 8005634:	40013400 	.word	0x40013400
 8005638:	40015000 	.word	0x40015000
 800563c:	40014000 	.word	0x40014000
 8005640:	40014400 	.word	0x40014400
 8005644:	40014800 	.word	0x40014800

08005648 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005648:	b480      	push	{r7}
 800564a:	b087      	sub	sp, #28
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a1b      	ldr	r3, [r3, #32]
 8005662:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	69db      	ldr	r3, [r3, #28]
 800566e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800567a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f023 0303 	bic.w	r3, r3, #3
 8005682:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	4313      	orrs	r3, r2
 800568c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005694:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	021b      	lsls	r3, r3, #8
 800569c:	697a      	ldr	r2, [r7, #20]
 800569e:	4313      	orrs	r3, r2
 80056a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a2b      	ldr	r2, [pc, #172]	; (8005754 <TIM_OC3_SetConfig+0x10c>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d007      	beq.n	80056ba <TIM_OC3_SetConfig+0x72>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a2a      	ldr	r2, [pc, #168]	; (8005758 <TIM_OC3_SetConfig+0x110>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d003      	beq.n	80056ba <TIM_OC3_SetConfig+0x72>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a29      	ldr	r2, [pc, #164]	; (800575c <TIM_OC3_SetConfig+0x114>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d10d      	bne.n	80056d6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	021b      	lsls	r3, r3, #8
 80056c8:	697a      	ldr	r2, [r7, #20]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056d4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a1e      	ldr	r2, [pc, #120]	; (8005754 <TIM_OC3_SetConfig+0x10c>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d013      	beq.n	8005706 <TIM_OC3_SetConfig+0xbe>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a1d      	ldr	r2, [pc, #116]	; (8005758 <TIM_OC3_SetConfig+0x110>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d00f      	beq.n	8005706 <TIM_OC3_SetConfig+0xbe>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a1d      	ldr	r2, [pc, #116]	; (8005760 <TIM_OC3_SetConfig+0x118>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d00b      	beq.n	8005706 <TIM_OC3_SetConfig+0xbe>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a1c      	ldr	r2, [pc, #112]	; (8005764 <TIM_OC3_SetConfig+0x11c>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d007      	beq.n	8005706 <TIM_OC3_SetConfig+0xbe>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a1b      	ldr	r2, [pc, #108]	; (8005768 <TIM_OC3_SetConfig+0x120>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d003      	beq.n	8005706 <TIM_OC3_SetConfig+0xbe>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a16      	ldr	r2, [pc, #88]	; (800575c <TIM_OC3_SetConfig+0x114>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d113      	bne.n	800572e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800570c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005714:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	695b      	ldr	r3, [r3, #20]
 800571a:	011b      	lsls	r3, r3, #4
 800571c:	693a      	ldr	r2, [r7, #16]
 800571e:	4313      	orrs	r3, r2
 8005720:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	699b      	ldr	r3, [r3, #24]
 8005726:	011b      	lsls	r3, r3, #4
 8005728:	693a      	ldr	r2, [r7, #16]
 800572a:	4313      	orrs	r3, r2
 800572c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	693a      	ldr	r2, [r7, #16]
 8005732:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	685a      	ldr	r2, [r3, #4]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	697a      	ldr	r2, [r7, #20]
 8005746:	621a      	str	r2, [r3, #32]
}
 8005748:	bf00      	nop
 800574a:	371c      	adds	r7, #28
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr
 8005754:	40012c00 	.word	0x40012c00
 8005758:	40013400 	.word	0x40013400
 800575c:	40015000 	.word	0x40015000
 8005760:	40014000 	.word	0x40014000
 8005764:	40014400 	.word	0x40014400
 8005768:	40014800 	.word	0x40014800

0800576c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800576c:	b480      	push	{r7}
 800576e:	b087      	sub	sp, #28
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a1b      	ldr	r3, [r3, #32]
 800577a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a1b      	ldr	r3, [r3, #32]
 8005786:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	69db      	ldr	r3, [r3, #28]
 8005792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800579a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800579e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	021b      	lsls	r3, r3, #8
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	031b      	lsls	r3, r3, #12
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a1a      	ldr	r2, [pc, #104]	; (8005834 <TIM_OC4_SetConfig+0xc8>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d013      	beq.n	80057f8 <TIM_OC4_SetConfig+0x8c>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a19      	ldr	r2, [pc, #100]	; (8005838 <TIM_OC4_SetConfig+0xcc>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d00f      	beq.n	80057f8 <TIM_OC4_SetConfig+0x8c>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a18      	ldr	r2, [pc, #96]	; (800583c <TIM_OC4_SetConfig+0xd0>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d00b      	beq.n	80057f8 <TIM_OC4_SetConfig+0x8c>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a17      	ldr	r2, [pc, #92]	; (8005840 <TIM_OC4_SetConfig+0xd4>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d007      	beq.n	80057f8 <TIM_OC4_SetConfig+0x8c>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a16      	ldr	r2, [pc, #88]	; (8005844 <TIM_OC4_SetConfig+0xd8>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d003      	beq.n	80057f8 <TIM_OC4_SetConfig+0x8c>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a15      	ldr	r2, [pc, #84]	; (8005848 <TIM_OC4_SetConfig+0xdc>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d109      	bne.n	800580c <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	695b      	ldr	r3, [r3, #20]
 8005804:	019b      	lsls	r3, r3, #6
 8005806:	697a      	ldr	r2, [r7, #20]
 8005808:	4313      	orrs	r3, r2
 800580a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	685a      	ldr	r2, [r3, #4]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	693a      	ldr	r2, [r7, #16]
 8005824:	621a      	str	r2, [r3, #32]
}
 8005826:	bf00      	nop
 8005828:	371c      	adds	r7, #28
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr
 8005832:	bf00      	nop
 8005834:	40012c00 	.word	0x40012c00
 8005838:	40013400 	.word	0x40013400
 800583c:	40014000 	.word	0x40014000
 8005840:	40014400 	.word	0x40014400
 8005844:	40014800 	.word	0x40014800
 8005848:	40015000 	.word	0x40015000

0800584c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800584c:	b480      	push	{r7}
 800584e:	b087      	sub	sp, #28
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a1b      	ldr	r3, [r3, #32]
 800585a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a1b      	ldr	r3, [r3, #32]
 8005866:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800587a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800587e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	4313      	orrs	r3, r2
 8005888:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005890:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	041b      	lsls	r3, r3, #16
 8005898:	693a      	ldr	r2, [r7, #16]
 800589a:	4313      	orrs	r3, r2
 800589c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a19      	ldr	r2, [pc, #100]	; (8005908 <TIM_OC5_SetConfig+0xbc>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d013      	beq.n	80058ce <TIM_OC5_SetConfig+0x82>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a18      	ldr	r2, [pc, #96]	; (800590c <TIM_OC5_SetConfig+0xc0>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d00f      	beq.n	80058ce <TIM_OC5_SetConfig+0x82>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a17      	ldr	r2, [pc, #92]	; (8005910 <TIM_OC5_SetConfig+0xc4>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d00b      	beq.n	80058ce <TIM_OC5_SetConfig+0x82>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a16      	ldr	r2, [pc, #88]	; (8005914 <TIM_OC5_SetConfig+0xc8>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d007      	beq.n	80058ce <TIM_OC5_SetConfig+0x82>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a15      	ldr	r2, [pc, #84]	; (8005918 <TIM_OC5_SetConfig+0xcc>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d003      	beq.n	80058ce <TIM_OC5_SetConfig+0x82>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a14      	ldr	r2, [pc, #80]	; (800591c <TIM_OC5_SetConfig+0xd0>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d109      	bne.n	80058e2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	695b      	ldr	r3, [r3, #20]
 80058da:	021b      	lsls	r3, r3, #8
 80058dc:	697a      	ldr	r2, [r7, #20]
 80058de:	4313      	orrs	r3, r2
 80058e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	697a      	ldr	r2, [r7, #20]
 80058e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	685a      	ldr	r2, [r3, #4]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	693a      	ldr	r2, [r7, #16]
 80058fa:	621a      	str	r2, [r3, #32]
}
 80058fc:	bf00      	nop
 80058fe:	371c      	adds	r7, #28
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr
 8005908:	40012c00 	.word	0x40012c00
 800590c:	40013400 	.word	0x40013400
 8005910:	40014000 	.word	0x40014000
 8005914:	40014400 	.word	0x40014400
 8005918:	40014800 	.word	0x40014800
 800591c:	40015000 	.word	0x40015000

08005920 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005920:	b480      	push	{r7}
 8005922:	b087      	sub	sp, #28
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a1b      	ldr	r3, [r3, #32]
 800592e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a1b      	ldr	r3, [r3, #32]
 800593a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800594e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005952:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	021b      	lsls	r3, r3, #8
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	4313      	orrs	r3, r2
 800595e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005966:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	051b      	lsls	r3, r3, #20
 800596e:	693a      	ldr	r2, [r7, #16]
 8005970:	4313      	orrs	r3, r2
 8005972:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a1a      	ldr	r2, [pc, #104]	; (80059e0 <TIM_OC6_SetConfig+0xc0>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d013      	beq.n	80059a4 <TIM_OC6_SetConfig+0x84>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a19      	ldr	r2, [pc, #100]	; (80059e4 <TIM_OC6_SetConfig+0xc4>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d00f      	beq.n	80059a4 <TIM_OC6_SetConfig+0x84>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a18      	ldr	r2, [pc, #96]	; (80059e8 <TIM_OC6_SetConfig+0xc8>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d00b      	beq.n	80059a4 <TIM_OC6_SetConfig+0x84>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4a17      	ldr	r2, [pc, #92]	; (80059ec <TIM_OC6_SetConfig+0xcc>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d007      	beq.n	80059a4 <TIM_OC6_SetConfig+0x84>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a16      	ldr	r2, [pc, #88]	; (80059f0 <TIM_OC6_SetConfig+0xd0>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d003      	beq.n	80059a4 <TIM_OC6_SetConfig+0x84>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a15      	ldr	r2, [pc, #84]	; (80059f4 <TIM_OC6_SetConfig+0xd4>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d109      	bne.n	80059b8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059aa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	695b      	ldr	r3, [r3, #20]
 80059b0:	029b      	lsls	r3, r3, #10
 80059b2:	697a      	ldr	r2, [r7, #20]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	697a      	ldr	r2, [r7, #20]
 80059bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	68fa      	ldr	r2, [r7, #12]
 80059c2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	685a      	ldr	r2, [r3, #4]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	693a      	ldr	r2, [r7, #16]
 80059d0:	621a      	str	r2, [r3, #32]
}
 80059d2:	bf00      	nop
 80059d4:	371c      	adds	r7, #28
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr
 80059de:	bf00      	nop
 80059e0:	40012c00 	.word	0x40012c00
 80059e4:	40013400 	.word	0x40013400
 80059e8:	40014000 	.word	0x40014000
 80059ec:	40014400 	.word	0x40014400
 80059f0:	40014800 	.word	0x40014800
 80059f4:	40015000 	.word	0x40015000

080059f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b087      	sub	sp, #28
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	60b9      	str	r1, [r7, #8]
 8005a02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6a1b      	ldr	r3, [r3, #32]
 8005a08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6a1b      	ldr	r3, [r3, #32]
 8005a0e:	f023 0201 	bic.w	r2, r3, #1
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	699b      	ldr	r3, [r3, #24]
 8005a1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	011b      	lsls	r3, r3, #4
 8005a28:	693a      	ldr	r2, [r7, #16]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	f023 030a 	bic.w	r3, r3, #10
 8005a34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a36:	697a      	ldr	r2, [r7, #20]
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	693a      	ldr	r2, [r7, #16]
 8005a42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	697a      	ldr	r2, [r7, #20]
 8005a48:	621a      	str	r2, [r3, #32]
}
 8005a4a:	bf00      	nop
 8005a4c:	371c      	adds	r7, #28
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr

08005a56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a56:	b480      	push	{r7}
 8005a58:	b087      	sub	sp, #28
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	60f8      	str	r0, [r7, #12]
 8005a5e:	60b9      	str	r1, [r7, #8]
 8005a60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	6a1b      	ldr	r3, [r3, #32]
 8005a66:	f023 0210 	bic.w	r2, r3, #16
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	699b      	ldr	r3, [r3, #24]
 8005a72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6a1b      	ldr	r3, [r3, #32]
 8005a78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	031b      	lsls	r3, r3, #12
 8005a86:	697a      	ldr	r2, [r7, #20]
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a92:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	011b      	lsls	r3, r3, #4
 8005a98:	693a      	ldr	r2, [r7, #16]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	697a      	ldr	r2, [r7, #20]
 8005aa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	693a      	ldr	r2, [r7, #16]
 8005aa8:	621a      	str	r2, [r3, #32]
}
 8005aaa:	bf00      	nop
 8005aac:	371c      	adds	r7, #28
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr

08005ab6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ab6:	b480      	push	{r7}
 8005ab8:	b085      	sub	sp, #20
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
 8005abe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005acc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ace:	683a      	ldr	r2, [r7, #0]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	f043 0307 	orr.w	r3, r3, #7
 8005ad8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	609a      	str	r2, [r3, #8]
}
 8005ae0:	bf00      	nop
 8005ae2:	3714      	adds	r7, #20
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr

08005aec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b087      	sub	sp, #28
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	60f8      	str	r0, [r7, #12]
 8005af4:	60b9      	str	r1, [r7, #8]
 8005af6:	607a      	str	r2, [r7, #4]
 8005af8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	021a      	lsls	r2, r3, #8
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	431a      	orrs	r2, r3
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	697a      	ldr	r2, [r7, #20]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	697a      	ldr	r2, [r7, #20]
 8005b1e:	609a      	str	r2, [r3, #8]
}
 8005b20:	bf00      	nop
 8005b22:	371c      	adds	r7, #28
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b087      	sub	sp, #28
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	60b9      	str	r1, [r7, #8]
 8005b36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	f003 031f 	and.w	r3, r3, #31
 8005b3e:	2201      	movs	r2, #1
 8005b40:	fa02 f303 	lsl.w	r3, r2, r3
 8005b44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	6a1a      	ldr	r2, [r3, #32]
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	43db      	mvns	r3, r3
 8005b4e:	401a      	ands	r2, r3
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6a1a      	ldr	r2, [r3, #32]
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	f003 031f 	and.w	r3, r3, #31
 8005b5e:	6879      	ldr	r1, [r7, #4]
 8005b60:	fa01 f303 	lsl.w	r3, r1, r3
 8005b64:	431a      	orrs	r2, r3
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	621a      	str	r2, [r3, #32]
}
 8005b6a:	bf00      	nop
 8005b6c:	371c      	adds	r7, #28
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr
	...

08005b78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b085      	sub	sp, #20
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d101      	bne.n	8005b90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b8c:	2302      	movs	r3, #2
 8005b8e:	e06d      	b.n	8005c6c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2202      	movs	r2, #2
 8005b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a30      	ldr	r2, [pc, #192]	; (8005c78 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d009      	beq.n	8005bce <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a2f      	ldr	r2, [pc, #188]	; (8005c7c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d004      	beq.n	8005bce <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a2d      	ldr	r2, [pc, #180]	; (8005c80 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d108      	bne.n	8005be0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005bd4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	68fa      	ldr	r2, [r7, #12]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005be6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a1e      	ldr	r2, [pc, #120]	; (8005c78 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d01d      	beq.n	8005c40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c0c:	d018      	beq.n	8005c40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a1c      	ldr	r2, [pc, #112]	; (8005c84 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d013      	beq.n	8005c40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a1a      	ldr	r2, [pc, #104]	; (8005c88 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d00e      	beq.n	8005c40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a15      	ldr	r2, [pc, #84]	; (8005c7c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d009      	beq.n	8005c40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a16      	ldr	r2, [pc, #88]	; (8005c8c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d004      	beq.n	8005c40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a11      	ldr	r2, [pc, #68]	; (8005c80 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d10c      	bne.n	8005c5a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c46:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	68ba      	ldr	r2, [r7, #8]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	68ba      	ldr	r2, [r7, #8]
 8005c58:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c6a:	2300      	movs	r3, #0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3714      	adds	r7, #20
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr
 8005c78:	40012c00 	.word	0x40012c00
 8005c7c:	40013400 	.word	0x40013400
 8005c80:	40015000 	.word	0x40015000
 8005c84:	40000400 	.word	0x40000400
 8005c88:	40000800 	.word	0x40000800
 8005c8c:	40014000 	.word	0x40014000

08005c90 <memset>:
 8005c90:	4402      	add	r2, r0
 8005c92:	4603      	mov	r3, r0
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d100      	bne.n	8005c9a <memset+0xa>
 8005c98:	4770      	bx	lr
 8005c9a:	f803 1b01 	strb.w	r1, [r3], #1
 8005c9e:	e7f9      	b.n	8005c94 <memset+0x4>

08005ca0 <__libc_init_array>:
 8005ca0:	b570      	push	{r4, r5, r6, lr}
 8005ca2:	4d0d      	ldr	r5, [pc, #52]	; (8005cd8 <__libc_init_array+0x38>)
 8005ca4:	4c0d      	ldr	r4, [pc, #52]	; (8005cdc <__libc_init_array+0x3c>)
 8005ca6:	1b64      	subs	r4, r4, r5
 8005ca8:	10a4      	asrs	r4, r4, #2
 8005caa:	2600      	movs	r6, #0
 8005cac:	42a6      	cmp	r6, r4
 8005cae:	d109      	bne.n	8005cc4 <__libc_init_array+0x24>
 8005cb0:	4d0b      	ldr	r5, [pc, #44]	; (8005ce0 <__libc_init_array+0x40>)
 8005cb2:	4c0c      	ldr	r4, [pc, #48]	; (8005ce4 <__libc_init_array+0x44>)
 8005cb4:	f000 f818 	bl	8005ce8 <_init>
 8005cb8:	1b64      	subs	r4, r4, r5
 8005cba:	10a4      	asrs	r4, r4, #2
 8005cbc:	2600      	movs	r6, #0
 8005cbe:	42a6      	cmp	r6, r4
 8005cc0:	d105      	bne.n	8005cce <__libc_init_array+0x2e>
 8005cc2:	bd70      	pop	{r4, r5, r6, pc}
 8005cc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cc8:	4798      	blx	r3
 8005cca:	3601      	adds	r6, #1
 8005ccc:	e7ee      	b.n	8005cac <__libc_init_array+0xc>
 8005cce:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cd2:	4798      	blx	r3
 8005cd4:	3601      	adds	r6, #1
 8005cd6:	e7f2      	b.n	8005cbe <__libc_init_array+0x1e>
 8005cd8:	08005d80 	.word	0x08005d80
 8005cdc:	08005d80 	.word	0x08005d80
 8005ce0:	08005d80 	.word	0x08005d80
 8005ce4:	08005d84 	.word	0x08005d84

08005ce8 <_init>:
 8005ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cea:	bf00      	nop
 8005cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cee:	bc08      	pop	{r3}
 8005cf0:	469e      	mov	lr, r3
 8005cf2:	4770      	bx	lr

08005cf4 <_fini>:
 8005cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cf6:	bf00      	nop
 8005cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cfa:	bc08      	pop	{r3}
 8005cfc:	469e      	mov	lr, r3
 8005cfe:	4770      	bx	lr
